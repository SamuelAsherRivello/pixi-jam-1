{"version":3,"file":"421.796907ff150e4ce2813a.bundle.js","mappings":"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","sources":["webpack:///./node_modules/pixi.js/lib/app/ResizePlugin.mjs","webpack:///./node_modules/pixi.js/lib/app/TickerPlugin.mjs","webpack:///./node_modules/pixi.js/lib/app/init.mjs","webpack:///./node_modules/pixi.js/lib/filters/FilterPipe.mjs","webpack:///./node_modules/pixi.js/lib/scene/container/bounds/getFastGlobalBounds.mjs","webpack:///./node_modules/pixi.js/lib/filters/FilterSystem.mjs","webpack:///./node_modules/pixi.js/lib/scene/container/bounds/getRenderableBounds.mjs","webpack:///./node_modules/pixi.js/lib/filters/init.mjs","webpack:///./node_modules/pixi.js/lib/rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs","webpack:///./node_modules/pixi.js/lib/scene/graphics/shared/GraphicsPipe.mjs","webpack:///./node_modules/pixi.js/lib/scene/graphics/init.mjs","webpack:///./node_modules/pixi.js/lib/scene/mesh/shared/MeshPipe.mjs","webpack:///./node_modules/pixi.js/lib/scene/mesh/init.mjs","webpack:///./node_modules/pixi.js/lib/scene/mesh/shared/BatchableMesh.mjs","webpack:///./node_modules/pixi.js/lib/scene/mesh/shared/MeshGeometry.mjs","webpack:///./node_modules/pixi.js/lib/scene/mesh-plane/PlaneGeometry.mjs","webpack:///./node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceGeometry.mjs","webpack:///./node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceSpritePipe.mjs","webpack:///./node_modules/pixi.js/lib/scene/sprite-nine-slice/init.mjs","webpack:///./node_modules/pixi.js/lib/scene/sprite-tiling/shader/tilingBit.mjs","webpack:///./node_modules/pixi.js/lib/scene/sprite-tiling/shader/TilingSpriteShader.mjs","webpack:///./node_modules/pixi.js/lib/scene/sprite-tiling/utils/QuadGeometry.mjs","webpack:///./node_modules/pixi.js/lib/scene/sprite-tiling/TilingSpritePipe.mjs","webpack:///./node_modules/pixi.js/lib/scene/sprite-tiling/utils/setUvs.mjs","webpack:///./node_modules/pixi.js/lib/scene/sprite-tiling/utils/applyMatrix.mjs","webpack:///./node_modules/pixi.js/lib/scene/sprite-tiling/utils/setPositions.mjs","webpack:///./node_modules/pixi.js/lib/scene/sprite-tiling/init.mjs","webpack:///./node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/localUniformMSDFBit.mjs","webpack:///./node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/mSDFBit.mjs","webpack:///./node_modules/pixi.js/lib/scene/text/sdfShader/SdfShader.mjs","webpack:///./node_modules/pixi.js/lib/scene/text-bitmap/BitmapTextPipe.mjs","webpack:///./node_modules/pixi.js/lib/scene/text-bitmap/init.mjs","webpack:///./node_modules/pixi.js/lib/scene/text-html/HTMLTextPipe.mjs","webpack:///./node_modules/pixi.js/lib/scene/text-html/HTMLTextRenderData.mjs","webpack:///./node_modules/pixi.js/lib/scene/text-html/utils/textStyleToCSS.mjs","webpack:///./node_modules/pixi.js/lib/scene/text-html/HtmlTextStyle.mjs","webpack:///./node_modules/pixi.js/lib/scene/text-html/utils/loadFontCSS.mjs","webpack:///./node_modules/pixi.js/lib/scene/text-html/utils/loadFontAsBase64.mjs","webpack:///./node_modules/pixi.js/lib/scene/text-html/utils/getFontCss.mjs","webpack:///./node_modules/pixi.js/lib/scene/text-html/utils/measureHtmlText.mjs","webpack:///./node_modules/pixi.js/lib/scene/text-html/HTMLTextSystem.mjs","webpack:///./node_modules/pixi.js/lib/scene/text-html/utils/extractFontFamilies.mjs","webpack:///./node_modules/pixi.js/lib/scene/text-html/utils/getSVGUrl.mjs","webpack:///./node_modules/pixi.js/lib/scene/text-html/utils/loadSVGImage.mjs","webpack:///./node_modules/pixi.js/lib/utils/browser/isSafari.mjs","webpack:///./node_modules/pixi.js/lib/scene/text-html/utils/getTemporaryCanvasFromImage.mjs","webpack:///./node_modules/pixi.js/lib/scene/text-html/init.mjs","webpack:///./node_modules/pixi.js/lib/scene/text/canvas/CanvasTextPipe.mjs","webpack:///./node_modules/pixi.js/lib/utils/canvas/getCanvasBoundingBox.mjs","webpack:///./node_modules/pixi.js/lib/scene/text/canvas/CanvasTextSystem.mjs","webpack:///./node_modules/pixi.js/lib/scene/text/init.mjs","webpack:///./node_modules/pixi.js/lib/scene/text/utils/getPo2TextureFromSource.mjs"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ResizePlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    Object.defineProperty(\n      this,\n      \"resizeTo\",\n      /**\n       * The HTML element or window to automatically resize the\n       * renderer's view element to match width and height.\n       * @member {Window|HTMLElement}\n       * @name resizeTo\n       * @memberof app.Application#\n       */\n      {\n        set(dom) {\n          globalThis.removeEventListener(\"resize\", this.queueResize);\n          this._resizeTo = dom;\n          if (dom) {\n            globalThis.addEventListener(\"resize\", this.queueResize);\n            this.resize();\n          }\n        },\n        get() {\n          return this._resizeTo;\n        }\n      }\n    );\n    this.queueResize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      this._resizeId = requestAnimationFrame(() => this.resize());\n    };\n    this._cancelResize = () => {\n      if (this._resizeId) {\n        cancelAnimationFrame(this._resizeId);\n        this._resizeId = null;\n      }\n    };\n    this.resize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      let width;\n      let height;\n      if (this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      } else {\n        const { clientWidth, clientHeight } = this._resizeTo;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      this.renderer.resize(width, height);\n      this.render();\n    };\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  }\n  /**\n   * Clean up the ticker, scoped to application\n   * @static\n   * @private\n   */\n  static destroy() {\n    globalThis.removeEventListener(\"resize\", this.queueResize);\n    this._cancelResize();\n    this._cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  }\n}\n/** @ignore */\nResizePlugin.extension = ExtensionType.Application;\n\nexport { ResizePlugin };\n//# sourceMappingURL=ResizePlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { UPDATE_PRIORITY } from '../ticker/const.mjs';\nimport { Ticker } from '../ticker/Ticker.mjs';\n\n\"use strict\";\nclass TickerPlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    options = Object.assign({\n      autoStart: true,\n      sharedTicker: false\n    }, options);\n    Object.defineProperty(\n      this,\n      \"ticker\",\n      {\n        set(ticker) {\n          if (this._ticker) {\n            this._ticker.remove(this.render, this);\n          }\n          this._ticker = ticker;\n          if (ticker) {\n            ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n          }\n        },\n        get() {\n          return this._ticker;\n        }\n      }\n    );\n    this.stop = () => {\n      this._ticker.stop();\n    };\n    this.start = () => {\n      this._ticker.start();\n    };\n    this._ticker = null;\n    this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n    if (options.autoStart) {\n      this.start();\n    }\n  }\n  /**\n   * Clean up the ticker, scoped to application.\n   * @static\n   * @private\n   */\n  static destroy() {\n    if (this._ticker) {\n      const oldTicker = this._ticker;\n      this.ticker = null;\n      oldTicker.destroy();\n    }\n  }\n}\n/** @ignore */\nTickerPlugin.extension = ExtensionType.Application;\n\nexport { TickerPlugin };\n//# sourceMappingURL=TickerPlugin.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { ResizePlugin } from './ResizePlugin.mjs';\nimport { TickerPlugin } from './TickerPlugin.mjs';\n\n\"use strict\";\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass FilterPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  push(filterEffect, container, instructionSet) {\n    const renderPipes = this._renderer.renderPipes;\n    renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      canBundle: false,\n      action: \"pushFilter\",\n      container,\n      filterEffect\n    });\n  }\n  pop(_filterEffect, _container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    if (instruction.action === \"pushFilter\") {\n      this._renderer.filter.push(instruction);\n    } else if (instruction.action === \"popFilter\") {\n      this._renderer.filter.pop();\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nFilterPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"filter\"\n};\n\nexport { FilterPipe };\n//# sourceMappingURL=FilterPipe.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { boundsPool } from './utils/matrixAndBoundsPool.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nfunction getFastGlobalBounds(target, bounds) {\n  bounds.clear();\n  _getGlobalBoundsRecursive(target, bounds);\n  if (!bounds.isValid) {\n    bounds.set(0, 0, 0, 0);\n  }\n  if (!target.renderGroup) {\n    bounds.applyMatrix(target.parentRenderGroup.worldTransform);\n  } else {\n    bounds.applyMatrix(target.renderGroup.localTransform);\n  }\n  return bounds;\n}\nfunction _getGlobalBoundsRecursive(target, bounds) {\n  if (target.localDisplayStatus !== 7 || !target.measurable) {\n    return;\n  }\n  const manageEffects = !!target.effects.length;\n  let localBounds = bounds;\n  if (target.renderGroup || manageEffects) {\n    localBounds = boundsPool.get().clear();\n  }\n  if (target.boundsArea) {\n    bounds.addRect(target.boundsArea, target.worldTransform);\n  } else {\n    if (target.renderPipeId) {\n      const viewBounds = target.bounds;\n      localBounds.addFrame(\n        viewBounds.minX,\n        viewBounds.minY,\n        viewBounds.maxX,\n        viewBounds.maxY,\n        target.groupTransform\n      );\n    }\n    const children = target.children;\n    for (let i = 0; i < children.length; i++) {\n      _getGlobalBoundsRecursive(children[i], localBounds);\n    }\n  }\n  if (manageEffects) {\n    let advanced = false;\n    for (let i = 0; i < target.effects.length; i++) {\n      if (target.effects[i].addBounds) {\n        if (!advanced) {\n          advanced = true;\n          localBounds.applyMatrix(target.parentRenderGroup.worldTransform);\n        }\n        target.effects[i].addBounds(localBounds, true);\n      }\n    }\n    if (advanced) {\n      localBounds.applyMatrix(target.parentRenderGroup.worldTransform.copyTo(tempMatrix).invert());\n      bounds.addBounds(localBounds, target.relativeGroupTransform);\n    }\n    bounds.addBounds(localBounds);\n    boundsPool.return(localBounds);\n  } else if (target.renderGroup) {\n    bounds.addBounds(localBounds, target.relativeGroupTransform);\n    boundsPool.return(localBounds);\n  }\n}\n\nexport { _getGlobalBoundsRecursive, getFastGlobalBounds };\n//# sourceMappingURL=getFastGlobalBounds.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { Matrix } from '../maths/matrix/Matrix.mjs';\nimport { Point } from '../maths/point/Point.mjs';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../rendering/renderers/types.mjs';\nimport { Bounds } from '../scene/container/bounds/Bounds.mjs';\nimport { getFastGlobalBounds } from '../scene/container/bounds/getFastGlobalBounds.mjs';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds.mjs';\nimport { warn } from '../utils/logging/warn.mjs';\n\n\"use strict\";\nconst quadGeometry = new Geometry({\n  attributes: {\n    aPosition: {\n      buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      location: 0,\n      format: \"float32x2\",\n      stride: 2 * 4,\n      offset: 0\n    }\n  },\n  indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3])\n});\nclass FilterSystem {\n  constructor(renderer) {\n    this._filterStackIndex = 0;\n    this._filterStack = [];\n    this._filterGlobalUniforms = new UniformGroup({\n      uInputSize: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputPixel: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputClamp: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uGlobalFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputTexture: { value: new Float32Array(4), type: \"vec4<f32>\" }\n    });\n    this._globalFilterBindGroup = new BindGroup({});\n    this.renderer = renderer;\n  }\n  /**\n   * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n   * @readonly\n   */\n  get activeBackTexture() {\n    return this._activeFilterData?.backTexture;\n  }\n  push(instruction) {\n    const renderer = this.renderer;\n    const filters = instruction.filterEffect.filters;\n    if (!this._filterStack[this._filterStackIndex]) {\n      this._filterStack[this._filterStackIndex] = this._getFilterData();\n    }\n    const filterData = this._filterStack[this._filterStackIndex];\n    this._filterStackIndex++;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return;\n    }\n    const bounds = filterData.bounds;\n    if (instruction.renderables) {\n      getGlobalRenderableBounds(instruction.renderables, bounds);\n    } else if (instruction.filterEffect.filterArea) {\n      bounds.clear();\n      bounds.addRect(instruction.filterEffect.filterArea);\n      bounds.applyMatrix(instruction.container.worldTransform);\n    } else {\n      getFastGlobalBounds(instruction.container, bounds);\n    }\n    const colorTextureSource = renderer.renderTarget.rootRenderTarget.colorTexture.source;\n    let resolution = colorTextureSource._resolution;\n    let padding = 0;\n    let antialias = colorTextureSource.antialias;\n    let blendRequired = false;\n    let enabled = false;\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n      resolution = Math.min(resolution, filter.resolution);\n      padding += filter.padding;\n      if (filter.antialias !== \"inherit\") {\n        if (filter.antialias === \"on\") {\n          antialias = true;\n        } else {\n          antialias = false;\n        }\n      }\n      const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n      if (!isCompatible) {\n        enabled = false;\n        break;\n      }\n      if (filter.blendRequired && !(renderer.backBuffer?.useBackBuffer ?? true)) {\n        warn(\"Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.\");\n        enabled = false;\n        break;\n      }\n      enabled = filter.enabled || enabled;\n      blendRequired = blendRequired || filter.blendRequired;\n    }\n    if (!enabled) {\n      filterData.skip = true;\n      return;\n    }\n    const viewPort = renderer.renderTarget.rootViewPort;\n    bounds.scale(resolution).fitBounds(0, viewPort.width, 0, viewPort.height).scale(1 / resolution).pad(padding).ceil();\n    if (!bounds.isPositive) {\n      filterData.skip = true;\n      return;\n    }\n    filterData.skip = false;\n    filterData.bounds = bounds;\n    filterData.blendRequired = blendRequired;\n    filterData.container = instruction.container;\n    filterData.filterEffect = instruction.filterEffect;\n    filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n    filterData.inputTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      resolution,\n      antialias\n    );\n    renderer.renderTarget.bind(filterData.inputTexture, true);\n    renderer.globalUniforms.push({\n      offset: bounds\n    });\n  }\n  pop() {\n    const renderer = this.renderer;\n    this._filterStackIndex--;\n    const filterData = this._filterStack[this._filterStackIndex];\n    if (filterData.skip) {\n      return;\n    }\n    this._activeFilterData = filterData;\n    const inputTexture = filterData.inputTexture;\n    const bounds = filterData.bounds;\n    let backTexture = Texture.EMPTY;\n    renderer.renderTarget.finishRenderPass();\n    if (filterData.blendRequired) {\n      const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n      const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n      backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n    }\n    filterData.backTexture = backTexture;\n    const filters = filterData.filterEffect.filters;\n    this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n    this._globalFilterBindGroup.setResource(backTexture.source, 3);\n    renderer.globalUniforms.pop();\n    if (filters.length === 1) {\n      filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(inputTexture);\n    } else {\n      let flip = filterData.inputTexture;\n      let flop = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        flip.source._resolution,\n        false\n      );\n      let i = 0;\n      for (i = 0; i < filters.length - 1; ++i) {\n        const filter = filters[i];\n        filter.apply(this, flip, flop, true);\n        const t = flip;\n        flip = flop;\n        flop = t;\n      }\n      filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(flip);\n      TexturePool.returnTexture(flop);\n    }\n    if (filterData.blendRequired) {\n      TexturePool.returnTexture(backTexture);\n    }\n  }\n  getBackTexture(lastRenderSurface, bounds, previousBounds) {\n    const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n    const backTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      backgroundResolution,\n      false\n    );\n    let x = bounds.minX;\n    let y = bounds.minY;\n    if (previousBounds) {\n      x -= previousBounds.minX;\n      y -= previousBounds.minY;\n    }\n    x = Math.floor(x * backgroundResolution);\n    y = Math.floor(y * backgroundResolution);\n    const width = Math.ceil(bounds.width * backgroundResolution);\n    const height = Math.ceil(bounds.height * backgroundResolution);\n    this.renderer.renderTarget.copyToTexture(\n      lastRenderSurface,\n      backTexture,\n      { x, y },\n      { width, height },\n      { x: 0, y: 0 }\n    );\n    return backTexture;\n  }\n  applyFilter(filter, input, output, clear) {\n    const renderer = this.renderer;\n    const filterData = this._filterStack[this._filterStackIndex];\n    const bounds = filterData.bounds;\n    const offset = Point.shared;\n    const previousRenderSurface = filterData.previousRenderSurface;\n    const isFinalTarget = previousRenderSurface === output;\n    let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n    let currentIndex = this._filterStackIndex - 1;\n    while (currentIndex > 0 && this._filterStack[currentIndex].skip) {\n      --currentIndex;\n    }\n    if (currentIndex > 0) {\n      resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n    }\n    const filterUniforms = this._filterGlobalUniforms;\n    const uniforms = filterUniforms.uniforms;\n    const outputFrame = uniforms.uOutputFrame;\n    const inputSize = uniforms.uInputSize;\n    const inputPixel = uniforms.uInputPixel;\n    const inputClamp = uniforms.uInputClamp;\n    const globalFrame = uniforms.uGlobalFrame;\n    const outputTexture = uniforms.uOutputTexture;\n    if (isFinalTarget) {\n      let lastIndex = this._filterStackIndex;\n      while (lastIndex > 0) {\n        lastIndex--;\n        const filterData2 = this._filterStack[this._filterStackIndex - 1];\n        if (!filterData2.skip) {\n          offset.x = filterData2.bounds.minX;\n          offset.y = filterData2.bounds.minY;\n          break;\n        }\n      }\n      outputFrame[0] = bounds.minX - offset.x;\n      outputFrame[1] = bounds.minY - offset.y;\n    } else {\n      outputFrame[0] = 0;\n      outputFrame[1] = 0;\n    }\n    outputFrame[2] = input.frame.width;\n    outputFrame[3] = input.frame.height;\n    inputSize[0] = input.source.width;\n    inputSize[1] = input.source.height;\n    inputSize[2] = 1 / inputSize[0];\n    inputSize[3] = 1 / inputSize[1];\n    inputPixel[0] = input.source.pixelWidth;\n    inputPixel[1] = input.source.pixelHeight;\n    inputPixel[2] = 1 / inputPixel[0];\n    inputPixel[3] = 1 / inputPixel[1];\n    inputClamp[0] = 0.5 * inputPixel[2];\n    inputClamp[1] = 0.5 * inputPixel[3];\n    inputClamp[2] = input.frame.width * inputSize[2] - 0.5 * inputPixel[2];\n    inputClamp[3] = input.frame.height * inputSize[3] - 0.5 * inputPixel[3];\n    const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n    globalFrame[0] = offset.x * resolution;\n    globalFrame[1] = offset.y * resolution;\n    globalFrame[2] = rootTexture.source.width * resolution;\n    globalFrame[3] = rootTexture.source.height * resolution;\n    const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n    renderer.renderTarget.bind(output, !!clear);\n    if (output instanceof Texture) {\n      outputTexture[0] = output.frame.width;\n      outputTexture[1] = output.frame.height;\n    } else {\n      outputTexture[0] = renderTarget.width;\n      outputTexture[1] = renderTarget.height;\n    }\n    outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n    filterUniforms.update();\n    if (renderer.renderPipes.uniformBatch) {\n      const batchUniforms = renderer.renderPipes.uniformBatch.getUboResource(filterUniforms);\n      this._globalFilterBindGroup.setResource(batchUniforms, 0);\n    } else {\n      this._globalFilterBindGroup.setResource(filterUniforms, 0);\n    }\n    this._globalFilterBindGroup.setResource(input.source, 1);\n    this._globalFilterBindGroup.setResource(input.source.style, 2);\n    filter.groups[0] = this._globalFilterBindGroup;\n    renderer.encoder.draw({\n      geometry: quadGeometry,\n      shader: filter,\n      state: filter._state,\n      topology: \"triangle-list\"\n    });\n    if (renderer.type === RendererType.WEBGL) {\n      renderer.renderTarget.finishRenderPass();\n    }\n  }\n  _getFilterData() {\n    return {\n      skip: false,\n      inputTexture: null,\n      bounds: new Bounds(),\n      container: null,\n      filterEffect: null,\n      blendRequired: false,\n      previousRenderSurface: null\n    };\n  }\n  /**\n   * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n   *\n   * Use `outputMatrix * vTextureCoord` in the shader.\n   * @param outputMatrix - The matrix to output to.\n   * @param {Sprite} sprite - The sprite to map to.\n   * @returns The mapped matrix.\n   */\n  calculateSpriteMatrix(outputMatrix, sprite) {\n    const data = this._activeFilterData;\n    const mappedMatrix = outputMatrix.set(\n      data.inputTexture._source.width,\n      0,\n      0,\n      data.inputTexture._source.height,\n      data.bounds.minX,\n      data.bounds.minY\n    );\n    const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n    worldTransform.invert();\n    mappedMatrix.prepend(worldTransform);\n    mappedMatrix.scale(\n      1 / sprite.texture.frame.width,\n      1 / sprite.texture.frame.height\n    );\n    mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n    return mappedMatrix;\n  }\n}\n/** @ignore */\nFilterSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"filter\"\n};\n\nexport { FilterSystem };\n//# sourceMappingURL=FilterSystem.mjs.map\n","\"use strict\";\nfunction getGlobalRenderableBounds(renderables, bounds) {\n  bounds.clear();\n  const tempMatrix = bounds.matrix;\n  for (let i = 0; i < renderables.length; i++) {\n    const renderable = renderables[i];\n    if (renderable.globalDisplayStatus < 7) {\n      continue;\n    }\n    bounds.matrix = renderable.worldTransform;\n    renderable.addBounds(bounds);\n  }\n  bounds.matrix = tempMatrix;\n  return bounds;\n}\n\nexport { getGlobalRenderableBounds };\n//# sourceMappingURL=getRenderableBounds.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { FilterPipe } from './FilterPipe.mjs';\nimport { FilterSystem } from './FilterSystem.mjs';\n\n\"use strict\";\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n//# sourceMappingURL=init.mjs.map\n","import { UniformGroup } from '../../shared/shader/UniformGroup.mjs';\n\n\"use strict\";\nconst batchSamplersUniformGroupHash = {};\nfunction getBatchSamplersUniformGroup(maxTextures) {\n  let batchSamplersUniformGroup = batchSamplersUniformGroupHash[maxTextures];\n  if (batchSamplersUniformGroup)\n    return batchSamplersUniformGroup;\n  const sampleValues = new Int32Array(maxTextures);\n  for (let i = 0; i < maxTextures; i++) {\n    sampleValues[i] = i;\n  }\n  batchSamplersUniformGroup = batchSamplersUniformGroupHash[maxTextures] = new UniformGroup({\n    uTextures: { value: sampleValues, type: `i32`, size: maxTextures }\n  }, { isStatic: true });\n  return batchSamplersUniformGroup;\n}\n\nexport { getBatchSamplersUniformGroup };\n//# sourceMappingURL=getBatchSamplersUniformGroup.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../gpu/colorToUniform.mjs';\nimport { BatchableGraphics } from './BatchableGraphics.mjs';\n\n\"use strict\";\nclass GraphicsPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    // batchable graphics list, used to render batches\n    this._graphicsBatchesHash = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n  }\n  validateRenderable(graphics) {\n    const context = graphics.context;\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n    if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(graphics, instructionSet) {\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (graphics._didGraphicsUpdate) {\n      graphics._didGraphicsUpdate = false;\n      this._rebuild(graphics);\n    }\n    if (gpuContext.isBatchable) {\n      this._addToBatcher(graphics);\n    } else {\n      this.renderer.renderPipes.batch.break(instructionSet);\n      instructionSet.add(graphics);\n    }\n  }\n  updateRenderable(graphics) {\n    const batches = this._graphicsBatchesHash[graphics.uid];\n    if (batches) {\n      for (let i = 0; i < batches.length; i++) {\n        const batch = batches[i];\n        batch.batcher.updateElement(batch);\n      }\n    }\n  }\n  destroyRenderable(graphics) {\n    if (this._graphicsBatchesHash[graphics.uid]) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n  }\n  execute(graphics) {\n    if (!graphics.isRenderable)\n      return;\n    const renderer = this.renderer;\n    const context = graphics.context;\n    const contextSystem = renderer.graphicsContext;\n    if (!contextSystem.getGpuContext(context).batches.length) {\n      return;\n    }\n    const shader = context.customShader || this._adaptor.shader;\n    this.state.blendMode = graphics.groupBlendMode;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = graphics.groupTransform;\n    localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n    color32BitToUniform(\n      graphics.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, graphics);\n  }\n  _rebuild(graphics) {\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (wasBatched) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    if (gpuContext.isBatchable) {\n      this._initBatchesForRenderable(graphics);\n    }\n    graphics.batched = gpuContext.isBatchable;\n  }\n  _addToBatcher(graphics) {\n    const batchPipe = this.renderer.renderPipes.batch;\n    const batches = this._getBatchesForRenderable(graphics);\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batchPipe.addToBatch(batch);\n    }\n  }\n  _getBatchesForRenderable(graphics) {\n    return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n  }\n  _initBatchesForRenderable(graphics) {\n    const context = graphics.context;\n    const gpuContext = this.renderer.graphicsContext.getGpuContext(context);\n    const roundPixels = this.renderer._roundPixels | graphics._roundPixels;\n    const batches = gpuContext.batches.map((batch) => {\n      const batchClone = BigPool.get(BatchableGraphics);\n      batch.copyTo(batchClone);\n      batchClone.renderable = graphics;\n      batchClone.roundPixels = roundPixels;\n      return batchClone;\n    });\n    if (this._graphicsBatchesHash[graphics.uid] === void 0) {\n      graphics.on(\"destroyed\", () => {\n        this.destroyRenderable(graphics);\n      });\n    }\n    this._graphicsBatchesHash[graphics.uid] = batches;\n    return batches;\n  }\n  _removeBatchForRenderable(graphicsUid) {\n    this._graphicsBatchesHash[graphicsUid].forEach((batch) => {\n      BigPool.return(batch);\n    });\n    this._graphicsBatchesHash[graphicsUid] = null;\n  }\n  destroy() {\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.state = null;\n    for (const i in this._graphicsBatchesHash) {\n      this._removeBatchForRenderable(i);\n    }\n    this._graphicsBatchesHash = null;\n  }\n}\n/** @ignore */\nGraphicsPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"graphics\"\n};\n\nexport { GraphicsPipe };\n//# sourceMappingURL=GraphicsPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem.mjs';\nimport { GraphicsPipe } from './shared/GraphicsPipe.mjs';\n\n\"use strict\";\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from './BatchableMesh.mjs';\n\n\"use strict\";\nclass MeshPipe {\n  constructor(renderer, adaptor) {\n    this.localUniforms = new UniformGroup({\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    this.localUniformsBindGroup = new BindGroup({\n      0: this.localUniforms\n    });\n    this._meshDataHash = /* @__PURE__ */ Object.create(null);\n    this._gpuBatchableMeshHash = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n  }\n  validateRenderable(mesh) {\n    const meshData = this._getMeshData(mesh);\n    const wasBatched = meshData.batched;\n    const isBatched = mesh.batched;\n    meshData.batched = isBatched;\n    if (wasBatched !== isBatched) {\n      return true;\n    } else if (isBatched) {\n      const geometry = mesh._geometry;\n      if (geometry.indices.length !== meshData.indexSize || geometry.positions.length !== meshData.vertexSize) {\n        meshData.indexSize = geometry.indices.length;\n        meshData.vertexSize = geometry.positions.length;\n        return true;\n      }\n      const batchableMesh = this._getBatchableMesh(mesh);\n      const texture = mesh.texture;\n      if (batchableMesh.texture._source !== texture._source) {\n        if (batchableMesh.texture._source !== texture._source) {\n          return !batchableMesh.batcher.checkAndUpdateTexture(batchableMesh, texture);\n        }\n      }\n    }\n    return false;\n  }\n  addRenderable(mesh, instructionSet) {\n    const batcher = this.renderer.renderPipes.batch;\n    const { batched } = this._getMeshData(mesh);\n    if (batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.texture = mesh._texture;\n      gpuBatchableMesh.geometry = mesh._geometry;\n      batcher.addToBatch(gpuBatchableMesh);\n    } else {\n      batcher.break(instructionSet);\n      instructionSet.add({\n        renderPipeId: \"mesh\",\n        mesh\n      });\n    }\n  }\n  updateRenderable(mesh) {\n    if (mesh.batched) {\n      const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n      gpuBatchableMesh.texture = mesh._texture;\n      gpuBatchableMesh.geometry = mesh._geometry;\n      gpuBatchableMesh.batcher.updateElement(gpuBatchableMesh);\n    }\n  }\n  destroyRenderable(mesh) {\n    this._meshDataHash[mesh.uid] = null;\n    const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n    if (gpuMesh) {\n      BigPool.return(gpuMesh);\n      this._gpuBatchableMeshHash[mesh.uid] = null;\n    }\n  }\n  execute({ mesh }) {\n    if (!mesh.isRenderable)\n      return;\n    mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n    const localUniforms = this.localUniforms;\n    localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n    localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n    localUniforms.update();\n    color32BitToUniform(\n      mesh.groupColorAlpha,\n      localUniforms.uniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, mesh);\n  }\n  _getMeshData(mesh) {\n    return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n  }\n  _initMeshData(mesh) {\n    this._meshDataHash[mesh.uid] = {\n      batched: mesh.batched,\n      indexSize: mesh._geometry.indices?.length,\n      vertexSize: mesh._geometry.positions?.length\n    };\n    mesh.on(\"destroyed\", () => {\n      this.destroyRenderable(mesh);\n    });\n    return this._meshDataHash[mesh.uid];\n  }\n  _getBatchableMesh(mesh) {\n    return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n  }\n  _initBatchableMesh(mesh) {\n    const gpuMesh = BigPool.get(BatchableMesh);\n    gpuMesh.mesh = mesh;\n    gpuMesh.texture = mesh._texture;\n    gpuMesh.roundPixels = this.renderer._roundPixels | mesh._roundPixels;\n    this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n    gpuMesh.mesh = mesh;\n    return gpuMesh;\n  }\n  destroy() {\n    for (const i in this._gpuBatchableMeshHash) {\n      if (this._gpuBatchableMeshHash[i]) {\n        BigPool.return(this._gpuBatchableMeshHash[i]);\n      }\n    }\n    this._gpuBatchableMeshHash = null;\n    this._meshDataHash = null;\n    this.localUniforms = null;\n    this.localUniformsBindGroup = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.renderer = null;\n  }\n}\n/** @ignore */\nMeshPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"mesh\"\n};\n\nexport { MeshPipe };\n//# sourceMappingURL=MeshPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { MeshPipe } from './shared/MeshPipe.mjs';\n\n\"use strict\";\nextensions.add(MeshPipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nclass BatchableMesh {\n  constructor() {\n    this.batcher = null;\n    this.batch = null;\n    this.roundPixels = 0;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  get blendMode() {\n    return this.mesh.groupBlendMode;\n  }\n  reset() {\n    this.mesh = null;\n    this.texture = null;\n    this.batcher = null;\n    this.batch = null;\n  }\n  packIndex(indexBuffer, index, indicesOffset) {\n    const indices = this.geometry.indices;\n    for (let i = 0; i < indices.length; i++) {\n      indexBuffer[index++] = indices[i] + indicesOffset;\n    }\n  }\n  packAttributes(float32View, uint32View, index, textureId) {\n    const mesh = this.mesh;\n    const geometry = this.geometry;\n    const wt = mesh.groupTransform;\n    const textureIdAndRound = textureId << 16 | this.roundPixels & 65535;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const positions = geometry.positions;\n    const uvBuffer = geometry.getBuffer(\"aUV\");\n    const uvs = uvBuffer.data;\n    let transformedUvs = uvs;\n    const textureMatrix = this.texture.textureMatrix;\n    if (!textureMatrix.isSimple) {\n      transformedUvs = this._transformedUvs;\n      if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID) {\n        if (!transformedUvs || transformedUvs.length < uvs.length) {\n          transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n        }\n        this._textureMatrixUpdateId = textureMatrix._updateID;\n        this._uvUpdateId = uvBuffer._updateID;\n        textureMatrix.multiplyUvs(uvs, transformedUvs);\n      }\n    }\n    const abgr = mesh.groupColorAlpha;\n    for (let i = 0; i < positions.length; i += 2) {\n      const x = positions[i];\n      const y = positions[i + 1];\n      float32View[index] = a * x + c * y + tx;\n      float32View[index + 1] = b * x + d * y + ty;\n      float32View[index + 2] = transformedUvs[i];\n      float32View[index + 3] = transformedUvs[i + 1];\n      uint32View[index + 4] = abgr;\n      uint32View[index + 5] = textureIdAndRound;\n      index += 6;\n    }\n  }\n  get vertexSize() {\n    return this.geometry.positions.length / 2;\n  }\n  get indexSize() {\n    return this.geometry.indices.length;\n  }\n}\n\nexport { BatchableMesh };\n//# sourceMappingURL=BatchableMesh.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst _MeshGeometry = class _MeshGeometry extends Geometry {\n  constructor(...args) {\n    let options = args[0] ?? {};\n    if (options instanceof Float32Array) {\n      deprecation(v8_0_0, \"use new MeshGeometry({ positions, uvs, indices }) instead\");\n      options = {\n        positions: options,\n        uvs: args[1],\n        indices: args[2]\n      };\n    }\n    options = { ..._MeshGeometry.defaultOptions, ...options };\n    const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    const uvs = options.uvs || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n    const shrinkToFit = options.shrinkBuffersToFit;\n    const positionBuffer = new Buffer({\n      data: positions,\n      label: \"attribute-mesh-positions\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const uvBuffer = new Buffer({\n      data: uvs,\n      label: \"attribute-mesh-uvs\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const indexBuffer = new Buffer({\n      data: indices,\n      label: \"index-mesh-buffer\",\n      shrinkToFit,\n      usage: BufferUsage.INDEX | BufferUsage.COPY_DST\n    });\n    super({\n      attributes: {\n        aPosition: {\n          buffer: positionBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        },\n        aUV: {\n          buffer: uvBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        }\n      },\n      indexBuffer,\n      topology: options.topology\n    });\n    this.batchMode = \"auto\";\n  }\n  /** The positions of the mesh. */\n  get positions() {\n    return this.attributes.aPosition.buffer.data;\n  }\n  set positions(value) {\n    this.attributes.aPosition.buffer.data = value;\n  }\n  /** The UVs of the mesh. */\n  get uvs() {\n    return this.attributes.aUV.buffer.data;\n  }\n  set uvs(value) {\n    this.attributes.aUV.buffer.data = value;\n  }\n  /** The indices of the mesh. */\n  get indices() {\n    return this.indexBuffer.data;\n  }\n  set indices(value) {\n    this.indexBuffer.data = value;\n  }\n};\n_MeshGeometry.defaultOptions = {\n  topology: \"triangle-list\",\n  shrinkBuffersToFit: false\n};\nlet MeshGeometry = _MeshGeometry;\n\nexport { MeshGeometry };\n//# sourceMappingURL=MeshGeometry.mjs.map\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nconst _PlaneGeometry = class _PlaneGeometry extends MeshGeometry {\n  constructor(...args) {\n    super({});\n    let options = args[0] ?? {};\n    if (typeof options === \"number\") {\n      deprecation(v8_0_0, \"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead\");\n      options = {\n        width: options,\n        height: args[1],\n        verticesX: args[2],\n        verticesY: args[3]\n      };\n    }\n    this.build(options);\n  }\n  /**\n   * Refreshes plane coordinates\n   * @param options - Options to be applied to plane geometry\n   */\n  build(options) {\n    options = { ..._PlaneGeometry.defaultOptions, ...options };\n    this.verticesX = this.verticesX ?? options.verticesX;\n    this.verticesY = this.verticesY ?? options.verticesY;\n    this.width = this.width ?? options.width;\n    this.height = this.height ?? options.height;\n    const total = this.verticesX * this.verticesY;\n    const verts = [];\n    const uvs = [];\n    const indices = [];\n    const verticesX = this.verticesX - 1;\n    const verticesY = this.verticesY - 1;\n    const sizeX = this.width / verticesX;\n    const sizeY = this.height / verticesY;\n    for (let i = 0; i < total; i++) {\n      const x = i % this.verticesX;\n      const y = i / this.verticesX | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / verticesX, y / verticesY);\n    }\n    const totalSub = verticesX * verticesY;\n    for (let i = 0; i < totalSub; i++) {\n      const xpos = i % verticesX;\n      const ypos = i / verticesX | 0;\n      const value = ypos * this.verticesX + xpos;\n      const value2 = ypos * this.verticesX + xpos + 1;\n      const value3 = (ypos + 1) * this.verticesX + xpos;\n      const value4 = (ypos + 1) * this.verticesX + xpos + 1;\n      indices.push(\n        value,\n        value2,\n        value3,\n        value2,\n        value4,\n        value3\n      );\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint32Array(indices);\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  }\n};\n_PlaneGeometry.defaultOptions = {\n  width: 100,\n  height: 100,\n  verticesX: 10,\n  verticesY: 10\n};\nlet PlaneGeometry = _PlaneGeometry;\n\nexport { PlaneGeometry };\n//# sourceMappingURL=PlaneGeometry.mjs.map\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry.mjs';\n\n\"use strict\";\nconst _NineSliceGeometry = class _NineSliceGeometry extends PlaneGeometry {\n  constructor(options = {}) {\n    options = { ..._NineSliceGeometry.defaultOptions, ...options };\n    super({\n      width: options.width,\n      height: options.height,\n      verticesX: 4,\n      verticesY: 4\n    });\n    this.update(options);\n  }\n  /**\n   * Updates the NineSliceGeometry with the options.\n   * @param options - The options of the NineSliceGeometry.\n   */\n  update(options) {\n    this.width = options.width ?? this.width;\n    this.height = options.height ?? this.height;\n    this._originalWidth = options.originalWidth ?? this._originalWidth;\n    this._originalHeight = options.originalHeight ?? this._originalHeight;\n    this._leftWidth = options.leftWidth ?? this._leftWidth;\n    this._rightWidth = options.rightWidth ?? this._rightWidth;\n    this._topHeight = options.topHeight ?? this._topHeight;\n    this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n    this.updateUvs();\n    this.updatePositions();\n  }\n  /** Updates the positions of the vertices. */\n  updatePositions() {\n    const positions = this.positions;\n    const w = this._leftWidth + this._rightWidth;\n    const scaleW = this.width > w ? 1 : this.width / w;\n    const h = this._topHeight + this._bottomHeight;\n    const scaleH = this.height > h ? 1 : this.height / h;\n    const scale = Math.min(scaleW, scaleH);\n    positions[9] = positions[11] = positions[13] = positions[15] = this._topHeight * scale;\n    positions[17] = positions[19] = positions[21] = positions[23] = this.height - this._bottomHeight * scale;\n    positions[25] = positions[27] = positions[29] = positions[31] = this.height;\n    positions[2] = positions[10] = positions[18] = positions[26] = this._leftWidth * scale;\n    positions[4] = positions[12] = positions[20] = positions[28] = this.width - this._rightWidth * scale;\n    positions[6] = positions[14] = positions[22] = positions[30] = this.width;\n    this.getBuffer(\"aPosition\").update();\n  }\n  /** Updates the UVs of the vertices. */\n  updateUvs() {\n    const uvs = this.uvs;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    const _uvw = 1 / this._originalWidth;\n    const _uvh = 1 / this._originalHeight;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.getBuffer(\"aUV\").update();\n  }\n};\n/** The default options for the NineSliceGeometry. */\n_NineSliceGeometry.defaultOptions = {\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  width: 100,\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  height: 100,\n  /** The width of the left column. */\n  leftWidth: 10,\n  /** The height of the top row. */\n  topHeight: 10,\n  /** The width of the right column. */\n  rightWidth: 10,\n  /** The height of the bottom row. */\n  bottomHeight: 10,\n  /** The original width of the texture */\n  originalWidth: 100,\n  /** The original height of the texture */\n  originalHeight: 100\n};\nlet NineSliceGeometry = _NineSliceGeometry;\n\nexport { NineSliceGeometry };\n//# sourceMappingURL=NineSliceGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { NineSliceGeometry } from './NineSliceGeometry.mjs';\n\n\"use strict\";\nclass NineSliceSpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  addRenderable(sprite, _instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite.batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const texture = sprite._texture;\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (gpuSprite.texture._source !== texture._source) {\n      return !gpuSprite.batcher.checkAndUpdateTexture(gpuSprite, texture);\n    }\n    return false;\n  }\n  destroyRenderable(sprite) {\n    const batchableSprite = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableSprite);\n    this._gpuSpriteHash[sprite.uid] = null;\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    sprite._didSpriteUpdate = false;\n    batchableSprite.geometry.update(sprite);\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableMesh = new BatchableMesh();\n    batchableMesh.geometry = new NineSliceGeometry();\n    batchableMesh.mesh = sprite;\n    batchableMesh.texture = sprite._texture;\n    batchableMesh.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableMesh;\n    sprite.on(\"destroyed\", () => {\n      this.destroyRenderable(sprite);\n    });\n    return batchableMesh;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      const batchableMesh = this._gpuSpriteHash[i];\n      batchableMesh.geometry.destroy();\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nNineSliceSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"nineSliceSprite\"\n};\n\nexport { NineSliceSpritePipe };\n//# sourceMappingURL=NineSliceSpritePipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(NineSliceSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nconst tilingBit = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    )\n  }\n};\nconst tilingBitGl = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    )\n  }\n};\n\nexport { tilingBit, tilingBitGl };\n//# sourceMappingURL=tilingBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { tilingBit, tilingBitGl } from './tilingBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass TilingSpriteShader extends Shader {\n  constructor() {\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBit,\n        tilingBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBitGl,\n        tilingBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    const tilingUniforms = new UniformGroup({\n      uMapCoord: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: \"vec4<f32>\" },\n      uClampOffset: { value: new Float32Array([0, 0]), type: \"vec2<f32>\" },\n      uTextureTransform: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: \"vec4<f32>\" }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: new UniformGroup({\n          uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n          uRound: { value: 0, type: \"f32\" }\n        }),\n        tilingUniforms,\n        uTexture: Texture.EMPTY.source,\n        uSampler: Texture.EMPTY.source.style\n      }\n    });\n  }\n  updateUniforms(width, height, matrix, anchorX, anchorY, texture) {\n    const tilingUniforms = this.resources.tilingUniforms;\n    const textureWidth = texture.width;\n    const textureHeight = texture.height;\n    const textureMatrix = texture.textureMatrix;\n    const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n    uTextureTransform.set(\n      matrix.a * textureWidth / width,\n      matrix.b * textureWidth / height,\n      matrix.c * textureHeight / width,\n      matrix.d * textureHeight / height,\n      matrix.tx / width,\n      matrix.ty / height\n    );\n    uTextureTransform.invert();\n    tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n    tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n    tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n    tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n    tilingUniforms.uniforms.uSizeAnchor[0] = width;\n    tilingUniforms.uniforms.uSizeAnchor[1] = height;\n    tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n    tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n    if (texture) {\n      this.resources.uTexture = texture.source;\n      this.resources.uSampler = texture.source.style;\n    }\n  }\n}\n\nexport { TilingSpriteShader };\n//# sourceMappingURL=TilingSpriteShader.mjs.map\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nclass QuadGeometry extends MeshGeometry {\n  constructor() {\n    super({\n      positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      indices: new Uint32Array([0, 1, 2, 0, 2, 3])\n    });\n  }\n}\n\nexport { QuadGeometry };\n//# sourceMappingURL=QuadGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../rendering/renderers/shared/state/State.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader.mjs';\nimport { QuadGeometry } from './utils/QuadGeometry.mjs';\nimport { setPositions } from './utils/setPositions.mjs';\nimport { setUvs } from './utils/setUvs.mjs';\n\n\"use strict\";\nconst sharedQuad = new QuadGeometry();\nclass TilingSpritePipe {\n  constructor(renderer) {\n    this._state = State.default2d;\n    this._tilingSpriteDataHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  validateRenderable(renderable) {\n    const tilingSpriteData = this._getTilingSpriteData(renderable);\n    const couldBatch = tilingSpriteData.canBatch;\n    this._updateCanBatch(renderable);\n    const canBatch = tilingSpriteData.canBatch;\n    if (canBatch && canBatch === couldBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (batchableMesh && batchableMesh.texture._source !== renderable.texture._source) {\n        return !batchableMesh.batcher.checkAndUpdateTexture(batchableMesh, renderable.texture);\n      }\n    }\n    return couldBatch !== canBatch;\n  }\n  addRenderable(tilingSprite, instructionSet) {\n    const batcher = this._renderer.renderPipes.batch;\n    this._updateCanBatch(tilingSprite);\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { geometry, canBatch } = tilingSpriteData;\n    if (canBatch) {\n      tilingSpriteData.batchableMesh || (tilingSpriteData.batchableMesh = new BatchableMesh());\n      const batchableMesh = tilingSpriteData.batchableMesh;\n      if (tilingSprite._didTilingSpriteUpdate) {\n        tilingSprite._didTilingSpriteUpdate = false;\n        this._updateBatchableMesh(tilingSprite);\n        batchableMesh.geometry = geometry;\n        batchableMesh.mesh = tilingSprite;\n        batchableMesh.texture = tilingSprite._texture;\n      }\n      batchableMesh.roundPixels = this._renderer._roundPixels | tilingSprite._roundPixels;\n      batcher.addToBatch(batchableMesh);\n    } else {\n      batcher.break(instructionSet);\n      tilingSpriteData.shader || (tilingSpriteData.shader = new TilingSpriteShader());\n      this.updateRenderable(tilingSprite);\n      instructionSet.add(tilingSprite);\n    }\n  }\n  execute(tilingSprite) {\n    const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n    shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n    localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n    color32BitToUniform(\n      tilingSprite.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n    this._renderer.encoder.draw({\n      geometry: sharedQuad,\n      shader,\n      state: this._state\n    });\n  }\n  updateRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { canBatch } = tilingSpriteData;\n    if (canBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (tilingSprite._didTilingSpriteUpdate)\n        this._updateBatchableMesh(tilingSprite);\n      batchableMesh.batcher.updateElement(batchableMesh);\n    } else if (tilingSprite._didTilingSpriteUpdate) {\n      const { shader } = tilingSpriteData;\n      shader.updateUniforms(\n        tilingSprite.width,\n        tilingSprite.height,\n        tilingSprite._tileTransform.matrix,\n        tilingSprite.anchor.x,\n        tilingSprite.anchor.y,\n        tilingSprite.texture\n      );\n    }\n    tilingSprite._didTilingSpriteUpdate = false;\n  }\n  destroyRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    tilingSpriteData.batchableMesh = null;\n    tilingSpriteData.shader?.destroy();\n    this._tilingSpriteDataHash[tilingSprite.uid] = null;\n  }\n  _getTilingSpriteData(renderable) {\n    return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n  }\n  _initTilingSpriteData(tilingSprite) {\n    const geometry = new MeshGeometry({\n      indices: sharedQuad.indices,\n      positions: sharedQuad.positions.slice(),\n      uvs: sharedQuad.uvs.slice()\n    });\n    this._tilingSpriteDataHash[tilingSprite.uid] = {\n      canBatch: true,\n      renderable: tilingSprite,\n      geometry\n    };\n    tilingSprite.on(\"destroyed\", () => {\n      this.destroyRenderable(tilingSprite);\n    });\n    return this._tilingSpriteDataHash[tilingSprite.uid];\n  }\n  _updateBatchableMesh(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const { geometry } = renderableData;\n    const style = tilingSprite.texture.source.style;\n    if (style.addressMode !== \"repeat\") {\n      style.addressMode = \"repeat\";\n      style.update();\n    }\n    setUvs(tilingSprite, geometry.uvs);\n    setPositions(tilingSprite, geometry.positions);\n  }\n  destroy() {\n    for (const i in this._tilingSpriteDataHash) {\n      this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n    }\n    this._tilingSpriteDataHash = null;\n    this._renderer = null;\n  }\n  _updateCanBatch(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const texture = tilingSprite.texture;\n    let _nonPowOf2wrapping = true;\n    if (this._renderer.type === RendererType.WEBGL) {\n      _nonPowOf2wrapping = this._renderer.context.supports.nonPowOf2wrapping;\n    }\n    renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n    return renderableData.canBatch;\n  }\n}\n/** @ignore */\nTilingSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"tilingSprite\"\n};\n\nexport { TilingSpritePipe };\n//# sourceMappingURL=TilingSpritePipe.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { applyMatrix } from './applyMatrix.mjs';\n\n\"use strict\";\nfunction setUvs(tilingSprite, uvs) {\n  const texture = tilingSprite.texture;\n  const width = texture.frame.width;\n  const height = texture.frame.height;\n  let anchorX = 0;\n  let anchorY = 0;\n  if (tilingSprite._applyAnchorToTexture) {\n    anchorX = tilingSprite.anchor.x;\n    anchorY = tilingSprite.anchor.y;\n  }\n  uvs[0] = uvs[6] = -anchorX;\n  uvs[2] = uvs[4] = 1 - anchorX;\n  uvs[1] = uvs[3] = -anchorY;\n  uvs[5] = uvs[7] = 1 - anchorY;\n  const textureMatrix = Matrix.shared;\n  textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n  textureMatrix.tx /= tilingSprite.width;\n  textureMatrix.ty /= tilingSprite.height;\n  textureMatrix.invert();\n  textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n  applyMatrix(uvs, 2, 0, textureMatrix);\n}\n\nexport { setUvs };\n//# sourceMappingURL=setUvs.mjs.map\n","\"use strict\";\nfunction applyMatrix(array, stride, offset, matrix) {\n  let index = 0;\n  const size = array.length / (stride || 2);\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  offset *= stride;\n  while (index < size) {\n    const x = array[offset];\n    const y = array[offset + 1];\n    array[offset] = a * x + c * y + tx;\n    array[offset + 1] = b * x + d * y + ty;\n    offset += stride;\n    index++;\n  }\n}\n\nexport { applyMatrix };\n//# sourceMappingURL=applyMatrix.mjs.map\n","\"use strict\";\nfunction setPositions(tilingSprite, positions) {\n  const anchorX = tilingSprite.anchor.x;\n  const anchorY = tilingSprite.anchor.y;\n  positions[0] = -anchorX * tilingSprite.width;\n  positions[1] = -anchorY * tilingSprite.height;\n  positions[2] = (1 - anchorX) * tilingSprite.width;\n  positions[3] = -anchorY * tilingSprite.height;\n  positions[4] = (1 - anchorX) * tilingSprite.width;\n  positions[5] = (1 - anchorY) * tilingSprite.height;\n  positions[6] = -anchorX * tilingSprite.width;\n  positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n\nexport { setPositions };\n//# sourceMappingURL=setPositions.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { TilingSpritePipe } from './TilingSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(TilingSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nconst localUniformMSDFBit = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `\n    ),\n    main: (\n      /* wgsl */\n      ` \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n    )\n  }\n};\nconst localUniformMSDFBitGl = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform float uDistance;\n         `\n    ),\n    main: (\n      /* glsl */\n      ` \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n    )\n  }\n};\n\nexport { localUniformMSDFBit, localUniformMSDFBitGl };\n//# sourceMappingURL=localUniformMSDFBit.mjs.map\n","\"use strict\";\nconst mSDFBit = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        `\n    )\n  }\n};\nconst mSDFBitGl = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        `\n    )\n  }\n};\n\nexport { mSDFBit, mSDFBitGl };\n//# sourceMappingURL=mSDFBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBit, generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit.mjs';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass SdfShader extends Shader {\n  constructor() {\n    const uniforms = new UniformGroup({\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uDistance: { value: 4, type: \"f32\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    const maxTextures = getMaxTexturesPerBatch();\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(maxTextures),\n        localUniformMSDFBit,\n        mSDFBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBitGl,\n        generateTextureBatchBitGl(maxTextures),\n        localUniformMSDFBitGl,\n        mSDFBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n}\n\nexport { SdfShader };\n//# sourceMappingURL=SdfShader.mjs.map\n","import { Cache } from '../../assets/cache/Cache.mjs';\nimport { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { Graphics } from '../graphics/shared/Graphics.mjs';\nimport { SdfShader } from '../text/sdfShader/SdfShader.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\n\n\"use strict\";\nclass BitmapTextPipe {\n  // private _sdfShader: SdfShader;\n  constructor(renderer) {\n    this._gpuBitmapText = {};\n    this._renderer = renderer;\n  }\n  validateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n  }\n  addRenderable(bitmapText, instructionSet) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  destroyRenderable(bitmapText) {\n    this._destroyRenderableByUid(bitmapText.uid);\n  }\n  _destroyRenderableByUid(renderableUid) {\n    const context = this._gpuBitmapText[renderableUid].context;\n    if (context.customShader) {\n      BigPool.return(context.customShader);\n      context.customShader = null;\n    }\n    BigPool.return(this._gpuBitmapText[renderableUid]);\n    this._gpuBitmapText[renderableUid] = null;\n  }\n  updateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  _updateContext(bitmapText, proxyGraphics) {\n    const { context } = proxyGraphics;\n    const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n    context.clear();\n    if (bitmapFont.distanceField.type !== \"none\") {\n      if (!context.customShader) {\n        context.customShader = BigPool.get(SdfShader);\n      }\n    }\n    const chars = Array.from(bitmapText.text);\n    const style = bitmapText._style;\n    let currentY = bitmapFont.baseLineOffset;\n    const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont);\n    let index = 0;\n    const padding = style.padding;\n    const scale = bitmapTextLayout.scale;\n    let tx = bitmapTextLayout.width;\n    let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n    if (style._stroke) {\n      tx += style._stroke.width / scale;\n      ty += style._stroke.width / scale;\n    }\n    context.translate(-bitmapText._anchor._x * tx - padding, -bitmapText._anchor._y * ty - padding).scale(scale, scale);\n    const tint = bitmapFont.applyFillAsTint ? style._fill.color : 16777215;\n    for (let i = 0; i < bitmapTextLayout.lines.length; i++) {\n      const line = bitmapTextLayout.lines[i];\n      for (let j = 0; j < line.charPositions.length; j++) {\n        const char = chars[index++];\n        const charData = bitmapFont.chars[char];\n        if (charData?.texture) {\n          context.texture(\n            charData.texture,\n            tint ? tint : \"black\",\n            Math.round(line.charPositions[j] + charData.xOffset),\n            Math.round(currentY + charData.yOffset)\n          );\n        }\n      }\n      currentY += bitmapFont.lineHeight;\n    }\n  }\n  _getGpuBitmapText(bitmapText) {\n    return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n  }\n  initGpuText(bitmapText) {\n    const proxyRenderable = BigPool.get(Graphics);\n    this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n    this._updateContext(bitmapText, proxyRenderable);\n    bitmapText.on(\"destroyed\", () => {\n      this.destroyRenderable(bitmapText);\n    });\n    return this._gpuBitmapText[bitmapText.uid];\n  }\n  _updateDistanceField(bitmapText) {\n    const context = this._getGpuBitmapText(bitmapText).context;\n    const fontFamily = bitmapText._style.fontFamily;\n    const dynamicFont = Cache.get(`${fontFamily}-bitmap`);\n    const { a, b, c, d } = bitmapText.groupTransform;\n    const dx = Math.sqrt(a * a + b * b);\n    const dy = Math.sqrt(c * c + d * d);\n    const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n    const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n    const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n    context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n  }\n  destroy() {\n    for (const uid in this._gpuBitmapText) {\n      this._destroyRenderableByUid(uid);\n    }\n    this._gpuBitmapText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBitmapTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"bitmapText\"\n};\nfunction syncWithProxy(container, proxy) {\n  proxy.groupTransform = container.groupTransform;\n  proxy.groupColorAlpha = container.groupColorAlpha;\n  proxy.groupColor = container.groupColor;\n  proxy.groupBlendMode = container.groupBlendMode;\n  proxy.globalDisplayStatus = container.globalDisplayStatus;\n  proxy.groupTransform = container.groupTransform;\n  proxy.localDisplayStatus = container.localDisplayStatus;\n  proxy.groupAlpha = container.groupAlpha;\n  proxy._roundPixels = container._roundPixels;\n}\n\nexport { BitmapTextPipe };\n//# sourceMappingURL=BitmapTextPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { BitmapTextPipe } from './BitmapTextPipe.mjs';\n\n\"use strict\";\nextensions.add(BitmapTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass HTMLTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const newKey = htmlText._getKey();\n    if (gpuText.textureNeedsUploading) {\n      gpuText.textureNeedsUploading = false;\n      return true;\n    }\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(htmlText, _instructionSet) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite);\n  }\n  updateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    batchableSprite.batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(htmlText) {\n    this._destroyRenderableById(htmlText.uid);\n  }\n  _destroyRenderableById(htmlTextUid) {\n    const gpuText = this._gpuText[htmlTextUid];\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[htmlTextUid] = null;\n  }\n  _updateText(htmlText) {\n    const newKey = htmlText._getKey();\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(htmlText).catch((e) => {\n        console.error(e);\n      });\n    }\n    htmlText._didTextUpdate = false;\n    const padding = htmlText._style.padding;\n    updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n  }\n  async _updateGpuText(htmlText) {\n    htmlText._didTextUpdate = false;\n    const gpuText = this._getGpuText(htmlText);\n    if (gpuText.generatingTexture)\n      return;\n    const newKey = htmlText._getKey();\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    gpuText.generatingTexture = true;\n    gpuText.currentKey = newKey;\n    const resolution = htmlText.resolution ?? this._renderer.resolution;\n    const texture = await this._renderer.htmlText.getManagedTexture(\n      htmlText.text,\n      resolution,\n      htmlText._style,\n      htmlText._getKey()\n    );\n    const batchableSprite = gpuText.batchableSprite;\n    batchableSprite.texture = gpuText.texture = texture;\n    gpuText.generatingTexture = false;\n    gpuText.textureNeedsUploading = true;\n    htmlText.onViewUpdate();\n    const padding = htmlText._style.padding;\n    updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n  }\n  _getGpuText(htmlText) {\n    return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n  }\n  initGpuText(htmlText) {\n    const gpuTextData = {\n      texture: Texture.EMPTY,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite),\n      textureNeedsUploading: false,\n      generatingTexture: false\n    };\n    const batchableSprite = gpuTextData.batchableSprite;\n    batchableSprite.renderable = htmlText;\n    batchableSprite.texture = Texture.EMPTY;\n    batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableSprite.roundPixels = this._renderer._roundPixels | htmlText._roundPixels;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    this._gpuText[htmlText.uid] = gpuTextData;\n    htmlText.on(\"destroyed\", () => {\n      this.destroyRenderable(htmlText);\n    });\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextPipe };\n//# sourceMappingURL=HTMLTextPipe.mjs.map\n","\"use strict\";\nconst nssvg = \"http://www.w3.org/2000/svg\";\nconst nsxhtml = \"http://www.w3.org/1999/xhtml\";\nclass HTMLTextRenderData {\n  constructor() {\n    this.svgRoot = document.createElementNS(nssvg, \"svg\");\n    this.foreignObject = document.createElementNS(nssvg, \"foreignObject\");\n    this.domElement = document.createElementNS(nsxhtml, \"div\");\n    this.styleElement = document.createElementNS(nsxhtml, \"style\");\n    this.image = new Image();\n    const { foreignObject, svgRoot, styleElement, domElement } = this;\n    foreignObject.setAttribute(\"width\", \"10000\");\n    foreignObject.setAttribute(\"height\", \"10000\");\n    foreignObject.style.overflow = \"hidden\";\n    svgRoot.appendChild(foreignObject);\n    foreignObject.appendChild(styleElement);\n    foreignObject.appendChild(domElement);\n  }\n}\n\nexport { HTMLTextRenderData, nssvg, nsxhtml };\n//# sourceMappingURL=HTMLTextRenderData.mjs.map\n","import { Color } from '../../../color/Color.mjs';\n\n\"use strict\";\nfunction textStyleToCSS(style) {\n  const stroke = style._stroke;\n  const fill = style._fill;\n  const cssStyleString = [\n    `color: ${Color.shared.setValue(fill.color).toHex()}`,\n    `font-size: ${style.fontSize}px`,\n    `font-family: ${style.fontFamily}`,\n    `font-weight: ${style.fontWeight}`,\n    `font-style: ${style.fontStyle}`,\n    `font-variant: ${style.fontVariant}`,\n    `letter-spacing: ${style.letterSpacing}px`,\n    `text-align: ${style.align}`,\n    `padding: ${style.padding}px`,\n    `white-space: ${style.whiteSpace === \"pre\" && style.wordWrap ? \"pre-wrap\" : style.whiteSpace}`,\n    ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n    ...style.wordWrap ? [\n      `word-wrap: ${style.breakWords ? \"break-all\" : \"break-word\"}`,\n      `max-width: ${style.wordWrapWidth}px`\n    ] : [],\n    ...stroke ? [strokeToCSS(stroke)] : [],\n    ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n    ...style.cssOverrides\n  ].join(\";\");\n  const cssStyles = [`div { ${cssStyleString} }`];\n  tagStyleToCSS(style.tagStyles, cssStyles);\n  return cssStyles.join(\" \");\n}\nfunction dropShadowToCSS(dropShadowStyle) {\n  const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n  const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const position = `${x}px ${y}px`;\n  if (dropShadowStyle.blur > 0) {\n    return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n  }\n  return `text-shadow: ${position} ${color}`;\n}\nfunction strokeToCSS(stroke) {\n  return [\n    `-webkit-text-stroke-width: ${stroke.width}px`,\n    `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    `text-stroke-width: ${stroke.width}px`,\n    `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    \"paint-order: stroke\"\n  ].join(\";\");\n}\nconst templates = {\n  fontSize: `font-size: {{VALUE}}px`,\n  fontFamily: `font-family: {{VALUE}}`,\n  fontWeight: `font-weight: {{VALUE}}`,\n  fontStyle: `font-style: {{VALUE}}`,\n  fontVariant: `font-variant: {{VALUE}}`,\n  letterSpacing: `letter-spacing: {{VALUE}}px`,\n  align: `text-align: {{VALUE}}`,\n  padding: `padding: {{VALUE}}px`,\n  whiteSpace: `white-space: {{VALUE}}`,\n  lineHeight: `line-height: {{VALUE}}px`,\n  wordWrapWidth: `max-width: {{VALUE}}px`\n};\nconst transform = {\n  fill: (value) => `color: ${Color.shared.setValue(value).toHex()}`,\n  breakWords: (value) => `word-wrap: ${value ? \"break-all\" : \"break-word\"}`,\n  stroke: strokeToCSS,\n  dropShadow: dropShadowToCSS\n};\nfunction tagStyleToCSS(tagStyles, out) {\n  for (const i in tagStyles) {\n    const tagStyle = tagStyles[i];\n    const cssTagStyle = [];\n    for (const j in tagStyle) {\n      if (transform[j]) {\n        cssTagStyle.push(transform[j](tagStyle[j]));\n      } else if (templates[j]) {\n        cssTagStyle.push(templates[j].replace(\"{{VALUE}}\", tagStyle[j]));\n      }\n    }\n    out.push(`${i} { ${cssTagStyle.join(\";\")} }`);\n  }\n}\n\nexport { textStyleToCSS };\n//# sourceMappingURL=textStyleToCSS.mjs.map\n","import { warn } from '../../utils/logging/warn.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey.mjs';\nimport { textStyleToCSS } from './utils/textStyleToCSS.mjs';\n\n\"use strict\";\nclass HTMLTextStyle extends TextStyle {\n  constructor(options = {}) {\n    super(options);\n    this._cssOverrides = [];\n    this.cssOverrides ?? (this.cssOverrides = options.cssOverrides);\n    this.tagStyles = options.tagStyles ?? {};\n  }\n  /** List of style overrides that will be applied to the HTML text. */\n  set cssOverrides(value) {\n    this._cssOverrides = value instanceof Array ? value : [value];\n    this.update();\n  }\n  get cssOverrides() {\n    return this._cssOverrides;\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join(\"-\");\n    return this._styleKey;\n  }\n  update() {\n    this._cssStyle = null;\n    super.update();\n  }\n  /**\n   * Creates a new HTMLTextStyle object with the same values as this one.\n   * @returns New cloned HTMLTextStyle object\n   */\n  clone() {\n    return new HTMLTextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth,\n      cssOverrides: this.cssOverrides\n    });\n  }\n  get cssStyle() {\n    if (!this._cssStyle) {\n      this._cssStyle = textStyleToCSS(this);\n    }\n    return this._cssStyle;\n  }\n  /**\n   * Add a style override, this can be any CSS property\n   * it will override any built-in style. This is the\n   * property and the value as a string (e.g., `color: red`).\n   * This will override any other internal style.\n   * @param {string} value - CSS style(s) to add.\n   * @example\n   * style.addOverride('background-color: red');\n   */\n  addOverride(...value) {\n    const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n    if (toAdd.length > 0) {\n      this.cssOverrides.push(...toAdd);\n      this.update();\n    }\n  }\n  /**\n   * Remove any overrides that match the value.\n   * @param {string} value - CSS style to remove.\n   * @example\n   * style.removeOverride('background-color: red');\n   */\n  removeOverride(...value) {\n    const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n    if (toRemove.length > 0) {\n      this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n      this.update();\n    }\n  }\n  set fill(value) {\n    if (typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color fill is not supported by HTMLText\");\n    }\n    super.fill = value;\n  }\n  set stroke(value) {\n    if (value && typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color stroke is not supported by HTMLText\");\n    }\n    super.stroke = value;\n  }\n}\n\nexport { HTMLTextStyle };\n//# sourceMappingURL=HtmlTextStyle.mjs.map\n","import { loadFontAsBase64 } from './loadFontAsBase64.mjs';\n\n\"use strict\";\nasync function loadFontCSS(style, url) {\n  const dataSrc = await loadFontAsBase64(url);\n  return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n\nexport { loadFontCSS };\n//# sourceMappingURL=loadFontCSS.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\n\n\"use strict\";\nasync function loadFontAsBase64(url) {\n  const response = await DOMAdapter.get().fetch(url);\n  const blob = await response.blob();\n  const reader = new FileReader();\n  const dataSrc = await new Promise((resolve, reject) => {\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n  return dataSrc;\n}\n\nexport { loadFontAsBase64 };\n//# sourceMappingURL=loadFontAsBase64.mjs.map\n","import { Cache } from '../../../assets/cache/Cache.mjs';\nimport { loadFontCSS } from './loadFontCSS.mjs';\n\n\"use strict\";\nconst FontStylePromiseCache = /* @__PURE__ */ new Map();\nasync function getFontCss(fontFamilies, style, defaultOptions) {\n  const fontPromises = fontFamilies.filter((fontFamily) => Cache.has(`${fontFamily}-and-url`)).map((fontFamily, i) => {\n    if (!FontStylePromiseCache.has(fontFamily)) {\n      const { url } = Cache.get(`${fontFamily}-and-url`);\n      if (i === 0) {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: style.fontWeight,\n          fontStyle: style.fontStyle,\n          fontFamily\n        }, url));\n      } else {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: defaultOptions.fontWeight,\n          fontStyle: defaultOptions.fontStyle,\n          fontFamily\n        }, url));\n      }\n    }\n    return FontStylePromiseCache.get(fontFamily);\n  });\n  return (await Promise.all(fontPromises)).join(\"\\n\");\n}\n\nexport { FontStylePromiseCache, getFontCss };\n//# sourceMappingURL=getFontCss.mjs.map\n","import { CanvasTextMetrics } from '../../text/canvas/CanvasTextMetrics.mjs';\nimport { HTMLTextRenderData } from '../HTMLTextRenderData.mjs';\n\n\"use strict\";\nlet tempHTMLTextRenderData;\nfunction measureHtmlText(text, style, fontStyleCSS, htmlTextRenderData) {\n  htmlTextRenderData = htmlTextRenderData || tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData());\n  const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div>${text}</div>`;\n  domElement.setAttribute(\"style\", \"transform-origin: top left; display: inline-block\");\n  if (fontStyleCSS) {\n    styleElement.textContent = fontStyleCSS;\n  }\n  document.body.appendChild(svgRoot);\n  const contentBounds = domElement.getBoundingClientRect();\n  svgRoot.remove();\n  const descenderPadding = CanvasTextMetrics.measureFont(style.fontStyle).descent;\n  return {\n    width: contentBounds.width,\n    height: contentBounds.height + descenderPadding\n  };\n}\n\nexport { measureHtmlText };\n//# sourceMappingURL=measureHtmlText.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { isSafari } from '../../utils/browser/isSafari.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource.mjs';\nimport { HTMLTextRenderData } from './HTMLTextRenderData.mjs';\nimport { HTMLTextStyle } from './HtmlTextStyle.mjs';\nimport { extractFontFamilies } from './utils/extractFontFamilies.mjs';\nimport { getFontCss } from './utils/getFontCss.mjs';\nimport { getSVGUrl } from './utils/getSVGUrl.mjs';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage.mjs';\nimport { loadSVGImage } from './utils/loadSVGImage.mjs';\nimport { measureHtmlText } from './utils/measureHtmlText.mjs';\n\n\"use strict\";\nclass HTMLTextSystem {\n  constructor(renderer) {\n    this._activeTextures = {};\n    this._renderer = renderer;\n    this._createCanvas = renderer.type === RendererType.WEBGPU;\n  }\n  getTexture(options) {\n    return this._buildTexturePromise(\n      options.text,\n      options.resolution,\n      options.style\n    );\n  }\n  getManagedTexture(text, resolution, style, textKey) {\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].promise;\n    }\n    const promise = this._buildTexturePromise(text, resolution, style).then((texture) => {\n      this._activeTextures[textKey].texture = texture;\n      return texture;\n    });\n    this._activeTextures[textKey] = {\n      texture: null,\n      promise,\n      usageCount: 1\n    };\n    return promise;\n  }\n  async _buildTexturePromise(text, resolution, style) {\n    const htmlTextData = BigPool.get(HTMLTextRenderData);\n    const fontFamilies = extractFontFamilies(text, style);\n    const fontCSS = await getFontCss(\n      fontFamilies,\n      style,\n      HTMLTextStyle.defaultTextStyle\n    );\n    const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const image = htmlTextData.image;\n    image.width = width | 0;\n    image.height = height | 0;\n    const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n    await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n    let resource = image;\n    if (this._createCanvas) {\n      resource = getTemporaryCanvasFromImage(image, resolution);\n    }\n    const texture = getPo2TextureFromSource(resource, image.width, image.height, resolution);\n    if (this._createCanvas) {\n      this._renderer.texture.initSource(texture.source);\n    }\n    BigPool.return(htmlTextData);\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    if (!activeTexture)\n      return;\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      if (activeTexture.texture) {\n        this._cleanUp(activeTexture);\n      } else {\n        activeTexture.promise.then((texture) => {\n          activeTexture.texture = texture;\n          this._cleanUp(activeTexture);\n        }).catch(() => {\n          warn(\"HTMLTextSystem: Failed to clean texture\");\n        });\n      }\n      this._activeTextures[textKey] = null;\n    }\n  }\n  _cleanUp(activeTexture) {\n    TexturePool.returnTexture(activeTexture.texture);\n    activeTexture.texture.source.resource = null;\n    activeTexture.texture.source.uploadMethodId = \"unknown\";\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nHTMLTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"htmlText\"\n};\nHTMLTextSystem.defaultFontOptions = {\n  fontFamily: \"Arial\",\n  fontStyle: \"normal\",\n  fontWeight: \"normal\"\n};\n\nexport { HTMLTextSystem };\n//# sourceMappingURL=HTMLTextSystem.mjs.map\n","\"use strict\";\nfunction extractFontFamilies(text, style) {\n  const fontFamily = style.fontFamily;\n  const fontFamilies = [];\n  const dedupe = {};\n  const regex = /font-family:([^;\"\\s]+)/g;\n  const matches = text.match(regex);\n  function addFontFamily(fontFamily2) {\n    if (!dedupe[fontFamily2]) {\n      fontFamilies.push(fontFamily2);\n      dedupe[fontFamily2] = true;\n    }\n  }\n  if (Array.isArray(fontFamily)) {\n    for (let i = 0; i < fontFamily.length; i++) {\n      addFontFamily(fontFamily[i]);\n    }\n  } else {\n    addFontFamily(fontFamily);\n  }\n  if (matches) {\n    matches.forEach((match) => {\n      const fontFamily2 = match.split(\":\")[1].trim();\n      addFontFamily(fontFamily2);\n    });\n  }\n  for (const i in style.tagStyles) {\n    const fontFamily2 = style.tagStyles[i].fontFamily;\n    addFontFamily(fontFamily2);\n  }\n  return fontFamilies;\n}\n\nexport { extractFontFamilies };\n//# sourceMappingURL=extractFontFamilies.mjs.map\n","\"use strict\";\nfunction getSVGUrl(text, style, resolution, fontCSS, htmlTextData) {\n  const { domElement, styleElement, svgRoot } = htmlTextData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div>${text}</div>`;\n  domElement.setAttribute(\"style\", `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n  styleElement.textContent = fontCSS;\n  const { width, height } = htmlTextData.image;\n  svgRoot.setAttribute(\"width\", width.toString());\n  svgRoot.setAttribute(\"height\", height.toString());\n  return new XMLSerializer().serializeToString(svgRoot);\n}\n\nexport { getSVGUrl };\n//# sourceMappingURL=getSVGUrl.mjs.map\n","\"use strict\";\nfunction loadSVGImage(image, url, delay) {\n  return new Promise(async (resolve) => {\n    if (delay) {\n      await new Promise((resolve2) => setTimeout(resolve2, 100));\n    }\n    image.onload = () => {\n      resolve();\n    };\n    image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n    image.crossOrigin = \"anonymous\";\n  });\n}\n\nexport { loadSVGImage };\n//# sourceMappingURL=loadSVGImage.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\n\n\"use strict\";\nfunction isSafari() {\n  const { userAgent } = DOMAdapter.get().getNavigator();\n  return /^((?!chrome|android).)*safari/i.test(userAgent);\n}\n\nexport { isSafari };\n//# sourceMappingURL=isSafari.mjs.map\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\n\n\"use strict\";\nfunction getTemporaryCanvasFromImage(image, resolution) {\n  const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n    image.width,\n    image.height,\n    resolution\n  );\n  const { context } = canvasAndContext;\n  context.clearRect(0, 0, image.width, image.height);\n  context.drawImage(image, 0, 0);\n  CanvasPool.returnCanvasAndContext(canvasAndContext);\n  return canvasAndContext.canvas;\n}\n\nexport { getTemporaryCanvasFromImage };\n//# sourceMappingURL=getTemporaryCanvasFromImage.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { HTMLTextPipe } from './HTMLTextPipe.mjs';\nimport { HTMLTextSystem } from './HTMLTextSystem.mjs';\n\n\"use strict\";\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { updateQuadBounds } from '../../../utils/data/updateQuadBounds.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass CanvasTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const newKey = text._getKey();\n    if (gpuText.currentKey !== newKey) {\n      const { width, height } = this._renderer.canvasText.getTextureSize(\n        text.text,\n        text.resolution,\n        text._style\n      );\n      if (\n        // is only being used by this text:\n        this._renderer.canvasText.getReferenceCount(gpuText.currentKey) === 1 && width === gpuText.texture._source.width && height === gpuText.texture._source.height\n      ) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }\n  addRenderable(text, _instructionSet) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite);\n  }\n  updateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    batchableSprite.batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(text) {\n    this._destroyRenderableById(text.uid);\n  }\n  _destroyRenderableById(textUid) {\n    const gpuText = this._gpuText[textUid];\n    this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[textUid] = null;\n  }\n  _updateText(text) {\n    const newKey = text._getKey();\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(text);\n    }\n    text._didTextUpdate = false;\n    const padding = text._style.padding;\n    updateQuadBounds(batchableSprite.bounds, text._anchor, batchableSprite.texture, padding);\n  }\n  _updateGpuText(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.texture) {\n      this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    }\n    gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n    gpuText.currentKey = text._getKey();\n    batchableSprite.texture = gpuText.texture;\n  }\n  _getGpuText(text) {\n    return this._gpuText[text.uid] || this.initGpuText(text);\n  }\n  initGpuText(text) {\n    const gpuTextData = {\n      texture: null,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite)\n    };\n    gpuTextData.batchableSprite.renderable = text;\n    gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    gpuTextData.batchableSprite.roundPixels = this._renderer._roundPixels | text._roundPixels;\n    this._gpuText[text.uid] = gpuTextData;\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    this._updateText(text);\n    text.on(\"destroyed\", () => {\n      this.destroyRenderable(text);\n    });\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"text\"\n};\n\nexport { CanvasTextPipe };\n//# sourceMappingURL=CanvasTextPipe.mjs.map\n","import { Rectangle } from '../../maths/shapes/Rectangle.mjs';\n\n\"use strict\";\nfunction checkRow(data, width, y) {\n  for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction checkColumn(data, width, x, top, bottom) {\n  const stride = 4 * width;\n  for (let y = top, index = top * stride + 4 * x; y <= bottom; ++y, index += stride) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction getCanvasBoundingBox(canvas, resolution = 1) {\n  const { width, height } = canvas;\n  const context = canvas.getContext(\"2d\", {\n    willReadFrequently: true\n  });\n  if (context === null) {\n    throw new TypeError(\"Failed to get canvas 2D context\");\n  }\n  const imageData = context.getImageData(0, 0, width, height);\n  const data = imageData.data;\n  let left = 0;\n  let top = 0;\n  let right = width - 1;\n  let bottom = height - 1;\n  while (top < height && checkRow(data, width, top))\n    ++top;\n  if (top === height)\n    return Rectangle.EMPTY;\n  while (checkRow(data, width, bottom))\n    --bottom;\n  while (checkColumn(data, width, left, top, bottom))\n    ++left;\n  while (checkColumn(data, width, right, top, bottom))\n    --right;\n  ++right;\n  ++bottom;\n  return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n\nexport { getCanvasBoundingBox };\n//# sourceMappingURL=getCanvasBoundingBox.mjs.map\n","import { Color } from '../../../color/Color.mjs';\nimport { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { nextPow2 } from '../../../maths/misc/pow2.mjs';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox.mjs';\nimport { deprecation } from '../../../utils/logging/deprecation.mjs';\nimport { TextStyle } from '../TextStyle.mjs';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource.mjs';\nimport { CanvasTextMetrics } from './CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle.mjs';\n\n\"use strict\";\nclass CanvasTextSystem {\n  constructor(_renderer) {\n    this._activeTextures = {};\n    this._renderer = _renderer;\n  }\n  getTextureSize(text, resolution, style) {\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    let width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    let height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    width = Math.ceil(width - 1e-6);\n    height = Math.ceil(height - 1e-6);\n    width = nextPow2(width);\n    height = nextPow2(height);\n    return { width, height };\n  }\n  getTexture(options, resolution, style, _textKey) {\n    if (typeof options === \"string\") {\n      deprecation(\"8.0.0\", \"CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments\");\n      options = {\n        text: options,\n        style,\n        resolution\n      };\n    }\n    if (!(options.style instanceof TextStyle)) {\n      options.style = new TextStyle(options.style);\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(\n      options\n    );\n    this._renderer.texture.initSource(texture._source);\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n    return texture;\n  }\n  createTextureAndCanvas(options) {\n    const { text, style } = options;\n    const resolution = options.resolution ?? this._renderer.resolution;\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n    const { canvas } = canvasAndContext;\n    this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n    const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n    if (style.trim) {\n      const trimmed = getCanvasBoundingBox(canvas, resolution);\n      texture.frame.copyFrom(trimmed);\n      texture.updateUvs();\n    }\n    return { texture, canvasAndContext };\n  }\n  getManagedTexture(text) {\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    const textKey = text._getKey();\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].texture;\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n    this._activeTextures[textKey] = {\n      canvasAndContext,\n      texture,\n      usageCount: 1\n    };\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n      TexturePool.returnTexture(activeTexture.texture);\n      const source = activeTexture.texture.source;\n      source.resource = null;\n      source.uploadMethodId = \"unknown\";\n      source.alphaMode = \"no-premultiply-alpha\";\n      this._activeTextures[textKey] = null;\n    }\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   *\n   * By default this is used internally to ensure the texture is correct before rendering,\n   * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n   * and then shared across multiple Sprites.\n   * @param text\n   * @param style\n   * @param resolution\n   * @param canvasAndContext\n   */\n  renderTextToCanvas(text, style, resolution, canvasAndContext) {\n    const { canvas, context } = canvasAndContext;\n    const font = fontStringFromTextStyle(style);\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const lines = measured.lines;\n    const lineHeight = measured.lineHeight;\n    const lineWidths = measured.lineWidths;\n    const maxLineWidth = measured.maxLineWidth;\n    const fontProperties = measured.fontProperties;\n    const height = canvas.height;\n    context.resetTransform();\n    context.scale(resolution, resolution);\n    const padding = style.padding * 2;\n    context.clearRect(0, 0, measured.width + 4 + padding, measured.height + 4 + padding);\n    if (style._stroke?.width) {\n      const strokeStyle = style._stroke;\n      context.lineWidth = strokeStyle.width;\n      context.miterLimit = strokeStyle.miterLimit;\n      context.lineJoin = strokeStyle.join;\n      context.lineCap = strokeStyle.cap;\n    }\n    context.font = font;\n    let linePositionX;\n    let linePositionY;\n    const passesCount = style.dropShadow ? 2 : 1;\n    for (let i = 0; i < passesCount; ++i) {\n      const isShadowPass = style.dropShadow && i === 0;\n      const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + style.padding * 2) : 0;\n      const dsOffsetShadow = dsOffsetText * resolution;\n      if (isShadowPass) {\n        context.fillStyle = \"black\";\n        context.strokeStyle = \"black\";\n        const shadowOptions = style.dropShadow;\n        const dropShadowColor = shadowOptions.color;\n        const dropShadowAlpha = shadowOptions.alpha;\n        context.shadowColor = Color.shared.setValue(dropShadowColor).setAlpha(dropShadowAlpha).toRgbaString();\n        const dropShadowBlur = shadowOptions.blur * resolution;\n        const dropShadowDistance = shadowOptions.distance * resolution;\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance + dsOffsetShadow;\n      } else {\n        context.globalAlpha = style._fill?.alpha ?? 1;\n        context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context) : null;\n        if (style._stroke?.width) {\n          context.strokeStyle = getCanvasFillStyle(style._stroke, context);\n        }\n        context.shadowColor = \"black\";\n      }\n      let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n      if (lineHeight - fontProperties.fontSize < 0) {\n        linePositionYShift = 0;\n      }\n      const strokeWidth = style._stroke?.width ?? 0;\n      for (let i2 = 0; i2 < lines.length; i2++) {\n        linePositionX = strokeWidth / 2;\n        linePositionY = strokeWidth / 2 + i2 * lineHeight + fontProperties.ascent + linePositionYShift;\n        if (style.align === \"right\") {\n          linePositionX += maxLineWidth - lineWidths[i2];\n        } else if (style.align === \"center\") {\n          linePositionX += (maxLineWidth - lineWidths[i2]) / 2;\n        }\n        if (style._stroke?.width) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText,\n            true\n          );\n        }\n        if (style._fill !== void 0) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText\n          );\n        }\n      }\n    }\n  }\n  /**\n   * Render the text with letter-spacing.\n   * @param text - The text to draw\n   * @param style\n   * @param canvasAndContext\n   * @param x - Horizontal position to draw the text\n   * @param y - Vertical position to draw the text\n   * @param isStroke - Is this drawing for the outside stroke of the\n   *  text? If not, it's for the inside fill\n   */\n  _drawLetterSpacing(text, style, canvasAndContext, x, y, isStroke = false) {\n    const { context } = canvasAndContext;\n    const letterSpacing = style.letterSpacing;\n    let useExperimentalLetterSpacing = false;\n    if (CanvasTextMetrics.experimentalLetterSpacingSupported) {\n      if (CanvasTextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    if (letterSpacing === 0 || useExperimentalLetterSpacing) {\n      if (isStroke) {\n        context.strokeText(text, x, y);\n      } else {\n        context.fillText(text, x, y);\n      }\n      return;\n    }\n    let currentPosition = x;\n    const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n    let previousWidth = context.measureText(text).width;\n    let currentWidth = 0;\n    for (let i = 0; i < stringArray.length; ++i) {\n      const currentChar = stringArray[i];\n      if (isStroke) {\n        context.strokeText(currentChar, currentPosition, y);\n      } else {\n        context.fillText(currentChar, currentPosition, y);\n      }\n      let textStr = \"\";\n      for (let j = i + 1; j < stringArray.length; ++j) {\n        textStr += stringArray[j];\n      }\n      currentWidth = context.measureText(textStr).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nCanvasTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"canvasText\"\n};\n\nexport { CanvasTextSystem };\n//# sourceMappingURL=CanvasTextSystem.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe.mjs';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem.mjs';\n\n\"use strict\";\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { Bounds } from '../../container/bounds/Bounds.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nfunction getPo2TextureFromSource(image, width, height, resolution) {\n  const bounds = tempBounds;\n  bounds.minX = 0;\n  bounds.minY = 0;\n  bounds.maxX = image.width / resolution | 0;\n  bounds.maxY = image.height / resolution | 0;\n  const texture = TexturePool.getOptimalTexture(\n    bounds.width,\n    bounds.height,\n    resolution,\n    false\n  );\n  texture.source.uploadMethodId = \"image\";\n  texture.source.resource = image;\n  texture.source.alphaMode = \"premultiply-alpha-on-upload\";\n  texture.frame.width = width / resolution;\n  texture.frame.height = height / resolution;\n  texture.source.emit(\"update\", texture.source);\n  texture.updateUvs();\n  return texture;\n}\n\nexport { getPo2TextureFromSource };\n//# sourceMappingURL=getPo2TextureFromSource.mjs.map\n"],"names":["ResizePlugin","init","options","Object","defineProperty","this","set","dom","globalThis","removeEventListener","queueResize","_resizeTo","addEventListener","resize","get","_cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","width","height","window","innerWidth","innerHeight","clientWidth","clientHeight","renderer","render","resizeTo","destroy","extension","Application","TickerPlugin","assign","autoStart","sharedTicker","ticker","_ticker","remove","add","LOW","stop","start","Ticker","shared","oldTicker","FilterPipe","constructor","_renderer","push","filterEffect","container","instructionSet","renderPipes","batch","break","renderPipeId","canBundle","action","pop","_filterEffect","_container","execute","instruction","filter","type","WebGLPipes","WebGPUPipes","CanvasPipes","name","tempMatrix","Matrix","getFastGlobalBounds","target","bounds","clear","_getGlobalBoundsRecursive","isValid","renderGroup","applyMatrix","localTransform","parentRenderGroup","worldTransform","localDisplayStatus","measurable","manageEffects","effects","length","localBounds","boundsArea","addRect","viewBounds","addFrame","minX","minY","maxX","maxY","groupTransform","children","i","advanced","addBounds","copyTo","invert","relativeGroupTransform","return","quadGeometry","Geometry","attributes","aPosition","buffer","Float32Array","location","format","stride","offset","indexBuffer","Uint32Array","FilterSystem","_filterStackIndex","_filterStack","_filterGlobalUniforms","UniformGroup","uInputSize","value","uInputPixel","uInputClamp","uOutputFrame","uGlobalFrame","uOutputTexture","_globalFilterBindGroup","BindGroup","activeBackTexture","_activeFilterData","backTexture","filters","_getFilterData","filterData","skip","renderables","matrix","renderable","globalDisplayStatus","getGlobalRenderableBounds","filterArea","colorTextureSource","renderTarget","rootRenderTarget","colorTexture","source","resolution","_resolution","padding","antialias","blendRequired","enabled","Math","min","compatibleRenderers","backBuffer","useBackBuffer","warn","viewPort","rootViewPort","scale","fitBounds","pad","ceil","isPositive","previousRenderSurface","renderSurface","inputTexture","TexturePool","getOptimalTexture","bind","globalUniforms","Texture","EMPTY","finishRenderPass","previousBounds","getRenderTarget","getBackTexture","setResource","style","apply","returnTexture","flip","flop","t","lastRenderSurface","backgroundResolution","x","y","floor","copyToTexture","applyFilter","input","output","Point","isFinalTarget","currentIndex","filterUniforms","uniforms","outputFrame","inputSize","inputPixel","inputClamp","globalFrame","outputTexture","lastIndex","filterData2","frame","pixelWidth","pixelHeight","rootTexture","isRoot","update","uniformBatch","batchUniforms","getUboResource","groups","encoder","draw","geometry","shader","state","_state","topology","WEBGL","Bounds","calculateSpriteMatrix","outputMatrix","sprite","data","mappedMatrix","_source","prepend","texture","translate","anchor","WebGLSystem","WebGPUSystem","batchSamplersUniformGroupHash","getBatchSamplersUniformGroup","maxTextures","batchSamplersUniformGroup","sampleValues","Int32Array","uTextures","size","isStatic","GraphicsPipe","adaptor","State","for2d","_graphicsBatchesHash","create","_adaptor","validateRenderable","graphics","context","wasBatched","uid","gpuContext","graphicsContext","updateGpuContext","isBatchable","addRenderable","_didGraphicsUpdate","_rebuild","_addToBatcher","updateRenderable","batches","batcher","updateElement","destroyRenderable","_removeBatchForRenderable","isRenderable","getGpuContext","customShader","blendMode","groupBlendMode","localUniforms","resources","uTransformMatrix","uRound","_roundPixels","groupColorAlpha","uColor","_initBatchesForRenderable","batched","batchPipe","_getBatchesForRenderable","addToBatch","roundPixels","map","batchClone","BatchableGraphics","on","graphicsUid","forEach","GraphicsContextSystem","MeshPipe","localUniformsBindGroup","_meshDataHash","_gpuBatchableMeshHash","mesh","meshData","_getMeshData","isBatched","_geometry","indices","indexSize","positions","vertexSize","batchableMesh","_getBatchableMesh","checkAndUpdateTexture","gpuBatchableMesh","_texture","gpuMesh","getAdjustedBlendModeBlend","_initMeshData","_initBatchableMesh","BatchableMesh","_uvUpdateId","_textureMatrixUpdateId","reset","packIndex","index","indicesOffset","packAttributes","float32View","uint32View","textureId","wt","textureIdAndRound","a","b","c","d","tx","ty","uvBuffer","getBuffer","uvs","transformedUvs","textureMatrix","isSimple","_transformedUvs","_updateID","multiplyUvs","abgr","_MeshGeometry","args","defaultOptions","shrinkToFit","shrinkBuffersToFit","super","label","usage","VERTEX","COPY_DST","aUV","INDEX","batchMode","MeshGeometry","_PlaneGeometry","deprecation","verticesX","verticesY","build","total","verts","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","buffers","PlaneGeometry","_NineSliceGeometry","_originalWidth","originalWidth","_originalHeight","originalHeight","_leftWidth","leftWidth","_rightWidth","rightWidth","_topHeight","topHeight","_bottomHeight","bottomHeight","updateUvs","updatePositions","w","scaleW","h","scaleH","_uvw","_uvh","NineSliceGeometry","NineSliceSpritePipe","_gpuSpriteHash","_instructionSet","gpuSprite","_getGpuSprite","_didSpriteUpdate","_updateBatchableSprite","batchableSprite","_initGPUSprite","tilingBit","vertex","header","main","fragment","tilingBitGl","gpuProgram","glProgram","TilingSpriteShader","Shader","bits","localUniformBit","roundPixelsBit","tilingUniforms","uMapCoord","uClampFrame","uClampOffset","uTextureTransform","uSizeAnchor","uTexture","uSampler","updateUniforms","anchorX","anchorY","textureWidth","textureHeight","mapCoord","QuadGeometry","sharedQuad","TilingSpritePipe","default2d","_tilingSpriteDataHash","tilingSpriteData","_getTilingSpriteData","couldBatch","canBatch","_updateCanBatch","tilingSprite","_didTilingSpriteUpdate","_updateBatchableMesh","bindGroup","_tileTransform","_initTilingSpriteData","slice","renderableData","addressMode","_applyAnchorToTexture","copyFrom","array","setUvs","setPositions","_nonPowOf2wrapping","supports","nonPowOf2wrapping","isPowerOfTwo","localUniformMSDFBit","end","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","uDistance","colorBit","generateTextureBatchBit","batchSamplers","BitmapTextPipe","_gpuBitmapText","bitmapText","graphicsRenderable","_getGpuBitmapText","_didTextUpdate","_updateContext","syncWithProxy","_updateDistanceField","_destroyRenderableByUid","renderableUid","proxyGraphics","bitmapFont","BitmapFontManager","getFont","text","_style","distanceField","chars","Array","from","currentY","baseLineOffset","bitmapTextLayout","getBitmapTextLayout","offsetY","_stroke","_anchor","_x","_y","tint","applyFillAsTint","_fill","color","lines","line","j","charPositions","char","charData","round","xOffset","yOffset","lineHeight","initGpuText","proxyRenderable","Graphics","fontFamily","dynamicFont","Cache","dx","sqrt","dy","worldScale","abs","fontScale","baseRenderedFontSize","fontSize","distance","range","proxy","groupColor","groupAlpha","HTMLTextPipe","_gpuText","runners","resolutionChange","_autoResolution","onViewUpdate","htmlText","gpuText","_getGpuText","newKey","_getKey","textureNeedsUploading","currentKey","_updateText","_destroyRenderableById","htmlTextUid","decreaseReferenceCount","_updateGpuText","catch","e","console","error","updateQuadBounds","generatingTexture","getManagedTexture","gpuTextData","BatchableSprite","nssvg","nsxhtml","HTMLTextRenderData","svgRoot","document","createElementNS","foreignObject","domElement","styleElement","image","Image","setAttribute","overflow","appendChild","dropShadowToCSS","dropShadowStyle","Color","setValue","setAlpha","alpha","toHexa","position","cos","angle","sin","blur","strokeToCSS","stroke","toHex","join","templates","fontWeight","fontStyle","fontVariant","letterSpacing","align","whiteSpace","wordWrapWidth","transform","fill","breakWords","dropShadow","HTMLTextStyle","TextStyle","_cssOverrides","cssOverrides","tagStyles","_generateKey","_styleKey","generateTextStyleKey","_cssStyle","clone","wordWrap","cssStyle","cssStyles","out","tagStyle","cssTagStyle","replace","tagStyleToCSS","textStyleToCSS","addOverride","toAdd","v","includes","removeOverride","toRemove","async","loadFontCSS","url","dataSrc","response","fetch","blob","reader","FileReader","Promise","resolve","reject","onloadend","result","onerror","readAsDataURL","loadFontAsBase64","FontStylePromiseCache","Map","tempHTMLTextRenderData","HTMLTextSystem","_activeTextures","_createCanvas","WEBGPU","getTexture","_buildTexturePromise","textKey","_increaseReferenceCount","promise","then","usageCount","htmlTextData","fontFamilies","dedupe","matches","match","addFontFamily","fontFamily2","isArray","split","trim","extractFontFamilies","fontCSS","fontPromises","has","all","getFontCss","defaultTextStyle","measured","fontStyleCSS","htmlTextRenderData","innerHTML","textContent","body","contentBounds","getBoundingClientRect","descenderPadding","CanvasTextMetrics","measureFont","descent","measureHtmlText","max","svgURL","toString","XMLSerializer","serializeToString","getSVGUrl","delay","resolve2","setTimeout","onload","src","encodeURIComponent","crossOrigin","loadSVGImage","userAgent","getNavigator","test","isSafari","resource","canvasAndContext","CanvasPool","getOptimalCanvasAndContext","clearRect","drawImage","returnCanvasAndContext","canvas","getTemporaryCanvasFromImage","getPo2TextureFromSource","initSource","activeTexture","_cleanUp","uploadMethodId","getReferenceCount","CanvasSystem","defaultFontOptions","CanvasTextPipe","canvasText","getTextureSize","textUid","checkRow","checkColumn","top","bottom","CanvasTextSystem","measureText","_textKey","createTextureAndCanvas","renderTextToCanvas","trimmed","getContext","willReadFrequently","TypeError","getImageData","left","right","Rectangle","getCanvasBoundingBox","alphaMode","font","fontStringFromTextStyle","lineWidths","maxLineWidth","fontProperties","resetTransform","strokeStyle","lineWidth","miterLimit","lineJoin","lineCap","cap","linePositionX","linePositionY","passesCount","isShadowPass","dsOffsetText","dsOffsetShadow","fillStyle","shadowOptions","dropShadowColor","dropShadowAlpha","shadowColor","toRgbaString","dropShadowBlur","dropShadowDistance","shadowBlur","shadowOffsetX","shadowOffsetY","globalAlpha","getCanvasFillStyle","linePositionYShift","strokeWidth","i2","ascent","_drawLetterSpacing","isStroke","useExperimentalLetterSpacing","experimentalLetterSpacingSupported","experimentalLetterSpacing","textLetterSpacing","strokeText","fillText","currentPosition","stringArray","graphemeSegmenter","previousWidth","currentWidth","currentChar","textStr","tempBounds","emit"],"sourceRoot":""}