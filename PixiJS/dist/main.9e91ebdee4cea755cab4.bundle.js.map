{"version":3,"file":"main.9e91ebdee4cea755cab4.bundle.js","mappings":"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","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///webpack/runtime/load script","webpack:///./src/scripts/client/gixi/systems/SystemBase.ts","webpack:///./src/scripts/client/gixi/ActorContainer.ts","webpack:///./src/scripts/client/gixi/systems/CollisionSystem.ts","webpack:///./src/scripts/client/gixi/systems/InputSystem.ts","webpack:///./src/scripts/client/gixi/systems/AudioSystem.ts","webpack:///./src/scripts/client/gixi/GixiApplication.ts","webpack:///./src/scripts/client/core/super/SuperText.ts","webpack:///./src/scripts/client/projects/treasureHunter2D/ui/InstructionsSuperText.ts","webpack:///./src/scripts/client/projects/treasureHunter2D/ui/ScoreSuperText.ts","webpack:///./src/scripts/client/gixi/ActorAnimated.ts","webpack:///./src/scripts/client/projects/treasureHunter2D/tileMap/tileMapObjects/CoinTilemapObject.ts","webpack:///./src/scripts/client/gixi/GixiUtility.ts","webpack:///./src/scripts/client/gixi/ActorStatic.ts","webpack:///./src/scripts/client/projects/treasureHunter2D/tileMap/tileMapObjects/ChestTilemapObject.ts","webpack:///./src/scripts/client/projects/treasureHunter2D/Player.ts","webpack:///./src/scripts/client/gixi/tilemap/TilemapCollisionSystem.ts","webpack:///./src/scripts/client/gixi/tilemap/Tilemap.ts","webpack:///./src/scripts/client/projects/treasureHunter2D/tileMap/TilemapItemFactoryCustom.ts","webpack:///./src/scripts/client/index.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/ensure chunk","webpack:///webpack/runtime/get javascript chunk filename","webpack:///webpack/runtime/get mini-css chunk filename","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/runtime/publicPath","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var inProgress = {};\n// data-webpack is not used as build has no uniqueName\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","import { GixiApplication } from \"../GixiApplication\";\r\n\r\n/**\r\n * \r\n */\r\nexport class SystemBase {\r\n\r\n    // Properties -----------------------------------\r\n\r\n    // Fields ---------------------------------------\r\n    protected _app: GixiApplication;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication) {\r\n        this._app = app;\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n}","import * as PIXI from 'pixi.js';\r\nimport { IInitializableAsync } from './interfaces/IInitializeAsync';\r\nimport { GixiApplication } from './GixiApplication';\r\nimport { IActor } from './interfaces/IActor';\r\nimport { IActorConfiguration } from './interfaces/IActorConfiguration';\r\n\r\n\r\n/**\r\n* Configuration\r\n*/\r\nexport interface ActorContainerConfiguration extends IActorConfiguration {\r\n\r\n}\r\n\r\nconst ActorContainerConfigurationDefault: ActorContainerConfiguration = {\r\n  isCollidable: true,\r\n  isTickable: true,\r\n  isResizable: true\r\n}\r\n\r\n\r\n\r\nexport class ActorContainer extends PIXI.Container implements IInitializableAsync, IActor {\r\n\r\n  // Properties -----------------------------------\r\n  public get isInitialized(): boolean {\r\n    return this._isInitialized;\r\n  }\r\n\r\n  public get configuration(): ActorContainerConfiguration {\r\n    return this._configuration;\r\n  }\r\n\r\n  public get isCollidable(): boolean {\r\n    return this._isCollidable;\r\n  }\r\n\r\n  public isChild(): boolean {\r\n    return this.parent !== null;\r\n  }\r\n\r\n  // Fields ---------------------------------------\r\n  private _isDestroyed: boolean = false;\r\n  protected _configuration: ActorContainerConfiguration;\r\n  protected _isInitialized: boolean = false;\r\n  protected _isCollidable: boolean = true;\r\n  protected _app: GixiApplication;\r\n\r\n\r\n\r\n  // Initialization -------------------------------\r\n  constructor(app: GixiApplication,\r\n    configuration?: Partial<ActorContainerConfiguration>) {\r\n\r\n    super();\r\n    this._configuration = { ...ActorContainerConfigurationDefault, ...configuration };\r\n    this._app = app;\r\n\r\n    // Tick\r\n    if (this.configuration.isTickable) {\r\n      this._app.app.ticker.add(this.onTickInternal.bind(this));\r\n    }\r\n\r\n    // Resize\r\n    if (this.configuration.isResizable) {\r\n      this._app.addListener(GixiApplication.EVENT_RESIZE, this.onResizeInternal.bind(this));\r\n    }\r\n\r\n    // DO NOT CALL initializeAsync here. It is called by the child\r\n  }\r\n\r\n  public requireIsInitialized() {\r\n\r\n    if (!this.isInitialized) {\r\n      throw new Error('requireIsInitialized.');\r\n    }\r\n  }\r\n\r\n  public async initializeAsync(): Promise<any> {\r\n\r\n    if (this._isInitialized) {\r\n      return;\r\n    }\r\n\r\n    this._isInitialized = true;\r\n  }\r\n\r\n\r\n  // Override PIXI.Sprite's destroy method\r\n  public override destroy(options?: PIXI.DestroyOptions | boolean): void {\r\n\r\n    this.requireIsInitialized();\r\n\r\n    if (this._isDestroyed) return;\r\n\r\n    // Clean up\r\n    if (this.configuration.isTickable) {\r\n      this._app.app.ticker.remove(this.onTickInternal.bind(this));\r\n    }\r\n    if (this.configuration.isResizable) {\r\n      this._app.removeListener(GixiApplication.EVENT_RESIZE, this.onResizeInternal.bind(this));\r\n    }\r\n    this._isDestroyed = true;\r\n    super.destroy(options);\r\n  }\r\n\r\n  // Event Handlers -------------------------------\r\n  public onAdded() {\r\n    // Empty implementation to be overridden\r\n  }\r\n\r\n  public onRemoved() {\r\n    // Empty implementation to be overridden\r\n  }\r\n\r\n  public onResize(app: GixiApplication): void {\r\n    // Empty implementation to be overridden\r\n  }\r\n\r\n  public onTick(ticker: PIXI.Ticker): void {\r\n\r\n    // Empty implementation to be overridden\r\n\r\n    if (!this.isCollidable) {\r\n      return;\r\n    }\r\n\r\n    const collisions = this._app.systems.collisionSystem.getCollisions(this);\r\n\r\n    if (collisions.length) {\r\n      this.onCollision(collisions);\r\n    };\r\n\r\n  }\r\n\r\n  protected onCollision(collisions: PIXI.Container[]): void {\r\n    // Empty implementation to be overridden\r\n  }\r\n\r\n  //TODO: remove these internals???\r\n  private onTickInternal(ticker: PIXI.Ticker): void {\r\n    if (this._isDestroyed) return;\r\n    this.onTick(ticker);\r\n  }\r\n\r\n  private onResizeInternal(app: GixiApplication): void {\r\n    if (this._isDestroyed) return;\r\n    this.onResize(app);\r\n  }\r\n\r\n\r\n}","import { GixiApplication } from \"../GixiApplication\";\r\nimport * as PIXI from 'pixi.js';\r\nimport { SystemBase } from \"./SystemBase\";\r\nimport { ActorContainer } from \"../ActorContainer\";\r\nimport { Viewport } from \"pixi-viewport\";\r\n\r\n/**\r\n * CollisionSystem is responsible for detecting collisions between PIXI containers.\r\n * It extends the SystemBase class and provides methods to get colliding sprites.\r\n */\r\nexport class CollisionSystem extends SystemBase {\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication) {\r\n        super(app);\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n\r\n    /**\r\n     * Get all sprites that are colliding with the given sprite.\r\n     * @param me - The sprite to check collisions for.\r\n     * @returns An array of sprites that are colliding with the given sprite.\r\n     */\r\n    public getCollisions(me: PIXI.Container): PIXI.Container[] {\r\n        const collisions: PIXI.Container[] = [\r\n            ...this.getCollidingSpritesFromChildren(me, this._app.app.stage.children),\r\n            ...this.getCollidingSpritesFromChildren(me, this._app.viewport.children),\r\n        ];\r\n\r\n        // console.log(\"this : \" + me.label)\r\n\r\n        // if (me.label == \"Player\") {\r\n        //     console.log(\"length : \" + collisions.length)\r\n        // };\r\n\r\n        return collisions;\r\n    }\r\n\r\n    // Internal Methods -----------------------------\r\n\r\n    /**\r\n     * Check if the given sprite is colliding with another sprite.\r\n     * @param me - The sprite to check collisions for.\r\n     * @param other - The other sprite to check collisions against.\r\n     * @returns True if the sprites are colliding, false otherwise.\r\n     */\r\n    private isCollidingWith(me: PIXI.Container, other: PIXI.Container): boolean {\r\n        const bounds1 = me.getBounds();\r\n        const bounds2 = other.getBounds();\r\n\r\n        return (\r\n            bounds1.x < bounds2.x + bounds2.width &&\r\n            bounds1.x + bounds1.width > bounds2.x &&\r\n            bounds1.y < bounds2.y + bounds2.height &&\r\n            bounds1.y + bounds2.height > bounds2.y\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get all sprites from the given children that are colliding with the given sprite.\r\n     * @param me - The sprite to check collisions for.\r\n     * @param children - The children to check collisions against.\r\n     * @returns An array of sprites that are colliding with the given sprite.\r\n     */\r\n    private getCollidingSpritesFromChildren(me: PIXI.Container, children: PIXI.Container[]): PIXI.Container[] {\r\n        return children.filter((child) => {\r\n            const isCollidable =\r\n                child instanceof ActorContainer\r\n                    ? child.configuration.isCollidable\r\n                    : true;\r\n\r\n            return (\r\n                child instanceof Viewport &&        //TODO: Remove this check. Handle elsewhere\r\n                child instanceof PIXI.Graphics &&   //TODO: Remove this check. Handle elsewhere\r\n                child instanceof PIXI.Container &&\r\n                child !== me &&\r\n                this.isCollidingWith(me, child as PIXI.Container) &&\r\n                isCollidable\r\n            );\r\n        }) as PIXI.Container[];\r\n    }\r\n}\r\n","import { GixiApplication } from \"../GixiApplication\";\r\nimport { SystemBase } from \"./SystemBase\";\r\n\r\n/**\r\n * Handles keyboard input and maintains the state of keys.\r\n */\r\nexport class InputSystem extends SystemBase {\r\n\r\n    // Fields ---------------------------------------\r\n    private _keyStateDictionary: Map<string, KeyState>;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication) {\r\n        super(app);\r\n\r\n        //TODO: Move this and all systems to use IInitializeAsync and move this into that init\r\n        this._keyStateDictionary = new Map();\r\n        window.addEventListener('keydown', this.onKeyDown.bind(this));\r\n        window.addEventListener('keyup', this.onKeyUp.bind(this));\r\n    }\r\n\r\n    // Methods ------------------------------\r\n    /**\r\n     * Checks if the specified key is currently pressed down.\r\n     * @param key - The key to check.\r\n     * @returns True if the key is down, otherwise false.\r\n     */\r\n    public isKeyDown(key: string): boolean {\r\n        let keyState: KeyState = this.getKeyStateByKey(key);\r\n        return keyState.isDown;\r\n    }\r\n\r\n    /**\r\n     * Checks if the specified key was pressed down this frame.\r\n     * @param key - The key to check.\r\n     * @returns True if the key is down this frame, otherwise false.\r\n     */\r\n    public isKeyDownThisFrame(key: string): boolean {\r\n        let keyState: KeyState = this.getKeyStateByKey(key);\r\n\r\n        //NOTE: I tried a few ways to capture **ONE** moment of true here\r\n        //FInally this one works - srivello\r\n        let isDownThisFrame = keyState.isDownThisFrame;\r\n        keyState.isDownThisFrame = false;\r\n        return isDownThisFrame;\r\n    }\r\n\r\n\r\n    /**\r\n     * Handles the key down event and updates the key state.\r\n     * @param keyboardEvent - The keyboard event.\r\n     */\r\n    private onKeyDown(keyboardEvent: KeyboardEvent): void {\r\n        let keyState: KeyState = this.getKeyStateByKey(keyboardEvent.key);\r\n        if (!keyState.isDown) {\r\n            keyState.isDown = true;\r\n            keyState.isDownThisFrame = true;\r\n        }\r\n        else {\r\n            keyState.isDownThisFrame = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the key up event and updates the key state.\r\n     * @param keyboardEvent - The keyboard event.\r\n     */\r\n    private onKeyUp(keyboardEvent: KeyboardEvent): void {\r\n        let keyState: KeyState = this.getKeyStateByKey(keyboardEvent.key);\r\n        keyState.isDown = false;\r\n        keyState.isDownThisFrame = false;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the key state for the specified key. If the key does not exist, a new KeyState is created and returned.\r\n     * @param key - The key to retrieve the state for.\r\n     * @returns The KeyState for the specified key.\r\n     */\r\n    private getKeyStateByKey(key: string): KeyState {\r\n        let keyState: KeyState | undefined = this._keyStateDictionary.get(key);\r\n        if (keyState == undefined) {\r\n            let newKeyState: KeyState = new KeyState();\r\n            this._keyStateDictionary.set(key, newKeyState);\r\n            return newKeyState;\r\n        }\r\n        return keyState;\r\n    }\r\n\r\n    /**\r\n     * Updates the state of keys for the next frame.\r\n     */\r\n    public update() {\r\n        this._keyStateDictionary.forEach((keyState) => {\r\n            keyState.isDownThisFrame = false;\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the state of a key.\r\n */\r\nclass KeyState {\r\n    constructor() {\r\n        this.isDown = false;\r\n        this.isDownThisFrame = false;\r\n    }\r\n\r\n    public isDown: boolean;\r\n    public isDownThisFrame: boolean;\r\n}\r\n","import { IMediaInstance, Sound, sound } from \"@pixi/sound\";\r\nimport { GixiApplication } from \"../GixiApplication\";\r\nimport { SystemBase } from \"./SystemBase\";\r\n\r\n/**\r\n * Handles keyboard input and maintains the state of keys.\r\n */\r\nexport class AudioSystem extends SystemBase {\r\n\r\n    // Properties -----------------------------------\r\n\r\n    // Fields ---------------------------------------\r\n    private _audioContextResumed: boolean = false;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication) {\r\n        super(app);\r\n        this.setupAudioContextResume();\r\n    }\r\n\r\n    // Methods ------------------------------\r\n\r\n    // Set up the audio context to resume after a user gesture\r\n    private setupAudioContextResume() {\r\n        const resumeAudioContext = () => {\r\n            if (!this._audioContextResumed) {\r\n                const audioContext = sound.context.audioContext;\r\n                if (audioContext.state === 'suspended') {\r\n                    audioContext.resume().then(() => {\r\n                        this._audioContextResumed = true;\r\n                        console.log('Audio context resumed');\r\n                    }).catch((err) => {\r\n                        console.error('Failed to resume audio context:', err);\r\n                    });\r\n                } else {\r\n                    this._audioContextResumed = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        // Listen for any user interaction\r\n        window.addEventListener('click', resumeAudioContext, { once: true });\r\n        window.addEventListener('touchstart', resumeAudioContext, { once: true });\r\n        window.addEventListener('keydown', resumeAudioContext, { once: true });\r\n    }\r\n\r\n    /**\r\n     * Play a sound file.\r\n     * @param fileName \r\n     */\r\n    public async play(fileName: string) {\r\n        this.playAsync(fileName);\r\n    }\r\n\r\n    /**\r\n     * Play a sound file.\r\n     * @param fileName \r\n     */\r\n    public async playAsync(fileName: string) {\r\n        if (!this._audioContextResumed) {\r\n            console.warn('Audio context not resumed yet. Cannot play sound.');\r\n            return;\r\n        }\r\n\r\n        // Play the sound when needed\r\n        let x: Sound = Sound.from({\r\n            url: fileName,\r\n            preload: true,\r\n            autoPlay: false,\r\n        });\r\n\r\n        while (!x.isLoaded) {\r\n            await new Promise(resolve => setTimeout(resolve, 100));\r\n        }\r\n\r\n        x.speed = 1;\r\n        x.volume = 1;\r\n        x.play();\r\n    }\r\n}\r\n","import * as PIXI from 'pixi.js';\r\nimport { Viewport } from 'pixi-viewport';\r\nimport { EventEmitter } from 'events';\r\nimport { SuperText } from '../core/super/SuperText';\r\nimport { IInitializableAsync } from './interfaces/IInitializeAsync';\r\nimport { CollisionSystem } from './systems/CollisionSystem';\r\nimport { ActorContainer } from './ActorContainer';\r\nimport { InputSystem } from './systems/InputSystem';\r\nimport { AudioSystem } from './systems/AudioSystem';\r\n\r\n/**\r\n * Configuration\r\n */\r\nexport interface GixiApplicationConfiguration {\r\n  widthInitial: number;\r\n  heightInitial: number;\r\n  backgroundColor: number;\r\n  minFPS: number,\r\n  maxFPS: number,\r\n  data: { [key: string]: any };\r\n}\r\n\r\nconst GixiApplicationConfigurationDefault: GixiApplicationConfiguration = {\r\n  widthInitial: 1920,\r\n  heightInitial: 1080,\r\n  minFPS: 1,\r\n  maxFPS: 240,\r\n  backgroundColor: 0x1099bb,\r\n  data: {}\r\n}\r\n\r\n\r\nclass Systems {\r\n\r\n  // Fields ---------------------------------------\r\n  public collisionSystem: CollisionSystem;\r\n  public inputSystem: InputSystem;\r\n  public audioSystem: AudioSystem;\r\n\r\n  // Initialization -------------------------------\r\n  constructor(app: GixiApplication) {\r\n    this.collisionSystem = new CollisionSystem(app);\r\n    this.inputSystem = new InputSystem(app);\r\n    this.audioSystem = new AudioSystem(app);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Wrapper class for initializing and managing a PixiJS application.\r\n */\r\nexport class GixiApplication extends EventEmitter implements IInitializableAsync {\r\n\r\n\r\n  // Constants ------------------------------------\r\n  public static readonly EVENT_INITIALIZE_COMPLETE: string = 'initializeComplete';\r\n  public static readonly EVENT_INITIALIZE_ERROR: string = 'initializeError';\r\n  public static readonly EVENT_RESIZE: string = 'resize';\r\n\r\n\r\n  // Properties -----------------------------------\r\n  public get isInitialized(): boolean {\r\n    return this._isInitialized;\r\n  }\r\n\r\n  public get isFullscreen(): boolean {\r\n    return this._isFullscreen;\r\n  }\r\n\r\n  public set isFullscreen(value: boolean) {\r\n\r\n    this._isFullscreen = value;\r\n\r\n    var elem = document.getElementById(this.app.canvas.id);\r\n\r\n    if (this._isFullscreen) {\r\n\r\n      if (elem?.requestFullscreen) {\r\n        elem?.requestFullscreen();\r\n      }\r\n\r\n    }\r\n    else {\r\n      document.fullscreenEnabled && document.exitFullscreen();\r\n    }\r\n  }\r\n\r\n  public get systems(): Systems {\r\n    return this._systems;\r\n  }\r\n\r\n  public get configuration(): GixiApplicationConfiguration {\r\n    return this._configuration;\r\n  }\r\n\r\n  // Fields ---------------------------------------\r\n  public app: PIXI.Application;\r\n  public viewport!: Viewport;\r\n  private _configuration: GixiApplicationConfiguration;\r\n  //\r\n  private _canvasId: string;\r\n  private _isInitialized = false;\r\n  private _systems: Systems;\r\n  private _isFullscreen: boolean = false;\r\n\r\n  // Initialization -------------------------------\r\n  constructor(\r\n    canvasId: string = 'pixi-application-canvas',\r\n    configuration?: Partial<GixiApplicationConfiguration>\r\n  ) {\r\n\r\n    /////////////////////////////\r\n    // Setup\r\n    /////////////////////////////\r\n    super();\r\n    this._canvasId = canvasId;\r\n    //\r\n    this.app = new PIXI.Application();\r\n    this._configuration = { ...GixiApplicationConfigurationDefault, ...configuration };\r\n    this._systems = new Systems(this);\r\n\r\n    // Every SuperSprite instance listens to App\r\n    // So this number must be >= to the number of SuperSprite instances\r\n    this.setMaxListeners(100);\r\n  }\r\n\r\n\r\n  /**\r\n   * Initializes the PixiJS application.\r\n   */\r\n  public async initializeAsync(): Promise<any> {\r\n    if (this._isInitialized) {\r\n      return;\r\n    }\r\n\r\n    this._isInitialized = true;\r\n\r\n    try {\r\n      await this.app.init({\r\n        canvas: document.getElementById(this._canvasId) as HTMLCanvasElement,\r\n        backgroundColor: this.configuration.backgroundColor,\r\n        width: this.configuration.widthInitial,\r\n        height: this.configuration.heightInitial,\r\n        resizeTo: window,\r\n\r\n        // EVENTS\r\n        eventMode: 'passive',\r\n        eventFeatures: {\r\n\r\n          /** what is this? */\r\n          move: true, //try false after I get swipe working\r\n\r\n          /** disables the global move events which can be very expensive in large scenes */\r\n          globalMove: true, //try false after I get swipe working\r\n          click: true,\r\n          wheel: false\r\n        }\r\n\r\n      });\r\n\r\n      this.app.ticker.minFPS = this.configuration.minFPS;\r\n      this.app.ticker.maxFPS = this.configuration.maxFPS;\r\n\r\n      console.log(`PIXI.Application.init() success! PixiJS v${PIXI.VERSION} with ${this.GetRendererTypeAsString(this.app.renderer.type)} `);\r\n\r\n      /////////////////////////////\r\n      // Create Viewport\r\n      /////////////////////////////\r\n      this.viewport = new Viewport({\r\n        screenWidth: this.app.screen.width,\r\n        screenHeight: this.app.screen.height,\r\n        worldWidth: 3000,   //not sure\r\n        worldHeight: 3000,  //not sure\r\n\r\n        // the interaction module is important for wheel to work properly \r\n        // when renderer.view is placed or scaled\r\n        events: this.app.renderer.events\r\n      });\r\n\r\n      this.viewport.center = this.getScreenCenterpoint();\r\n\r\n      this.app.ticker.add((ticker) => {\r\n        this.viewport.update(ticker.deltaMS);\r\n      });\r\n\r\n\r\n      /////////////////////////////\r\n      this.emit(GixiApplication.EVENT_INITIALIZE_COMPLETE, this);\r\n      this.setupResizeHandling();\r\n      this.addToStage(this.viewport);\r\n      this.viewport.label = \"Viewport\"; //TODO: Why \"Et Viewport\"?\r\n\r\n    } catch (error) {\r\n      console.log(`PIXI.Application.init() failed! PixiJS v${PIXI.VERSION} with ${this.GetRendererTypeAsString(this.app.renderer.type)} `);\r\n\r\n      this.emit(GixiApplication.EVENT_INITIALIZE_ERROR, error);\r\n    }\r\n\r\n\r\n  }\r\n\r\n  public requireIsInitialized() {\r\n\r\n    if (!this.isInitialized) {\r\n      throw new Error('requireIsInitialized.');\r\n    }\r\n  }\r\n\r\n\r\n  // Methods ------------------------------\r\n  private GetRendererTypeAsString(type: number) {\r\n    let rendererType: string = \"Unknown\";\r\n    if (this.app.renderer.type === PIXI.RendererType.WEBGL) {\r\n      rendererType = 'WebGL';\r\n    } else if (this.app.renderer.type === PIXI.RendererType.WEBGPU) {\r\n      rendererType = 'WebGPU';\r\n    }\r\n    return rendererType\r\n  }\r\n\r\n  // Add to camera-controlled scene tree\r\n  public addToViewport(obj: PIXI.Container | PIXI.Sprite | SuperText): any {\r\n\r\n    this.requireIsInitialized();\r\n\r\n    this.viewport.addChild(obj);\r\n\r\n    if (obj instanceof ActorContainer || obj instanceof SuperText) {\r\n      obj.onAdded();\r\n    }\r\n\r\n\r\n    this.resize();\r\n  }\r\n\r\n  // Remove from camera-controlled scene tree\r\n  public removeFromViewport(obj: PIXI.Container | PIXI.Sprite | SuperText): any {\r\n\r\n    this.requireIsInitialized();\r\n\r\n    this.viewport.removeChild(obj);\r\n\r\n    if (obj instanceof ActorContainer || obj instanceof SuperText) {\r\n      obj.onRemoved();\r\n    }\r\n\r\n    this.resize();\r\n  }\r\n\r\n  // Add to basic scene tree\r\n  public addToStage(obj: PIXI.Container | PIXI.Sprite | SuperText, parent?: PIXI.Sprite | ActorContainer): any {\r\n\r\n    this.requireIsInitialized();\r\n\r\n    if (parent == null) {\r\n      this.app.stage.addChild(obj);\r\n    } else {\r\n      parent.addChild(obj);\r\n    }\r\n\r\n    if (obj instanceof ActorContainer || obj instanceof SuperText) {\r\n      obj.onAdded();\r\n    }\r\n\r\n    this.resize();\r\n  };\r\n\r\n\r\n  // Remove from basic scene tree\r\n  public removeFromStage(obj: PIXI.Container | PIXI.Sprite | SuperText, parent?: PIXI.Sprite | ActorContainer): any {\r\n\r\n    this.requireIsInitialized();\r\n\r\n    if (parent == null) {\r\n      this.app.stage.removeChild(obj);\r\n    }\r\n    else {\r\n      parent.removeChild(obj);\r\n    }\r\n\r\n    if (obj instanceof ActorContainer || obj instanceof SuperText) {\r\n      obj.onRemoved();\r\n    }\r\n\r\n    this.resize();\r\n  }\r\n\r\n\r\n  public resize = () => {\r\n\r\n    this.emit(GixiApplication.EVENT_RESIZE, this);\r\n  };\r\n\r\n  private setupResizeHandling() {\r\n\r\n    const resizeAfterDelay = () => {\r\n      setTimeout(this.resize, 100);\r\n    };\r\n\r\n    /////////////////////////////\r\n    // Observe window resize\r\n    /////////////////////////////\r\n    window.addEventListener('resize', this.resize);               //now\r\n    window.addEventListener('resize', resizeAfterDelay);          //and after delay. Robust.\r\n    window.addEventListener('orientationchange', this.resize);\r\n    window.addEventListener('orientationchange', resizeAfterDelay);\r\n    this.resize(); // Initial resize\r\n  }\r\n\r\n  public getScreenScaleCurrent(): PIXI.Point {\r\n\r\n    return new PIXI.Point(\r\n      this.app.screen.width / this.configuration.widthInitial,\r\n      this.app.screen.height / this.configuration.heightInitial\r\n    );\r\n  }\r\n\r\n\r\n\r\n  getScreenCenterpoint() {\r\n\r\n    return new PIXI.Point(\r\n      this.app.screen.width / 2,\r\n      this.app.screen.height / 2)\r\n  }\r\n\r\n  // Event Handlers -------------------------------\r\n}","import * as PIXI from 'pixi.js';\r\nimport { GixiApplication } from '../../gixi/GixiApplication';\r\n\r\n/**\r\n * Subclass PIXI.Text if you want basic text functionality.\r\n * \r\n * Subclass SuperText if you ALSO want onResize and onTick events\r\n */\r\nexport class SuperText extends PIXI.Text {\r\n\r\n    // Fields ---------------------------------------\r\n    protected _app: GixiApplication;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication, message: string, fontSize: number = 8, align: PIXI.TextStyleAlign = 'left') {\r\n\r\n\r\n        const textStyle = new PIXI.TextStyle({\r\n            fontFamily: 'Arial',\r\n            fontSize: fontSize,\r\n            fill: '#ffffff',\r\n\r\n            align: align\r\n        });\r\n\r\n        const textOptions: PIXI.TextOptions = {\r\n            text: message,\r\n            style: textStyle,\r\n            resolution: 2 // Ensure text is sharp\r\n        };\r\n\r\n        super(textOptions);\r\n\r\n        this.label = (SuperText).name;\r\n\r\n        this._app = app;\r\n\r\n        // Tick\r\n        app.app.ticker.add(this.onTick.bind(this));\r\n\r\n        // Resize\r\n        this._app.addListener(GixiApplication.EVENT_RESIZE, this.onResize.bind(this));\r\n        this.onResize(this._app);\r\n\r\n    }\r\n\r\n    // Initialization -------------------------------\r\n    public isChild(): boolean {\r\n        return parent !== null;\r\n    }\r\n\r\n    // Event Handlers -------------------------------\r\n    public onAdded() {\r\n        // Empty implementation to be overridden\r\n    }\r\n\r\n    public onRemoved() {\r\n        // Empty implementation to be overridden\r\n    }\r\n\r\n    public onResize(app: GixiApplication): void {\r\n        // Empty implementation to be overridden\r\n    }\r\n\r\n    public onTick(ticker: PIXI.Ticker): void {\r\n        // Empty implementation to be overridden\r\n    }\r\n}\r\n","import { SuperText } from \"@src/scripts/client/core/super/SuperText\";\r\nimport { GixiApplication } from \"@src/scripts/client/gixi/GixiApplication\";\r\n\r\nexport class InstructionsSuperText extends SuperText {\r\n\r\n    // Fields ---------------------------------------\r\n\r\n    // Initialization -------------------------------\r\n\r\n    // Event Handlers -------------------------------\r\n    public override onResize(app: GixiApplication): void {\r\n\r\n        //UPDATE POSITION\r\n        this.x = app.configuration.data.ScreenUIMarginX;\r\n        this.y = app.configuration.data.ScreenUIMarginY;\r\n\r\n        //HACK: UPDATE SIZE\r\n        this.style.fontSize = 15 + 7 / app.app.renderer.resolution\r\n\r\n        //TEMP: SHOW DEBUGGING\r\n        let r1 = Math.round(app.app.renderer.resolution * 100) / 100;\r\n        let r2 = Math.round(this.resolution * 100) / 100;\r\n        this.text = `Arrows / WASD To Move\\nEnter / Spacebar For Attack\\nF For Fullscreen\\n\\n[Resolution: ${r1}, ${r2}]`;\r\n\r\n    }\r\n}\r\n","import { SuperText } from \"@src/scripts/client/core/super/SuperText\";\r\nimport { GixiApplication } from \"@src/scripts/client/gixi/GixiApplication\";\r\n\r\nexport class ScoreSuperText extends SuperText {\r\n\r\n    // Fields ---------------------------------------\r\n\r\n    // Initialization -------------------------------\r\n\r\n    // Event Handlers -------------------------------\r\n    public override onResize(app: GixiApplication): void {\r\n\r\n        //UPDATE POSITION\r\n        this.x = app.app.screen.width - this.width - app.configuration.data.ScreenUIMarginX;\r\n        this.y = app.configuration.data.ScreenUIMarginY;\r\n\r\n        //HACK: UPDATE SIZE\r\n        this.style.fontSize = 15 + 7 / app.app.renderer.resolution\r\n\r\n    }\r\n}\r\n","import { ActorContainer, ActorContainerConfiguration } from './ActorContainer';\r\nimport { GixiApplication } from './GixiApplication';\r\nimport { IActor } from './interfaces/IActor';\r\nimport { IInitializableAsync } from './interfaces/IInitializeAsync';\r\nimport { GixiUtility } from './GixiUtility';\r\nimport * as PIXI from 'pixi.js';\r\nimport { GlowFilter } from 'pixi-filters';\r\n\r\n\r\n\r\n//NOTE: I put this class witin the same file as ActorAnimated \r\n//so I can NOT export it (to hide it from direct use). Needed? Not sure.\r\nclass MultiAnimatedSprite {\r\n\r\n    // Fields ---------------------------------------\r\n    private _animationNameToAnimatedSprite: Map<string, PIXI.AnimatedSprite>;\r\n    private _textureImageURL: string;\r\n    private _spriteSheetURL: string;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(newTextureImageURL: string, newSpriteSheetURL: string) {\r\n        this._textureImageURL = newTextureImageURL;\r\n        this._spriteSheetURL = newSpriteSheetURL;\r\n        this._animationNameToAnimatedSprite = new Map();\r\n    }\r\n\r\n    // Methods ------------------------------\r\n    public async initializeAndReparent(app: GixiApplication, parent: PIXI.Container) {\r\n\r\n\r\n        const spriteSheetAtlasResponse = await fetch(this._spriteSheetURL);\r\n        const spriteSheetAtlas = await spriteSheetAtlasResponse.json();\r\n        await PIXI.Assets.load(this._textureImageURL);\r\n        const texture = PIXI.Texture.from(this._textureImageURL);\r\n        const spriteSheet = new PIXI.Spritesheet(texture, spriteSheetAtlas);\r\n        await spriteSheet.parse();\r\n\r\n        const size = new PIXI.Point(\r\n            spriteSheetAtlas.meta.size.w,\r\n            spriteSheetAtlas.meta.size.h\r\n        )\r\n\r\n        for (const [animationName, textures] of Object.entries(spriteSheet.animations)) {\r\n            this._animationNameToAnimatedSprite.set(animationName, new PIXI.AnimatedSprite(textures));\r\n        }\r\n\r\n        this._animationNameToAnimatedSprite.forEach((value: PIXI.AnimatedSprite, key: string) => {\r\n\r\n            //NOTE: The parent center and/or the value center may not be proper\r\n            //TODO: Go to index.ts and try to put a coin at a specific world position and then be sure it looks good\r\n            value.setSize(size.x, size.y);\r\n            value.label = (MultiAnimatedSprite).name;\r\n\r\n\r\n\r\n            value.anchor.set(0.5, 0.5);\r\n            parent.addChild(value);\r\n        });\r\n    }\r\n\r\n    public play(animationName: string, animationSpeed: number) {\r\n        const animatedSprite: PIXI.AnimatedSprite | undefined = this._animationNameToAnimatedSprite.get(animationName);\r\n        if (animatedSprite == undefined) {\r\n            throw new Error(\"Trying to play unknown animation with animationName=\" + animationName);\r\n        }\r\n\r\n        animatedSprite.animationSpeed = animationSpeed;\r\n        animatedSprite.play();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Configuration\r\n */\r\nexport interface ActorAnimatedConfiguration extends ActorContainerConfiguration {\r\n}\r\n\r\nconst ActorAnimatedConfigurationDefault: ActorAnimatedConfiguration = {\r\n    isCollidable: true,\r\n    isTickable: true,\r\n    isResizable: true\r\n}\r\n\r\n\r\n/**\r\n * Represents a coin in the game.\r\n * \r\n */\r\nexport class ActorAnimated extends ActorContainer implements IInitializableAsync, IActor {\r\n\r\n\r\n    // Properties -----------------------------------\r\n    public override get configuration(): ActorAnimatedConfiguration {\r\n        return this._configuration as ActorAnimatedConfiguration;\r\n    }\r\n\r\n    // Fields ---------------------------------------\r\n    protected _multiAnimatedSprite!: MultiAnimatedSprite;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication, configuration?: Partial<ActorAnimatedConfiguration>) {\r\n\r\n        super(app, { ...ActorAnimatedConfigurationDefault, ...configuration });\r\n\r\n        // Redeclare anything from super \r\n        // that you want differently here\r\n        this.label = (ActorAnimated).name;\r\n\r\n        this.initializeAsync();\r\n    }\r\n\r\n\r\n    public override async initializeAsync() {\r\n\r\n        // Super\r\n        await super.initializeAsync();\r\n\r\n        //TODO:\r\n        //1. Populate ActorAnimatedConfiguration above\r\n        //      with whatever is needed to pass into the constructor.\r\n        //      (See how ActorStatic does it.)\r\n        //2. Do some error checking here \r\n        //      (See how ActorStatic does it.)\r\n        //3. Update this snippet below as needed. Done!    \r\n        const animatedTextureURL = 'assets/images/AnimatedCoin/animated_coin.png';\r\n        const animatedTextureJSONURL = 'assets/images/AnimatedCoin/animated_coin.json';\r\n        this._multiAnimatedSprite = new MultiAnimatedSprite(animatedTextureURL, animatedTextureJSONURL);\r\n        await this._multiAnimatedSprite.initializeAndReparent(this._app, this);\r\n        this._multiAnimatedSprite.play('Gold', 0.2);\r\n\r\n\r\n        // Local\r\n        //Do any additional initialization here\r\n\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n\r\n    // Event Handlers -------------------------------\r\n\r\n    public override onTick(ticker: PIXI.Ticker): void {\r\n\r\n        // Super\r\n        super.onTick(ticker);\r\n\r\n\r\n        // Local\r\n        //Do any additional things here\r\n\r\n    }\r\n}\r\n\r\n","import { ActorAnimatedConfiguration } from '@src/scripts/client/gixi';\r\nimport { ActorAnimated } from '@src/scripts/client/gixi/ActorAnimated';\r\nimport { GixiApplication } from '@src/scripts/client/gixi/GixiApplication';\r\nimport { Actions, Interpolations } from 'pixi-actions';\r\nimport { DropShadowFilter, GlowFilter } from 'pixi-filters';\r\n\r\n/**\r\n * Represents a coin in the game.\r\n * \r\n */\r\nexport class CoinTilemapObject extends ActorAnimated {\r\n\r\n\r\n    // Properties -----------------------------------\r\n\r\n\r\n    // Fields ---------------------------------------\r\n\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication) {\r\n\r\n        const configuration: ActorAnimatedConfiguration = {\r\n            isCollidable: false,\r\n            isTickable: false,\r\n            isResizable: false\r\n        }\r\n\r\n        super(app, configuration);\r\n\r\n        // Redeclare anything from super \r\n        // that you want differently here\r\n        this.label = (CoinTilemapObject).name;\r\n\r\n    }\r\n\r\n    public whatever() {\r\n        this.isCollected = true;\r\n        this.destroyAfterAnimation();\r\n    }\r\n\r\n\r\n    public override async initializeAsync() {\r\n\r\n        // Super\r\n        await super.initializeAsync();\r\n\r\n        // OPTIONAL: Try these - https://pixijs.io/filters/\r\n        this.filters = [\r\n            //new GlowFilter({ distance: 1, outerStrength: 1, innerStrength: 1, color: 0xffff00 }),\r\n            new DropShadowFilter({ blur: 1, alpha: 0.5, quality: 3, resolution: 2 }) //\r\n        ];\r\n\r\n        // Local\r\n        //Do any additional initialization here\r\n\r\n    }\r\n\r\n\r\n    // Methods --------------------------------------\r\n\r\n\r\n    public destroyAfterAnimation() {\r\n        let action = Actions.sequence(\r\n\r\n            Actions.delay(0),\r\n            Actions.runFunc(() => {\r\n                // BEFORE Animation: Call something?\r\n                this._app.systems.audioSystem.play(\"./assets/audio/Chime01.mp3\");\r\n            }),\r\n            Actions.parallel(\r\n\r\n                Actions.moveTo(this,\r\n                    this.x,\r\n                    this.y - 32,\r\n                    20,\r\n                    Interpolations.smooth2),\r\n\r\n                Actions.scaleTo(this,\r\n                    2,\r\n                    2,\r\n                    20,\r\n                    Interpolations.smooth2),\r\n\r\n            ),\r\n            Actions.runFunc(() => {\r\n                // AFTER Animation: Call something?\r\n                this.destroy();\r\n            }),\r\n        );\r\n        action.play();\r\n\r\n\r\n    }\r\n\r\n    // Event Handlers -------------------------------\r\n\r\n    //TODO: Rethink what and where this should be\r\n    public isCollected = false;\r\n    public collect() {\r\n\r\n        if (this.isCollected) {\r\n            return;\r\n        }\r\n        this.isCollected = true;\r\n        this.destroyAfterAnimation();\r\n    }\r\n\r\n}\r\n\r\n\r\n","import * as PIXI from 'pixi.js';\r\n\r\n/**\r\n * Common functionality\r\n */\r\nexport class GixiUtility {\r\n\r\n  // Properties -----------------------------------\r\n\r\n  // Fields ---------------------------------------\r\n\r\n  // Methods --------------------------------------\r\n  public static textureIsNullOrEmpty(texture: PIXI.Texture): boolean {\r\n    return texture === null || texture === PIXI.Texture.EMPTY;\r\n  }\r\n\r\n  public static stringIsNullOrEmpty(value: string): boolean {\r\n    return value === null || value === '';\r\n  }\r\n}\r\n","import { ActorContainer, ActorContainerConfiguration } from './ActorContainer';\r\nimport { GixiApplication } from './GixiApplication';\r\nimport { IActor } from './interfaces/IActor';\r\nimport { IInitializableAsync } from './interfaces/IInitializeAsync';\r\nimport { GixiUtility } from './GixiUtility';\r\nimport * as PIXI from 'pixi.js';\r\n\r\n/**\r\n * Configuration\r\n */\r\nexport interface ActorStaticConfiguration extends ActorContainerConfiguration {\r\n    textureUrl: string;\r\n    texture: PIXI.Texture;\r\n}\r\n\r\nconst ActorStaticConfigurationDefault: ActorStaticConfiguration = {\r\n    textureUrl: '',\r\n    texture: PIXI.Texture.EMPTY,\r\n    isCollidable: true,\r\n    isTickable: true,\r\n    isResizable: true\r\n}\r\n\r\n\r\n/**\r\n * Represents a coin in the game.\r\n * \r\n */\r\nexport class ActorStatic extends ActorContainer implements IInitializableAsync, IActor {\r\n\r\n\r\n    // Properties -----------------------------------\r\n    public override get configuration(): ActorStaticConfiguration {\r\n        return this._configuration as ActorStaticConfiguration;\r\n    }\r\n\r\n    // Fields ---------------------------------------\r\n    protected _sprite!: PIXI.Sprite;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication, configuration?: Partial<ActorStaticConfiguration>) {\r\n\r\n        super(app, { ...ActorStaticConfigurationDefault, ...configuration });\r\n\r\n        if (!GixiUtility.textureIsNullOrEmpty(this.configuration?.texture) &&\r\n            !GixiUtility.stringIsNullOrEmpty(this.configuration?.textureUrl)) {\r\n            throw new Error(\"You cannot set both texture and textureUrl in the configuration\");\r\n        }\r\n\r\n        this.initializeAsync();\r\n\r\n        // Redeclare anything from super \r\n        // that you want differently here\r\n        this.label = (ActorStatic).name;\r\n    }\r\n\r\n\r\n    public override async initializeAsync() {\r\n\r\n        // Super\r\n        await super.initializeAsync();\r\n\r\n        if (!GixiUtility.textureIsNullOrEmpty(this.configuration?.texture)) {\r\n            this._sprite = new PIXI.Sprite(this.configuration?.texture);\r\n        }\r\n        else if (!GixiUtility.stringIsNullOrEmpty(this.configuration?.textureUrl)) {\r\n            await PIXI.Assets.load([this.configuration.textureUrl]);\r\n            const texture: PIXI.Texture = PIXI.Texture.from(this.configuration.textureUrl);\r\n            this._sprite = new PIXI.Sprite(texture);\r\n        }\r\n\r\n        this._sprite.label = this.label;\r\n        this.addChild(this._sprite);\r\n        this._sprite.anchor.set(0.5, 0.5);\r\n\r\n        // Local\r\n        //Do any additional initialization here\r\n\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n\r\n    // Event Handlers -------------------------------\r\n\r\n    public override onTick(ticker: PIXI.Ticker): void {\r\n\r\n        // Super\r\n        super.onTick(ticker);\r\n\r\n\r\n        // Local\r\n        //Do any additional things here\r\n\r\n    }\r\n}\r\n\r\n","import { ActorStatic, ActorStaticConfiguration } from '@src/scripts/client/gixi/ActorStatic';\r\nimport { GixiApplication } from '@src/scripts/client/gixi/GixiApplication';\r\nimport { Actions, Interpolations } from 'pixi-actions';\r\nimport { DropShadowFilter } from 'pixi-filters';\r\nimport { Container, Ticker } from 'pixi.js';\r\n\r\n/**\r\n * Represents a coin in the game.\r\n * \r\n */\r\nexport class ChestTilemapObject extends ActorStatic {\r\n\r\n    // Properties -----------------------------------\r\n\r\n\r\n    // Fields ---------------------------------------\r\n\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication, configuration?: Partial<ActorStaticConfiguration>) {\r\n\r\n        super(app, configuration);\r\n\r\n        // Redeclare anything from super \r\n        // that you want differently here\r\n        this.label = (ChestTilemapObject).name;\r\n    }\r\n\r\n    public override async initializeAsync() {\r\n\r\n        // Super\r\n        await super.initializeAsync();\r\n\r\n        this.filters = [\r\n            new DropShadowFilter({ blur: 1, alpha: 0.5, quality: 3, resolution: 2 })\r\n        ];\r\n\r\n        // Local\r\n        // Do any additional initialization here\r\n\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n    public override onTick(ticker: Ticker): void {\r\n\r\n        // Super\r\n        super.onTick(ticker);\r\n\r\n        // Local\r\n        this.rotation += 0.01 * ticker.deltaTime;\r\n    }\r\n\r\n    private destroyAfterAnimation() {\r\n        let action = Actions.sequence(\r\n\r\n            Actions.delay(0),\r\n            Actions.runFunc(() => {\r\n                // BEFORE Animation: Call something?\r\n                this._app.systems.audioSystem.play(\"./assets/audio/Chime02.mp3\");\r\n            }),\r\n            Actions.parallel(\r\n\r\n                Actions.rotateTo(this,\r\n                    1,\r\n                    20,\r\n                    Interpolations.smooth2),\r\n\r\n                Actions.scaleTo(this,\r\n                    0,\r\n                    0,\r\n                    20,\r\n                    Interpolations.smooth2),\r\n\r\n            ),\r\n            Actions.runFunc(() => {\r\n                // AFTER Animation: Call something?\r\n                this.destroy();\r\n            }),\r\n        );\r\n        action.play();\r\n\r\n    }\r\n\r\n    // Event Handlers -------------------------------\r\n\r\n    //TODO: Rethink what and where this should be\r\n    public isCollected = false;\r\n    public collect() {\r\n\r\n        if (this.isCollected) {\r\n            return;\r\n        }\r\n        this.isCollected = true;\r\n        this.destroyAfterAnimation();\r\n    }\r\n\r\n}\r\n","import * as PIXI from 'pixi.js';\r\nimport { GixiApplication } from '@src/scripts/client/gixi/GixiApplication';\r\nimport { DropShadowFilter } from 'pixi-filters';\r\nimport { CoinTilemapObject } from './tileMap/tileMapObjects/CoinTilemapObject';\r\nimport { ChestTilemapObject } from './tileMap/tileMapObjects/ChestTilemapObject';\r\nimport { ActorStatic, ActorStaticConfiguration } from '../../gixi/ActorStatic';\r\nimport { Tilemap } from '../../gixi/tilemap/Tilemap';\r\n\r\n/**\r\n * Configuration\r\n */\r\nexport interface PlayerConfiguration extends ActorStaticConfiguration {\r\n}\r\n\r\nconst PlayerConfigurationDefault: PlayerConfiguration = {\r\n    textureUrl: '',\r\n    texture: PIXI.Texture.EMPTY,\r\n    isCollidable: true,\r\n    isTickable: true,\r\n    isResizable: true\r\n}\r\n\r\n/**\r\n * Represents a coin in the game.\r\n * \r\n */\r\nexport class Player extends ActorStatic {\r\n\r\n\r\n    // Properties -----------------------------------\r\n\r\n\r\n    // Fields ---------------------------------------\r\n    private _Tilemap: Tilemap;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication, Tilemap: Tilemap, configuration?: Partial<PlayerConfiguration>) {\r\n\r\n        super(app, { ...PlayerConfigurationDefault, ...configuration });\r\n        this._Tilemap = Tilemap;\r\n\r\n        // Redeclare anything from super \r\n        // that you want differently here\r\n        this.label = (Player).name;\r\n\r\n\r\n        //TEST\r\n        //TODO: Update InputSystem to take screen-swipes instead of player-taps\r\n        this.on('pointerdown', (event) => {\r\n            this.position.x += 10;\r\n        });\r\n        this.eventMode = 'static';\r\n\r\n    }\r\n\r\n\r\n\r\n    public override async initializeAsync() {\r\n\r\n        // Super\r\n        await super.initializeAsync();\r\n\r\n        // OPTIONAL: Try these - https://pixijs.io/filters/\r\n        this._sprite.filters = [\r\n            new DropShadowFilter({ blur: 1, alpha: 0.5, quality: 3, resolution: 2 })\r\n        ];\r\n\r\n        // Local\r\n        //Do any additional initialization here\r\n        this._sprite.anchor.set(0, 0);\r\n\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n\r\n\r\n    //TODO: Utilize this to block movement\r\n    private isCollisionWithTilemap() {\r\n\r\n        //show all 4 values in the log string\r\n        let x = Math.round(this.position.x);\r\n        let y = Math.round(this.position.y);\r\n        let width = 32;\r\n        let height = 32;\r\n\r\n        let isCollision = this._Tilemap.isCollision(x, y, width, height);\r\n\r\n        // Internally the map uses globals, so we do NOT need to convert\r\n        //let globalPos = this.toGlobal(this.position);\r\n\r\n        if (isCollision) {\r\n            console.log(`isCollisionWithTilemap (x=${x}, y=${y}) = ${isCollision}`);\r\n        }\r\n        else {\r\n            //console.log(`isCollisionWithTilemap (x=${x}, y=${y}) = ${isCollision}`);\r\n        }\r\n\r\n\r\n        return isCollision;\r\n\r\n    }\r\n\r\n    // Event Handlers -------------------------------\r\n\r\n    public override onTick(ticker: PIXI.Ticker): void {\r\n\r\n        super.onTick(ticker);\r\n\r\n        let moveVector: PIXI.Point = new PIXI.Point(0, 0);\r\n\r\n        if (this._app.systems.inputSystem.isKeyDown('a')) {\r\n            this.isCollisionWithTilemap();\r\n            moveVector.x += -1;\r\n\r\n        }\r\n        if (this._app.systems.inputSystem.isKeyDown('d')) {\r\n            this.isCollisionWithTilemap();\r\n            moveVector.x += 1;\r\n        }\r\n        if (this._app.systems.inputSystem.isKeyDown('w')) {\r\n            this.isCollisionWithTilemap();\r\n            moveVector.y += -1;\r\n        }\r\n        if (this._app.systems.inputSystem.isKeyDown('s')) {\r\n            this.isCollisionWithTilemap();\r\n            moveVector.y += 1;\r\n        }\r\n\r\n        if (this._app.systems.inputSystem.isKeyDownThisFrame('Enter') ||         //works\r\n            this._app.systems.inputSystem.isKeyDownThisFrame('Spacebar')) {      //does work. TODO: WHy?\r\n\r\n            //ACTION!\r\n            this._app.systems.audioSystem.play(\"./assets/audio/Click01.wav\");\r\n        }\r\n\r\n        if (this._app.systems.inputSystem.isKeyDownThisFrame('f')) {\r\n\r\n            //FULLSCREEN\r\n            this._app.isFullscreen = !this._app.isFullscreen;\r\n        }\r\n\r\n        const movementSpeed = 3.0;\r\n        this.position.x += moveVector.x * ticker.deltaTime * movementSpeed;\r\n        this.position.y += moveVector.y * ticker.deltaTime * movementSpeed;\r\n    }\r\n\r\n\r\n    public override onCollision(collisions: PIXI.Container[]): void {\r\n\r\n        collisions.forEach((collision) => {\r\n\r\n            console.log(\"collision2: \" + collision.label)\r\n            if (collision instanceof CoinTilemapObject) {\r\n                if (!collision.isCollected) {\r\n                    collision.collect();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (collision instanceof ChestTilemapObject) {\r\n                if (!collision.isCollected) {\r\n                    collision.collect();\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n","import * as PIXI from 'pixi.js';\r\nimport { GixiApplication } from '../GixiApplication';\r\nimport { TilemapData } from '..';\r\nimport { Tilemap } from './Tilemap';\r\n\r\nexport class TilemapCollisionSystem {\r\n    private collisionMap!: boolean[][];\r\n    private _app: GixiApplication;\r\n    private _Tilemap: Tilemap;\r\n\r\n    constructor(app: GixiApplication, Tilemap: Tilemap) {\r\n        this._app = app;\r\n        this._Tilemap = Tilemap;\r\n    }\r\n\r\n    public async initializeAsync() {\r\n        this.collisionMap = this.createCollisionMap(this._Tilemap.tilemapData);\r\n    }\r\n\r\n    private createCollisionMap(tilemapData: TilemapData): boolean[][] {\r\n        if (!tilemapData.layers || !tilemapData.tilesets) {\r\n            throw new Error('Invalid tilemapData: layers or tilesets are missing');\r\n        }\r\n\r\n        const layers = tilemapData.layers;\r\n        const tilesets = tilemapData.tilesets;\r\n\r\n        // Initialize collision map with the dimensions of the tilemap\r\n        const collisionMap: boolean[][] = Array.from({ length: tilemapData.height }, () =>\r\n            Array(tilemapData.width).fill(false)\r\n        );\r\n\r\n        // Build a lookup map for IsCollision property\r\n        const collisionProperties: { [key: number]: boolean } = {};\r\n        tilesets.forEach((tileset) => {\r\n            if (tileset.tiles) {\r\n                tileset.tiles.forEach((tile) => {\r\n                    if (tile.properties) {\r\n                        tile.properties.forEach((property) => {\r\n                            if (property.name === \"IsCollision\") {\r\n                                collisionProperties[tileset.firstgid + tile.id] = property.value;\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n            }\r\n        });\r\n\r\n        // Populate the collision map based on the tile data\r\n        layers.forEach((layer) => {\r\n            if (layer.type === \"tilelayer\" && layer.data) {\r\n                for (let y = 0; y < layer.height; y++) {\r\n                    for (let x = 0; x < layer.width; x++) {\r\n                        const tileIndex = layer.data[y * layer.width + x];\r\n                        if (collisionProperties[tileIndex]) {\r\n                            collisionMap[y][x] = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return collisionMap;\r\n    }\r\n\r\n    public isCollision(x: number, y: number, width: number, height: number): boolean {\r\n        const localPos = new PIXI.Point(x, y);\r\n        const globalPos = new PIXI.Point();\r\n        this._app.app.stage.toGlobal(localPos, globalPos);\r\n\r\n        const tileWidth = this._Tilemap.tilemapData.tilewidth;\r\n        const tileHeight = this._Tilemap.tilemapData.tileheight;\r\n\r\n        const startX = Math.floor((globalPos.x - this._Tilemap.x) / tileWidth);\r\n        const endX = Math.ceil((globalPos.x - this._Tilemap.x + width) / tileWidth);\r\n        const startY = Math.floor((globalPos.y - this._Tilemap.y) / tileHeight);\r\n        const endY = Math.ceil((globalPos.y - this._Tilemap.y + height) / tileHeight);\r\n\r\n        const localTileX = Math.floor(localPos.x / tileWidth);\r\n        const localTileY = Math.floor(localPos.y / tileHeight);\r\n        const globalTileX = Math.floor((globalPos.x - this._Tilemap.x) / tileWidth);\r\n        const globalTileY = Math.floor((globalPos.y - this._Tilemap.y) / tileHeight);\r\n\r\n        const tilemapGlobalPos = new PIXI.Point();\r\n        this._Tilemap.toGlobal(new PIXI.Point(0, 0), tilemapGlobalPos);\r\n\r\n        for (let tileY = startY; tileY < endY; tileY++) {\r\n            for (let tileX = startX; tileX < endX; tileX++) {\r\n                if (tileY >= 0 && tileY < this.collisionMap.length && tileX >= 0 && tileX < this.collisionMap[0].length) {\r\n                    //console.log(`Checking tile (${tileX}, ${tileY})`);\r\n                    if (this.collisionMap[tileY][tileX]) {\r\n                        //console.log(`Collision detected at tile (${tileX}, ${tileY})`);\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    //console.log(`Tile (${tileX}, ${tileY}) is out of bounds`);\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","import * as PIXI from 'pixi.js';\r\nimport { GixiApplication } from '@src/scripts/client/gixi/GixiApplication';\r\nimport { GixiUtility } from '../GixiUtility';\r\nimport { IInitializableAsync } from '../interfaces/IInitializeAsync';\r\nimport { ActorContainer, ActorContainerConfiguration } from '../ActorContainer';\r\nimport { TilemapCollisionSystem } from './TilemapCollisionSystem';\r\n\r\nexport interface TilemapData {\r\n  width: number;\r\n  height: number;\r\n  tilewidth: number;\r\n  tileheight: number;\r\n  layers: Layer[];\r\n  tilesets: Tileset[];\r\n}\r\n\r\nexport interface Layer {\r\n  type: string;\r\n  width: number;\r\n  height: number;\r\n  data?: number[];\r\n  objects?: any[];\r\n}\r\n\r\nexport interface Tileset {\r\n  firstgid: number;\r\n  tiles?: Tile[];\r\n}\r\n\r\nexport interface Tile {\r\n  id: number;\r\n  properties?: Property[];\r\n  type?: string;\r\n}\r\n\r\nexport interface Property {\r\n  name: string;\r\n  value: boolean;\r\n}\r\n\r\nexport interface TilemapItemData {\r\n  x: number;\r\n  y: number;\r\n  row: number;\r\n  column: number;\r\n  texture: PIXI.Texture;\r\n  layerType: LayerType;\r\n  type: string;\r\n}\r\n\r\n\r\nexport enum LayerType {\r\n  TileLayer = 'tilelayer',\r\n  ObjectGroup = 'objectgroup',\r\n}\r\n\r\nexport interface ITilemapItemFactory {\r\n  createTilemapItem(tilemapItemData: TilemapItemData): Promise<PIXI.Container>;\r\n}\r\n\r\n\r\nexport class Tilemap extends ActorContainer implements IInitializableAsync {\r\n\r\n  // Properties -----------------------------------\r\n  get tilemapData(): TilemapData { return this._tilemapData; }\r\n\r\n  // Fields ---------------------------------------\r\n  private _tilemapDataUrl: string;\r\n  private _TilemapItemFactory: ITilemapItemFactory;\r\n  private _TilemapCollisionSystem: TilemapCollisionSystem;\r\n  private _tilemapData!: TilemapData;\r\n\r\n  // Initialization -------------------------------\r\n  constructor(app: GixiApplication, tilemapDataUrl: string, TilemapItemFactory: ITilemapItemFactory) {\r\n\r\n    const configuration: ActorContainerConfiguration = {\r\n      isCollidable: false,\r\n      isTickable: false,\r\n      isResizable: false\r\n    }\r\n    super(app, configuration);\r\n\r\n    this._tilemapDataUrl = tilemapDataUrl;\r\n    this._TilemapItemFactory = TilemapItemFactory;\r\n    this._TilemapCollisionSystem = new TilemapCollisionSystem(this._app, this);\r\n\r\n\r\n    // OPTIMIZATION\r\n    //  https://pixijs.com/8.x/guides/advanced/render-groups\r\n    //    As you delve deeper into PixiJS, especially with version 8, \r\n    //    you'll encounter a powerful feature known as RenderGroups. Think \r\n    //    of RenderGroups as specialized containers within your scene graph \r\n    //    that act like mini scene graphs themselves. Here's what you need to\r\n    //    know to effectively use Render Groups in your projects:\r\n    this.isRenderGroup = true;\r\n\r\n    // INPUT\r\n    // https://pixijs.com/8.x/guides/components/interaction\r\n    this.interactive = false;\r\n    this.interactiveChildren = false;\r\n\r\n\r\n    //\r\n    this.label = (Tilemap).name;\r\n    this.position.set(0, 0);\r\n    this.scale.set(1);\r\n    this.isRenderGroup = true;\r\n  }\r\n  get isInitialized(): boolean {\r\n    return this._isInitialized;\r\n  }\r\n\r\n  public override async initializeAsync() {\r\n\r\n\r\n    if (this.isInitialized) {\r\n      return;\r\n    }\r\n    await super.initializeAsync();\r\n    this._isInitialized = true;\r\n\r\n    if (GixiUtility.stringIsNullOrEmpty(this._tilemapDataUrl)) {\r\n      throw new Error(`Tilemap.initializeAsync() file missing error. tilemapDataUrl = \"${this._tilemapDataUrl}\"`);\r\n    }\r\n\r\n    if (!this._tilemapDataUrl.endsWith(\".tmj\")) {\r\n      throw new Error(`Tilemap.initializeAsync() file extension error. tilemapDataUrl = \"${this._tilemapDataUrl}\"`);\r\n    }\r\n\r\n    let response!: Response;\r\n    try {\r\n      response = await fetch(this._tilemapDataUrl);\r\n    }\r\n    catch (e) {\r\n      throw new Error(`Tilemap.initializeAsync() fetch error. tilemapDataUrl = \"${this._tilemapDataUrl}\"`);\r\n    }\r\n\r\n    try {\r\n      this._tilemapData = await response.json();\r\n    }\r\n    catch (e) {\r\n      throw new Error(`Tilemap.initializeAsync() json error. tilemapDataUrl = \"${this._tilemapDataUrl}\"`);\r\n    }\r\n\r\n    const tilesetPromises = this._tilemapData.tilesets.map((tileset: any) => {\r\n      const imageUrl = tileset.image.replace('../', 'assets/');\r\n      return PIXI.Assets.load(imageUrl).then(() => {\r\n        return { ...tileset, texture: PIXI.Texture.from(imageUrl) };\r\n      });\r\n    });\r\n\r\n\r\n    const tilesets = await Promise.all(tilesetPromises);\r\n\r\n    for (const layer of this._tilemapData.layers) {\r\n      if (layer.type === LayerType.TileLayer) {\r\n        await this.processTileLayer(layer, tilesets);\r\n      } else if (layer.type === LayerType.ObjectGroup && layer.objects) {\r\n        await this.processObjectLayer(layer, tilesets);\r\n      }\r\n    }\r\n\r\n    this._TilemapCollisionSystem.initializeAsync();\r\n  }\r\n\r\n  requireIsInitialized() {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  // Methods ------------------------------\r\n  private async processTileLayer(layer: Layer, tilesets: any[]) {\r\n    for (let row = 0; row < layer.height; row++) {\r\n      for (let column = 0; column < layer.width; column++) {\r\n        const tileIndex = layer.data ? layer.data[row * layer.width + column] : 0;\r\n        if (tileIndex > 0) {\r\n          const tileset = this.getTilesetForTile(tileIndex, tilesets);\r\n          if (tileset) {\r\n            const localTileIndex = tileIndex - tileset.firstgid;\r\n            const tileX = (localTileIndex % tileset.columns) * tileset.tilewidth;\r\n            const tileY = Math.floor(localTileIndex / tileset.columns) * tileset.tileheight;\r\n\r\n            const rectangle = new PIXI.Rectangle(tileX, tileY, tileset.tilewidth, tileset.tileheight);\r\n            const tileTexture = new PIXI.Texture({\r\n              source: tileset.texture.source,\r\n              frame: rectangle\r\n            });\r\n\r\n            const tilemapItemData: TilemapItemData = {\r\n              x: column * tileset.tilewidth,\r\n              y: row * tileset.tileheight,\r\n              row: row,\r\n              column: column,\r\n              texture: tileTexture,\r\n              layerType: LayerType.TileLayer,\r\n              type: this.getTileType(tileset, localTileIndex) || \"\"\r\n            };\r\n\r\n            const sprite = await this._TilemapItemFactory.createTilemapItem(tilemapItemData);\r\n            sprite.label = `Tile (${row.toString().padStart(2, '0')},${column.toString().padStart(2, '0')})`;\r\n\r\n            sprite.x = tilemapItemData.x;\r\n            sprite.y = tilemapItemData.y;\r\n            this.addChild(sprite);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private async processObjectLayer(layer: Layer, tilesets: any[]) {\r\n    for (const object of layer.objects!) {\r\n      const tileset = this.getTilesetForTile(object.gid, tilesets);\r\n      if (tileset) {\r\n        const localTileIndex = object.gid - tileset.firstgid;\r\n        const tileX = (localTileIndex % tileset.columns) * tileset.tilewidth;\r\n        const tileY = Math.floor(localTileIndex / tileset.columns) * tileset.tileheight;\r\n\r\n        const rectangle = new PIXI.Rectangle(tileX, tileY, tileset.tilewidth, tileset.tileheight);\r\n        const tileTexture = new PIXI.Texture({\r\n          source: tileset.texture.source,\r\n          frame: rectangle\r\n        });\r\n\r\n        let typeResult: string = \"\"; //ok value\r\n        let typePrimary = object.type; //BUG: THis is never populated. Its backup. Ok for now\r\n        let typeBackup = this.getTileType(tileset, localTileIndex)?.toString();\r\n\r\n        if (!GixiUtility.stringIsNullOrEmpty(typePrimary)) {\r\n          typeResult = typePrimary;\r\n        }\r\n        else if (typeBackup != null && !GixiUtility.stringIsNullOrEmpty(typeBackup)) {\r\n          typeResult = typeBackup;\r\n        }\r\n\r\n        //this means its not in a grid since objects can be anywhere\r\n        const unsetValue = -1;\r\n\r\n        const tilemapItemData: TilemapItemData = {\r\n          x: object.x,\r\n          y: object.y - tileset.tileheight,\r\n          row: unsetValue,\r\n          column: unsetValue,\r\n          texture: tileTexture,\r\n          layerType: LayerType.ObjectGroup,\r\n          type: typeResult\r\n        };\r\n\r\n        const sprite = await this._TilemapItemFactory.createTilemapItem(tilemapItemData);\r\n        sprite.label = `Object (${object.id})`;\r\n\r\n        sprite.x = tilemapItemData.x;\r\n        sprite.y = tilemapItemData.y;\r\n\r\n        this.addChild(sprite);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Event Handlers -------------------------------\r\n  public isCollision(playerX: number, playerY: number, playerWidth: number, playerHeight: number): boolean {\r\n    return this._TilemapCollisionSystem.isCollision(playerX, playerY, playerWidth, playerHeight);\r\n  }\r\n\r\n  public override async onAdded() {\r\n    await this.initializeAsync();\r\n  }\r\n\r\n  private getTilesetForTile(tileIndex: number, tilesets: any[]): any {\r\n    for (let i = tilesets.length - 1; i >= 0; i--) {\r\n      if (tileIndex >= tilesets[i].firstgid) {\r\n        return tilesets[i];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public override onRemoved(): void {\r\n    while (this.children.length > 0) {\r\n      const child = this.removeChildAt(0);\r\n      if (child instanceof PIXI.Sprite) {\r\n        child.destroy({ children: true, texture: true });\r\n      }\r\n    }\r\n  }\r\n\r\n  public override onResize(app: GixiApplication): void {\r\n    // Handle resizing logic\r\n  }\r\n\r\n  public override onTick(ticker: PIXI.Ticker): void {\r\n    // Handle tick updates\r\n  }\r\n\r\n  private getTileType(tileset: Tileset, tileIndex: number): string | undefined {\r\n    if (!tileset.tiles) return undefined;\r\n    const tile = tileset.tiles.find(t => t.id === tileIndex);\r\n    return tile?.type;\r\n  }\r\n}","import * as PIXI from 'pixi.js';\r\nimport { ChestTilemapObject } from \"./tileMapObjects/ChestTilemapObject\";\r\nimport { CoinTilemapObject } from './tileMapObjects/CoinTilemapObject';\r\nimport { GixiApplication } from '@src/scripts/client/gixi/GixiApplication';\r\nimport { ITilemapItemFactory, LayerType, TilemapItemData } from '@src/scripts/client/gixi/tilemap/Tilemap';\r\nimport { ActorStaticConfiguration } from '@src/scripts/client/gixi';\r\n\r\nexport class TilemapItemFactoryCustom implements ITilemapItemFactory {\r\n\r\n  // Fields ---------------------------------------\r\n  private _app: GixiApplication;\r\n\r\n  // Initialization -------------------------------\r\n  constructor(app: GixiApplication) {\r\n    this._app = app;\r\n  }\r\n\r\n  // Methods --------------------------------------\r\n  public async createTilemapItem(tilemapItemData: TilemapItemData): Promise<PIXI.Container> {\r\n\r\n\r\n    switch (tilemapItemData.layerType) {\r\n\r\n      case LayerType.TileLayer:\r\n        return new PIXI.Sprite(tilemapItemData.texture);\r\n\r\n      case LayerType.ObjectGroup:\r\n\r\n        //console.log(`createTilemapItem: (${tilemapItemData.row},${tilemapItemData.column}) ` + tilemapItemData.type);\r\n\r\n        if (tilemapItemData.type == (ChestTilemapObject).name) {\r\n\r\n          const configuration: ActorStaticConfiguration = {\r\n            textureUrl: '',\r\n            texture: tilemapItemData.texture,\r\n            isCollidable: false,\r\n            isTickable: true,\r\n            isResizable: false\r\n          }\r\n\r\n          return new ChestTilemapObject(this._app, configuration);\r\n        }\r\n        else if (tilemapItemData.type == (CoinTilemapObject).name) {\r\n          return new CoinTilemapObject(this._app);\r\n\r\n        }\r\n\r\n\r\n\r\n        CoinTilemapObject\r\n        return new PIXI.Sprite(tilemapItemData.texture);\r\n\r\n      default:\r\n        throw new Error('Invalid layer type');\r\n    }\r\n  }\r\n}","//PIXI\r\nimport * as PIXI from 'pixi.js';\r\nimport Stats from 'stats.js';\r\nimport { Actions, Interpolations } from 'pixi-actions';\r\n\r\n//CORE\r\n\r\n//TREASURE HUNTER GAME\r\nimport { InstructionsSuperText } from '@src/scripts/client/projects/treasureHunter2D/ui/InstructionsSuperText';\r\nimport { ScoreSuperText } from '@src/scripts/client/projects/treasureHunter2D/ui/ScoreSuperText';\r\nimport { Player } from '@src/scripts/client/projects/treasureHunter2D/Player';\r\nimport { TilemapItemFactoryCustom } from './projects/treasureHunter2D/tileMap/TilemapItemFactoryCustom';\r\n\r\n\r\n\r\nconsole.log(\"setup socket.io client\");\r\nimport { io } from 'socket.io-client';\r\nimport { GixiApplication, GixiApplicationConfiguration } from './gixi/GixiApplication';\r\nimport { Tilemap } from './gixi/tilemap/Tilemap';\r\nconst socket = io('http://localhost:3001'); // Adjust the URL if necessary\r\n\r\nsocket.on('connect', () => {\r\n  console.log('Connected to server');\r\n\r\n  // Send a message to the server\r\n  socket.emit('message', 'Hello from client!');\r\n\r\n  // Listen for messages from the server\r\n  socket.on('message', (msg: string) => {\r\n    console.log('Message from server:', msg);\r\n  });\r\n\r\n  socket.on('disconnect', () => {\r\n    console.log('Disconnected from server');\r\n  });\r\n});\r\n\r\n/////////////////////////////\r\n// PIXI Configuration\r\n/////////////////////////////\r\nPIXI.AbstractRenderer.defaultOptions.roundPixels = true; // Crisp pixels\r\nPIXI.AbstractRenderer.defaultOptions.resolution = window.devicePixelRatio || 1; // Crisp pixels\r\n\r\n\r\n/////////////////////////////\r\n// Project Configuration\r\n/////////////////////////////\r\nconst gixiAppData: any = {\r\n  LogoImageUrl: 'assets/images/pixijs-logo-32x32.png',\r\n  TilemapDataUrl: 'assets/tilemaps/TreasureHunter2D.tmj',\r\n  PlayerTextureUrl: 'assets/images/player-default-sprite.png',\r\n  CoinsCollected: 0,\r\n  CoinsMax: 5,\r\n  ScreenUIMarginX: 10,\r\n  ScreenUIMarginY: 10,\r\n};\r\n\r\nlet player: Player;\r\nlet tempWorldOrigin: PIXI.Graphics;\r\n\r\n\r\n/////////////////////////////\r\n// Create App\r\n/////////////////////////////\r\nconst gixiAppConfiguration: GixiApplicationConfiguration = {\r\n\r\n  //Show all values here, for readability\r\n  //Or simply use GixiApplicationConfigurationDefault\r\n  widthInitial: 1920,\r\n  heightInitial: 1080,\r\n  minFPS: 1,\r\n  maxFPS: 240,\r\n  backgroundColor: 0x87867a,\r\n  data: gixiAppData\r\n}\r\nconst gixiAppConst = new GixiApplication('pixi-application-canvas', gixiAppConfiguration);\r\n\r\n\r\n\r\n\r\n/////////////////////////////\r\n// Setup Stats\r\n/////////////////////////////\r\nconst stats = new Stats();\r\nstats.showPanel(0);\r\nstats.dom.className = 'stats-panel';\r\ndocument.body.appendChild(stats.dom);\r\n\r\n\r\n/////////////////////////////\r\n// Setup Pixi JS DevTools\r\n// https://bit.ly/pixijs-devtools\r\n/////////////////////////////\r\n(globalThis as any).__PIXI_APP__ = gixiAppConst.app;\r\n\r\n\r\n/////////////////////////////\r\n// Handle App Initialize\r\n/////////////////////////////\r\nasync function onInitializeCompleted(gixiApp: GixiApplication) {\r\n\r\n  /////////////////////////////\r\n  // Create Tilemap\r\n  /////////////////////////////\r\n  const tilemap = new Tilemap(\r\n    gixiApp,\r\n    gixiAppData.TilemapDataUrl,\r\n    new TilemapItemFactoryCustom(gixiApp)\r\n  );\r\n\r\n  //Initialize first, so width and height are available\r\n  await tilemap.initializeAsync();\r\n  gixiApp.addToViewport(tilemap);\r\n  tilemap.x = gixiApp.getScreenCenterpoint().x - tilemap.width / 2;\r\n  tilemap.y = gixiApp.getScreenCenterpoint().y - tilemap.height / 2;\r\n\r\n  /////////////////////////////\r\n  // Temp:  World centerpoint\r\n  //        For reference\r\n  /////////////////////////////\r\n  tempWorldOrigin = new PIXI.Graphics()\r\n    .rect(0, 0, 32, 32)\r\n    .fill({\r\n      color: 0xffffff,\r\n      alpha: 0.5\r\n    });\r\n  gixiApp.addToViewport(tempWorldOrigin);\r\n  tempWorldOrigin.x = gixiApp.getScreenCenterpoint().x;\r\n  tempWorldOrigin.y = gixiApp.getScreenCenterpoint().y;\r\n\r\n\r\n  /////////////////////////////\r\n  // Create Player\r\n  /////////////////////////////\r\n  player = new Player(gixiApp, tilemap, { textureUrl: gixiAppData.PlayerTextureUrl as string });\r\n  gixiApp.addToViewport(player);\r\n  player.x = gixiApp.getScreenCenterpoint().x;\r\n  player.y = gixiApp.getScreenCenterpoint().y;\r\n\r\n\r\n\r\n  /////////////////////////////\r\n  // Setup Camera\r\n  /////////////////////////////\r\n  gixiApp.viewport.follow(player, {\r\n\r\n    //TODO: find the settings that work VERY smoothly at fullsceen\r\n    //its close, now.  But not perfect\r\n    speed: 1,\r\n    acceleration: 1,\r\n    radius: 20\r\n  });\r\n\r\n  // Optional: Input for camera\r\n  // app.viewport\r\n  //   .drag()\r\n  //   .pinch()\r\n  //   .wheel()\r\n  //   .decelerate();\r\n\r\n\r\n  /////////////////////////////\r\n  // Create Text\r\n  /////////////////////////////\r\n  const instructionsText: InstructionsSuperText =\r\n    new InstructionsSuperText(\r\n      gixiApp,\r\n      'SEE INSIDE CLASS',\r\n      30,\r\n      \"left\");\r\n  gixiApp.addToStage(instructionsText);\r\n\r\n  const scoreText: ScoreSuperText =\r\n    new ScoreSuperText(\r\n      gixiApp,\r\n      `Coins ${gixiApp.configuration.data?.CoinsCollected}/${gixiApp.configuration.data?.CoinsMax}`,\r\n      30,\r\n      \"right\");\r\n  gixiApp.addToStage(scoreText);\r\n\r\n  /////////////////////////////\r\n  // Update Systems Every Frame\r\n  /////////////////////////////\r\n  gixiApp.app.ticker.add((ticker) => {\r\n\r\n    stats.begin();\r\n    Actions.tick(ticker.deltaTime);\r\n    stats.end();\r\n  });\r\n\r\n\r\n}\r\n\r\n\r\n/////////////////////////////\r\n// Handle App Error\r\n/////////////////////////////\r\nfunction onInitializeError(error: Error) {\r\n  console.error(`PIXI.Application.init() failed. error = ${error}`);\r\n}\r\n\r\n\r\n/////////////////////////////\r\n// Initialize App\r\n/////////////////////////////\r\ngixiAppConst.addListener(GixiApplication.EVENT_INITIALIZE_COMPLETE, onInitializeCompleted);\r\ngixiAppConst.addListener(GixiApplication.EVENT_INITIALIZE_ERROR, onInitializeError);\r\n\r\n\r\n(async () => {\r\n  await gixiAppConst.initializeAsync();\r\n})();\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + {\"142\":\"6f46ecf1ff524851e045\",\"151\":\"061e9e13269897ecbd38\",\"162\":\"1046d09f72d0e3563e18\",\"421\":\"796907ff150e4ce2813a\",\"440\":\"d6ee605c48ad4a368abe\",\"751\":\"1c7e18eea6655a094d79\",\"852\":\"15740e5671b245293199\"}[chunkId] + \".bundle.js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk\"] = self[\"webpackChunk\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [433], () => (__webpack_require__(7661)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","inProgress","SystemBase","_app","constructor","app","this","ActorContainerConfigurationDefault","isCollidable","isTickable","isResizable","ActorContainer","isInitialized","_isInitialized","configuration","_configuration","_isCollidable","isChild","parent","_isDestroyed","super","ticker","add","onTickInternal","bind","addListener","GixiApplication","EVENT_RESIZE","onResizeInternal","requireIsInitialized","Error","initializeAsync","destroy","options","remove","removeListener","onAdded","onRemoved","onResize","onTick","collisions","systems","collisionSystem","getCollisions","length","onCollision","CollisionSystem","me","getCollidingSpritesFromChildren","stage","children","viewport","isCollidingWith","other","bounds1","getBounds","bounds2","x","width","y","height","filter","child","InputSystem","_keyStateDictionary","Map","window","addEventListener","onKeyDown","onKeyUp","isKeyDown","key","getKeyStateByKey","isDown","isKeyDownThisFrame","keyState","isDownThisFrame","keyboardEvent","get","undefined","newKeyState","KeyState","set","update","forEach","AudioSystem","_audioContextResumed","setupAudioContextResume","resumeAudioContext","audioContext","context","state","resume","then","console","log","catch","err","error","once","play","fileName","playAsync","warn","from","url","preload","autoPlay","isLoaded","Promise","resolve","setTimeout","speed","volume","GixiApplicationConfigurationDefault","widthInitial","heightInitial","minFPS","maxFPS","backgroundColor","data","Systems","inputSystem","audioSystem","EventEmitter","static","isFullscreen","_isFullscreen","value","elem","document","getElementById","canvas","id","requestFullscreen","fullscreenEnabled","exitFullscreen","_systems","_canvasId","canvasId","setMaxListeners","init","resizeTo","eventMode","eventFeatures","move","globalMove","click","wheel","GetRendererTypeAsString","renderer","type","screenWidth","screen","screenHeight","worldWidth","worldHeight","events","center","getScreenCenterpoint","deltaMS","emit","EVENT_INITIALIZE_COMPLETE","setupResizeHandling","addToStage","label","EVENT_INITIALIZE_ERROR","rendererType","WEBGL","WEBGPU","addToViewport","obj","addChild","SuperText","resize","removeFromViewport","removeChild","removeFromStage","resizeAfterDelay","getScreenScaleCurrent","message","fontSize","align","text","style","fontFamily","fill","resolution","name","InstructionsSuperText","ScreenUIMarginX","ScreenUIMarginY","r1","Math","round","r2","ScoreSuperText","MultiAnimatedSprite","_animationNameToAnimatedSprite","_textureImageURL","_spriteSheetURL","newTextureImageURL","newSpriteSheetURL","initializeAndReparent","spriteSheetAtlasResponse","fetch","spriteSheetAtlas","json","load","texture","spriteSheet","parse","size","meta","w","h","animationName","textures","Object","entries","animations","setSize","anchor","animationSpeed","animatedSprite","ActorAnimatedConfigurationDefault","ActorAnimated","_multiAnimatedSprite","CoinTilemapObject","whatever","isCollected","destroyAfterAnimation","filters","blur","alpha","quality","sequence","delay","runFunc","parallel","moveTo","smooth2","scaleTo","collect","GixiUtility","textureIsNullOrEmpty","EMPTY","stringIsNullOrEmpty","ActorStaticConfigurationDefault","textureUrl","ActorStatic","_sprite","ChestTilemapObject","rotation","deltaTime","rotateTo","PlayerConfigurationDefault","Player","_Tilemap","Tilemap","on","event","position","isCollisionWithTilemap","isCollision","moveVector","collision","TilemapCollisionSystem","collisionMap","createCollisionMap","tilemapData","layers","tilesets","Array","collisionProperties","tileset","tiles","tile","properties","property","firstgid","layer","tileIndex","localPos","globalPos","toGlobal","tileWidth","tilewidth","tileHeight","tileheight","startX","floor","endX","ceil","startY","endY","tilemapGlobalPos","tileY","tileX","LayerType","_tilemapData","_tilemapDataUrl","_TilemapItemFactory","_TilemapCollisionSystem","tilemapDataUrl","TilemapItemFactory","isRenderGroup","interactive","interactiveChildren","scale","endsWith","response","e","tilesetPromises","map","imageUrl","image","replace","all","TileLayer","processTileLayer","ObjectGroup","objects","processObjectLayer","row","column","getTilesetForTile","localTileIndex","columns","rectangle","tileTexture","source","frame","tilemapItemData","layerType","getTileType","sprite","createTilemapItem","toString","padStart","object","gid","typeResult","typePrimary","typeBackup","unsetValue","playerX","playerY","playerWidth","playerHeight","i","removeChildAt","find","t","TilemapItemFactoryCustom","socket","io","msg","defaultOptions","roundPixels","devicePixelRatio","gixiAppData","LogoImageUrl","TilemapDataUrl","PlayerTextureUrl","CoinsCollected","CoinsMax","player","tempWorldOrigin","gixiAppConst","stats","showPanel","dom","className","body","appendChild","globalThis","__PIXI_APP__","async","gixiApp","tilemap","rect","color","follow","acceleration","radius","instructionsText","scoreText","begin","tick","end","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","keys","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","f","chunkId","reduce","promises","u","miniCssF","g","Function","prop","prototype","hasOwnProperty","l","done","push","script","needAttach","scripts","getElementsByTagName","s","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","onerror","onload","clearTimeout","doneFns","parentNode","target","head","Symbol","toStringTag","scriptUrl","importScripts","location","currentScript","test","p","installedChunks","installedChunkData","promise","reject","errorType","realSrc","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}