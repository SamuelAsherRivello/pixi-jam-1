{"version":3,"file":"main.7258cb9c83911661056f.bundle.js","mappings":"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","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///webpack/runtime/load script","webpack:///./src/scripts/client/core/super/SuperText.ts","webpack:///./src/scripts/client/gixi/systems/base/SystemBase.ts","webpack:///./src/scripts/client/gixi/GixiUtility.ts","webpack:///./src/scripts/client/gixi/systems/CollisionSystem.ts","webpack:///./src/scripts/client/gixi/ActorContainer.ts","webpack:///./src/scripts/client/gixi/systems/InputSystem.ts","webpack:///./src/scripts/client/gixi/systems/AudioSystem.ts","webpack:///./src/scripts/client/gixi/systems/MultiplayerSystem.ts","webpack:///./src/scripts/client/gixi/GixiApplication.ts","webpack:///./src/scripts/client/gixi/tilemap/TilemapCollisionSystem.ts","webpack:///./src/scripts/client/gixi/tilemap/Tilemap.ts","webpack:///./src/scripts/client/projects/treasureHunter2D/ui/InstructionsSuperText.ts","webpack:///./src/scripts/client/projects/treasureHunter2D/ui/ScoreSuperText.ts","webpack:///./src/scripts/client/gixi/ActorAnimated.ts","webpack:///./src/scripts/client/projects/treasureHunter2D/tileMap/tileMapObjects/CoinTilemapObject.ts","webpack:///./src/scripts/client/gixi/ActorStatic.ts","webpack:///./src/scripts/client/projects/treasureHunter2D/tileMap/tileMapObjects/ChestTilemapObject.ts","webpack:///./src/scripts/client/projects/treasureHunter2D/Player.ts","webpack:///./src/scripts/client/projects/treasureHunter2D/tileMap/TilemapItemFactoryCustom.ts","webpack:///./src/scripts/client/index.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/ensure chunk","webpack:///webpack/runtime/get javascript chunk filename","webpack:///webpack/runtime/get mini-css chunk filename","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/runtime/publicPath","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var inProgress = {};\n// data-webpack is not used as build has no uniqueName\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","import * as PIXI from 'pixi.js';\r\nimport { GixiApplication } from '../../gixi/GixiApplication';\r\n\r\n/**\r\n * Subclass PIXI.Text if you want basic text functionality.\r\n * \r\n * Subclass SuperText if you ALSO want onResize and onTick events\r\n */\r\nexport class SuperText extends PIXI.Text {\r\n\r\n    // Fields ---------------------------------------\r\n    protected _app: GixiApplication;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication, message: string, fontSize: number = 8, align: PIXI.TextStyleAlign = 'left') {\r\n\r\n\r\n        const textStyle = new PIXI.TextStyle({\r\n            fontFamily: 'Arial',\r\n            fontSize: fontSize,\r\n            fill: '#ffffff',\r\n\r\n            align: align\r\n        });\r\n\r\n        const textOptions: PIXI.TextOptions = {\r\n            text: message,\r\n            style: textStyle,\r\n            resolution: 2 // Ensure text is sharp\r\n        };\r\n\r\n        super(textOptions);\r\n\r\n        this.label = (SuperText).name;\r\n\r\n        this._app = app;\r\n\r\n        // Tick\r\n        app.app.ticker.add(this.onTick.bind(this));\r\n\r\n        // Resize\r\n        this._app.addListener(GixiApplication.EVENT_RESIZE, this.onResize.bind(this));\r\n        this.onResize(this._app);\r\n\r\n    }\r\n\r\n    // Initialization -------------------------------\r\n    public isChild(): boolean {\r\n        return parent !== null;\r\n    }\r\n\r\n    // Event Handlers -------------------------------\r\n    public onAdded() {\r\n        // Empty implementation to be overridden\r\n    }\r\n\r\n    public onRemoved() {\r\n        // Empty implementation to be overridden\r\n    }\r\n\r\n    public onResize(app: GixiApplication): void {\r\n        // Empty implementation to be overridden\r\n    }\r\n\r\n    public onTick(ticker: PIXI.Ticker): void {\r\n        // Empty implementation to be overridden\r\n    }\r\n}\r\n","import { GixiApplication } from \"../../GixiApplication\";\r\nimport { IInitializableAsync } from \"../../interfaces/IInitializeAsync\";\r\n\r\n/**\r\n * \r\n */\r\nexport class SystemBase implements IInitializableAsync {\r\n\r\n    // Properties -----------------------------------\r\n    get isInitialized(): boolean {\r\n        return this._isInitialized;\r\n    }\r\n\r\n    // Fields ---------------------------------------\r\n    protected _app: GixiApplication;\r\n    protected _isInitialized: boolean = false;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication) {\r\n        this._app = app;\r\n    }\r\n\r\n    public async initializeAsync(): Promise<any> {\r\n        //console.log(\"Method must be overriden\");\r\n    }\r\n\r\n    public requireIsInitialized() {\r\n        if (!this.isInitialized) {\r\n            throw new Error('Systems are not initialized.');\r\n        }\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n}","import * as PIXI from 'pixi.js';\r\nimport { ICollisionSystemBody } from './interfaces/ICollisionSystemBody';\r\n\r\n/**\r\n * Common functionality\r\n */\r\nexport class GixiUtility {\r\n\r\n  // Properties -----------------------------------\r\n\r\n  // Fields ---------------------------------------\r\n\r\n  // Methods --------------------------------------\r\n  public static textureIsNullOrEmpty(texture: PIXI.Texture): boolean {\r\n    return texture === null || texture === PIXI.Texture.EMPTY;\r\n  }\r\n\r\n  public static stringIsNullOrEmpty(value: string): boolean {\r\n    return value === null || value === '';\r\n  }\r\n\r\n  public static hasInterface<T>(obj: any, propertyChecker: InterfaceLookup<T>): obj is T {\r\n    const properties = Object.keys(propertyChecker) as (keyof T)[];\r\n    return properties.every(prop => prop in obj);\r\n  }\r\n}\r\n\r\n\r\n//HACK: You can't check interfaces at rutnime in typescript so \r\n//we do a lookup on a manual set of properties that we expect to exist\r\nexport const ICollisionSystemBodyInterfaceLookup: InterfaceLookup<ICollisionSystemBody> = {\r\n  canCollisionBeChecked: true,\r\n};\r\n\r\ntype InterfaceLookup<T> = {\r\n  [P in keyof T]?: boolean;\r\n};","import { GixiApplication } from \"../GixiApplication\";\r\nimport * as PIXI from 'pixi.js';\r\nimport { SystemBase } from \"./base/SystemBase\";\r\nimport { ActorContainer } from \"../ActorContainer\";\r\nimport { Viewport } from \"pixi-viewport\";\r\nimport { ICollisionSystemBody } from '../interfaces/ICollisionSystemBody';\r\nimport { GixiUtility, ICollisionSystemBodyInterfaceLookup } from \"../GixiUtility\";\r\n\r\n/**\r\n * CollisionSystem is responsible for detecting collisions between PIXI containers.\r\n * It extends the SystemBase class and provides methods to get colliding sprites.\r\n */\r\nexport class CollisionSystem extends SystemBase {\r\n\r\n    // Properties -------------------------------\r\n\r\n    // CHEAP TO CALL\r\n    public stageContainers(): PIXI.Container[] {\r\n        return this._stageContainers;\r\n    }\r\n\r\n    // EXPENSIVE TO CALL\r\n    private stageContainersRefresh() {\r\n        this._stageContainers = this.stageContainersRefreshRecursive(this._app.app.stage);\r\n    }\r\n\r\n    // Fields -------------------------------\r\n    private _stageContainers!: PIXI.Container[];\r\n\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication) {\r\n        super(app);\r\n    }\r\n\r\n    public override async initializeAsync(): Promise<any> {\r\n        if (this.isInitialized) {\r\n            return;\r\n        }\r\n\r\n        // Local\r\n        this._isInitialized = true;\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n\r\n    /**\r\n     * Get all sprites that are colliding with the given sprite.\r\n     * @param me - The sprite to check collisions for.\r\n     * @returns An array of sprites that are colliding with the given sprite.\r\n     */\r\n    public stageContainersCollidingWith(me: PIXI.Container): PIXI.Container[] {\r\n\r\n        //TODO: Call this line much more rarely\r\n        //FOr example have the app call this only when addstage/removestage/addviewport/removeviewport\r\n        //or perhaps there is stage listener in pixi?\r\n        this.stageContainersRefresh();\r\n\r\n        //\r\n        const collisions: PIXI.Container[] =\r\n            this.getCollisionsInternal(me, this._stageContainers);\r\n\r\n        return collisions;\r\n    }\r\n\r\n    /**\r\n     * Recursively get all children of a container, including nested children.\r\n     * @param container - The container to get children from.\r\n     * @returns An array of all containers.\r\n     */\r\n    private stageContainersRefreshRecursive(container: PIXI.Container): PIXI.Container[] {\r\n        const result: PIXI.Container[] = [];\r\n        container.children.forEach(child => {\r\n            result.push(child as PIXI.Container);\r\n            if (child instanceof PIXI.Container && child.children.length > 0) {\r\n                result.push(...this.stageContainersRefreshRecursive(child));\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // Internal Methods -----------------------------\r\n\r\n    /**\r\n     * Get all sprites from the given children that are colliding with the given sprite.\r\n     * @param me - The sprite to check collisions for.\r\n     * @param children - The children to check collisions against.\r\n     * @returns An array of sprites that are colliding with the given sprite.\r\n     */\r\n    private getCollisionsInternal(me: PIXI.Container, children: PIXI.Container[]): PIXI.Container[] {\r\n        return children.filter((child) => {\r\n\r\n            const hasICollisionSystemBody = GixiUtility.hasInterface<ICollisionSystemBody>(child, ICollisionSystemBodyInterfaceLookup);\r\n\r\n            return (\r\n                child !== me &&\r\n                hasICollisionSystemBody &&\r\n                child.canCollisionBeChecked &&\r\n                this.isCollidingWith(me, child as PIXI.Container)\r\n            );\r\n        }) as PIXI.Container[];\r\n    }\r\n\r\n\r\n    /**\r\n * Check if the given sprite is colliding with another sprite.\r\n * @param me - The sprite to check collisions for.\r\n * @param other - The other sprite to check collisions against.\r\n * @returns True if the sprites are colliding, false otherwise.\r\n */\r\n    private isCollidingWith(me: PIXI.Container, other: PIXI.Container): boolean {\r\n        const bounds1 = me.getBounds();\r\n        const bounds2 = other.getBounds();\r\n\r\n        return (\r\n            bounds1.x < bounds2.x + bounds2.width &&\r\n            bounds1.x + bounds1.width > bounds2.x &&\r\n            bounds1.y < bounds2.y + bounds2.height &&\r\n            bounds1.y + bounds2.height > bounds2.y\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n","import * as PIXI from 'pixi.js';\r\nimport { IInitializableAsync } from './interfaces/IInitializeAsync';\r\nimport { GixiApplication } from './GixiApplication';\r\nimport { IActor } from './interfaces/IActor';\r\nimport { IActorConfiguration } from './interfaces/IActorConfiguration';\r\n\r\n\r\n/**\r\n* Configuration\r\n*/\r\nexport interface ActorContainerConfiguration extends IActorConfiguration {\r\n\r\n}\r\n\r\nconst ActorContainerConfigurationDefault: ActorContainerConfiguration = {\r\n  canCollisionCheck: true,\r\n  isTickable: true,\r\n  isResizable: true\r\n}\r\n\r\n\r\n\r\nexport class ActorContainer extends PIXI.Container implements IInitializableAsync, IActor {\r\n\r\n  // Properties -----------------------------------\r\n  public get isInitialized(): boolean {\r\n    return this._isInitialized;\r\n  }\r\n\r\n  public get configuration(): ActorContainerConfiguration {\r\n    return this._configuration;\r\n  }\r\n\r\n  public get canCollisionCheck(): boolean {\r\n    return this._canCollisionCheck;\r\n  }\r\n\r\n  public isChild(): boolean {\r\n    return this.parent !== null;\r\n  }\r\n\r\n  // Fields ---------------------------------------\r\n  private _isDestroyed: boolean = false;\r\n  protected _configuration: ActorContainerConfiguration;\r\n  protected _isInitialized: boolean = false;\r\n  protected _canCollisionCheck: boolean = true;\r\n  protected _app: GixiApplication;\r\n\r\n\r\n\r\n  // Initialization -------------------------------\r\n  constructor(app: GixiApplication,\r\n    configuration?: Partial<ActorContainerConfiguration>) {\r\n\r\n    super();\r\n    this._configuration = { ...ActorContainerConfigurationDefault, ...configuration };\r\n    this._app = app;\r\n\r\n    // Tick\r\n    if (this.configuration.isTickable) {\r\n      this._app.app.ticker.add(this.onTickInternal.bind(this));\r\n    }\r\n\r\n    // Resize\r\n    if (this.configuration.isResizable) {\r\n      this._app.addListener(GixiApplication.EVENT_RESIZE, this.onResizeInternal.bind(this));\r\n    }\r\n\r\n    // DO NOT CALL initializeAsync here. It is called by the child\r\n  }\r\n\r\n  public requireIsInitialized() {\r\n\r\n    if (!this.isInitialized) {\r\n      throw new Error('requireIsInitialized.');\r\n    }\r\n  }\r\n\r\n  public async initializeAsync(): Promise<any> {\r\n\r\n    if (this._isInitialized) {\r\n      return;\r\n    }\r\n\r\n    this._isInitialized = true;\r\n  }\r\n\r\n\r\n  // Override PIXI.Sprite's destroy method\r\n  public override destroy(options?: PIXI.DestroyOptions | boolean): void {\r\n\r\n    this.requireIsInitialized();\r\n\r\n    if (this._isDestroyed) return;\r\n\r\n    // Clean up\r\n    if (this.configuration.isTickable) {\r\n      this._app.app.ticker.remove(this.onTickInternal.bind(this));\r\n    }\r\n    if (this.configuration.isResizable) {\r\n      this._app.removeListener(GixiApplication.EVENT_RESIZE, this.onResizeInternal.bind(this));\r\n    }\r\n    this._isDestroyed = true;\r\n    super.destroy(options);\r\n  }\r\n\r\n  // Event Handlers -------------------------------\r\n  public onAdded() {\r\n    // Empty implementation to be overridden\r\n  }\r\n\r\n  public onRemoved() {\r\n    // Empty implementation to be overridden\r\n  }\r\n\r\n  public onResize(app: GixiApplication): void {\r\n    // Empty implementation to be overridden\r\n  }\r\n\r\n  public onTick(ticker: PIXI.Ticker): void {\r\n\r\n    // Empty implementation to be overridden\r\n    if (!this.canCollisionCheck) {\r\n      return;\r\n    }\r\n\r\n    const collisions = this._app.systems.collisionSystem.stageContainersCollidingWith(this);\r\n\r\n    if (collisions.length) {\r\n      this.onCollision(collisions);\r\n    };\r\n\r\n  }\r\n\r\n  protected onCollision(collisions: PIXI.Container[]): void {\r\n    // Empty implementation to be overridden\r\n  }\r\n\r\n  //TODO: remove these internals???\r\n  private onTickInternal(ticker: PIXI.Ticker): void {\r\n    if (this._isDestroyed) return;\r\n    this.onTick(ticker);\r\n  }\r\n\r\n  private onResizeInternal(app: GixiApplication): void {\r\n    if (this._isDestroyed) return;\r\n    this.onResize(app);\r\n  }\r\n\r\n\r\n}","import { GixiApplication } from \"../GixiApplication\";\r\nimport { SystemBase } from \"./base/SystemBase\";\r\n\r\n/**\r\n * Handles keyboard input and maintains the state of keys.\r\n */\r\nexport class InputSystem extends SystemBase {\r\n\r\n    // Fields ---------------------------------------\r\n    private _keyStateDictionary: Map<string, KeyState>;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication) {\r\n        super(app);\r\n\r\n        //TODO: Move this and all systems to use IInitializeAsync and move this into that init\r\n        this._keyStateDictionary = new Map();\r\n        window.addEventListener('keydown', this.onKeyDown.bind(this));\r\n        window.addEventListener('keyup', this.onKeyUp.bind(this));\r\n    }\r\n\r\n    public override async initializeAsync(): Promise<any> {\r\n\r\n        if (this.isInitialized) {\r\n            return;\r\n        }\r\n\r\n\r\n        //console.log(`${(InputSystem).name}.initializeAsync()`)\r\n\r\n        //Local\r\n        this._isInitialized = true;\r\n\r\n    }\r\n\r\n    // Methods ------------------------------\r\n    /**\r\n     * Checks if the specified key is currently pressed down.\r\n     * @param key - The key to check.\r\n     * @returns True if the key is down, otherwise false.\r\n     */\r\n    public isKeyDown(key: string): boolean {\r\n        let keyState: KeyState = this.getKeyStateByKey(key);\r\n        return keyState.isDown;\r\n    }\r\n\r\n    /**\r\n     * Checks if the specified key was pressed down this frame.\r\n     * @param key - The key to check.\r\n     * @returns True if the key is down this frame, otherwise false.\r\n     */\r\n    public isKeyDownThisFrame(key: string): boolean {\r\n        let keyState: KeyState = this.getKeyStateByKey(key);\r\n\r\n        //NOTE: I tried a few ways to capture **ONE** moment of true here\r\n        //FInally this one works - srivello\r\n        let isDownThisFrame = keyState.isDownThisFrame;\r\n        keyState.isDownThisFrame = false;\r\n        return isDownThisFrame;\r\n    }\r\n\r\n\r\n    /**\r\n     * Handles the key down event and updates the key state.\r\n     * @param keyboardEvent - The keyboard event.\r\n     */\r\n    private onKeyDown(keyboardEvent: KeyboardEvent): void {\r\n        let keyState: KeyState = this.getKeyStateByKey(keyboardEvent.key);\r\n        if (!keyState.isDown) {\r\n            keyState.isDown = true;\r\n            keyState.isDownThisFrame = true;\r\n        }\r\n        else {\r\n            keyState.isDownThisFrame = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the key up event and updates the key state.\r\n     * @param keyboardEvent - The keyboard event.\r\n     */\r\n    private onKeyUp(keyboardEvent: KeyboardEvent): void {\r\n        let keyState: KeyState = this.getKeyStateByKey(keyboardEvent.key);\r\n        keyState.isDown = false;\r\n        keyState.isDownThisFrame = false;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the key state for the specified key. If the key does not exist, a new KeyState is created and returned.\r\n     * @param key - The key to retrieve the state for.\r\n     * @returns The KeyState for the specified key.\r\n     */\r\n    private getKeyStateByKey(key: string): KeyState {\r\n        let keyState: KeyState | undefined = this._keyStateDictionary.get(key);\r\n        if (keyState == undefined) {\r\n            let newKeyState: KeyState = new KeyState();\r\n            this._keyStateDictionary.set(key, newKeyState);\r\n            return newKeyState;\r\n        }\r\n        return keyState;\r\n    }\r\n\r\n    /**\r\n     * Updates the state of keys for the next frame.\r\n     */\r\n    public update() {\r\n        this._keyStateDictionary.forEach((keyState) => {\r\n            keyState.isDownThisFrame = false;\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the state of a key.\r\n */\r\nclass KeyState {\r\n    constructor() {\r\n        this.isDown = false;\r\n        this.isDownThisFrame = false;\r\n    }\r\n\r\n    public isDown: boolean;\r\n    public isDownThisFrame: boolean;\r\n}\r\n","import { IMediaInstance, Sound, sound } from \"@pixi/sound\";\r\nimport { GixiApplication } from \"../GixiApplication\";\r\nimport { SystemBase } from \"./base/SystemBase\";\r\n\r\n/**\r\n * Handles keyboard input and maintains the state of keys.\r\n */\r\nexport class AudioSystem extends SystemBase {\r\n\r\n    // Properties -----------------------------------\r\n\r\n    // Fields ---------------------------------------\r\n    private _audioContextResumed: boolean = false;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication) {\r\n        super(app);\r\n\r\n    }\r\n\r\n    override async initializeAsync(): Promise<any> {\r\n\r\n        if (this.isInitialized) {\r\n            return;\r\n        }\r\n\r\n        //console.log(`${(AudioSystem).name}.initializeAsync()`)\r\n        //Local\r\n        this._isInitialized = true;\r\n        this.setupAudioContextResume();\r\n\r\n    }\r\n\r\n    // Methods ------------------------------\r\n\r\n    // Set up the audio context to resume after a user gesture\r\n    private setupAudioContextResume() {\r\n        const resumeAudioContext = () => {\r\n            if (!this._audioContextResumed) {\r\n                const audioContext = sound.context.audioContext;\r\n                if (audioContext.state === 'suspended') {\r\n                    audioContext.resume().then(() => {\r\n                        this._audioContextResumed = true;\r\n                        console.log('Audio context resumed');\r\n                    }).catch((err) => {\r\n                        console.error('Failed to resume audio context:', err);\r\n                    });\r\n                } else {\r\n                    this._audioContextResumed = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        // Listen for any user interaction\r\n        window.addEventListener('click', resumeAudioContext, { once: true });\r\n        window.addEventListener('touchstart', resumeAudioContext, { once: true });\r\n        window.addEventListener('keydown', resumeAudioContext, { once: true });\r\n    }\r\n\r\n    /**\r\n     * Play a sound file.\r\n     * @param fileName \r\n     */\r\n    public async play(fileName: string) {\r\n        this.playAsync(fileName);\r\n    }\r\n\r\n    /**\r\n     * Play a sound file.\r\n     * @param fileName \r\n     */\r\n    public async playAsync(fileName: string) {\r\n        if (!this._audioContextResumed) {\r\n            console.warn('Audio context not resumed yet. Cannot play sound.');\r\n            return;\r\n        }\r\n\r\n        // Play the sound when needed\r\n        let x: Sound = Sound.from({\r\n            url: fileName,\r\n            preload: true,\r\n            autoPlay: false,\r\n        });\r\n\r\n        while (!x.isLoaded) {\r\n            await new Promise(resolve => setTimeout(resolve, 100));\r\n        }\r\n\r\n        x.speed = 1;\r\n        x.volume = 1;\r\n        x.play();\r\n    }\r\n}\r\n","import { GixiApplication } from \"../GixiApplication\";\r\nimport { SystemBase } from \"./base/SystemBase\";\r\nimport { io } from 'socket.io-client';\r\n\r\n\r\n/**\r\n * Handles keyboard input and maintains the state of keys.\r\n */\r\nexport class MultiplayerSystem extends SystemBase {\r\n\r\n    // Fields ---------------------------------------\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication) {\r\n        super(app);\r\n\r\n    }\r\n\r\n    public override async initializeAsync(): Promise<any> {\r\n\r\n        if (this.isInitialized) {\r\n            return;\r\n        }\r\n\r\n        this.consoleLog(`initializeAsync()`)\r\n\r\n        //Local\r\n        this._isInitialized = true;\r\n\r\n\r\n        const socket = io('http://localhost:3001'); // Adjust the URL if necessary\r\n\r\n        socket.on('connect', () => {\r\n\r\n            this.consoleLog('Connected to server');\r\n\r\n            // Send a message to the server\r\n            socket.emit('message', 'Hello from client!');\r\n\r\n            // Listen for messages from the server\r\n            socket.on('message', (msg: string) => {\r\n                this.consoleLog('Message from server: ' + msg);\r\n            });\r\n\r\n            socket.on('disconnect', () => {\r\n                this.consoleLog('Disconnected from server');\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n    // Methods ------------------------------\r\n\r\n    private consoleLog(msg: string) {\r\n        console.log(`[${(MultiplayerSystem).name}] ${msg}`);\r\n    }\r\n}","import * as PIXI from 'pixi.js';\r\nimport { Viewport } from 'pixi-viewport';\r\nimport { EventEmitter } from 'events';\r\nimport { SuperText } from '../core/super/SuperText';\r\nimport { IInitializableAsync } from './interfaces/IInitializeAsync';\r\nimport { CollisionSystem } from './systems/CollisionSystem';\r\nimport { ActorContainer } from './ActorContainer';\r\nimport { InputSystem } from './systems/InputSystem';\r\nimport { AudioSystem } from './systems/AudioSystem';\r\nimport { MultiplayerSystem } from './systems/MultiplayerSystem';\r\n\r\n/**\r\n * Configuration\r\n */\r\nexport interface GixiApplicationConfiguration {\r\n  widthInitial: number;\r\n  heightInitial: number;\r\n  backgroundColor: number;\r\n  minFPS: number,\r\n  maxFPS: number,\r\n  data: { [key: string]: any };\r\n}\r\n\r\nconst GixiApplicationConfigurationDefault: GixiApplicationConfiguration = {\r\n  widthInitial: 1920,\r\n  heightInitial: 1080,\r\n  minFPS: 1,\r\n  maxFPS: 240,\r\n  backgroundColor: 0x1099bb,\r\n  data: {}\r\n}\r\n\r\n\r\nclass Systems implements IInitializableAsync {\r\n\r\n  // Properties -----------------------------------\r\n  get isInitialized(): boolean {\r\n    return this._isInitialized;\r\n  }\r\n\r\n  // Fields ---------------------------------------\r\n  public collisionSystem: CollisionSystem;\r\n  public inputSystem: InputSystem;\r\n  public audioSystem: AudioSystem;\r\n  public multiplayerSystem: MultiplayerSystem;\r\n  private _isInitialized: boolean = false;\r\n\r\n  // Initialization -------------------------------\r\n  constructor(app: GixiApplication) {\r\n    this.collisionSystem = new CollisionSystem(app);\r\n    this.inputSystem = new InputSystem(app);\r\n    this.audioSystem = new AudioSystem(app);\r\n    this.multiplayerSystem = new MultiplayerSystem(app);\r\n  }\r\n\r\n  public async initializeAsync(): Promise<any> {\r\n    return await Promise.all([\r\n      this.collisionSystem.initializeAsync(),\r\n      this.inputSystem.initializeAsync(),\r\n      this.audioSystem.initializeAsync(),\r\n      this.multiplayerSystem.initializeAsync()\r\n    ]);\r\n  }\r\n\r\n  requireIsInitialized() {\r\n    if (!this.isInitialized) {\r\n      throw new Error('Systems are not initialized.');\r\n    }\r\n  }\r\n\r\n  // Methods -------------------------------\r\n}\r\n\r\n\r\n/**\r\n * Wrapper class for initializing and managing a PixiJS application.\r\n */\r\nexport class GixiApplication extends EventEmitter implements IInitializableAsync {\r\n\r\n\r\n  // Constants ------------------------------------\r\n  public static readonly EVENT_INITIALIZE_COMPLETE: string = 'initializeComplete';\r\n  public static readonly EVENT_INITIALIZE_ERROR: string = 'initializeError';\r\n  public static readonly EVENT_RESIZE: string = 'resize';\r\n\r\n\r\n  // Properties -----------------------------------\r\n  public get isInitialized(): boolean {\r\n    return this._isInitialized;\r\n  }\r\n\r\n  public get isFullscreen(): boolean {\r\n    return this._isFullscreen;\r\n  }\r\n\r\n  public set isFullscreen(value: boolean) {\r\n\r\n    this._isFullscreen = value;\r\n\r\n    var elem = document.getElementById(this.app.canvas.id);\r\n\r\n    if (this._isFullscreen) {\r\n\r\n      if (elem?.requestFullscreen) {\r\n        elem?.requestFullscreen();\r\n      }\r\n\r\n    }\r\n    else {\r\n      document.fullscreenEnabled && document.exitFullscreen();\r\n    }\r\n  }\r\n\r\n  public get systems(): Systems {\r\n    return this._systems;\r\n  }\r\n\r\n  public get configuration(): GixiApplicationConfiguration {\r\n    return this._configuration;\r\n  }\r\n\r\n  // Fields ---------------------------------------\r\n  public app: PIXI.Application;\r\n  public viewport!: Viewport;\r\n  private _configuration: GixiApplicationConfiguration;\r\n  //\r\n  private _canvasId: string;\r\n  private _isInitialized = false;\r\n  private _systems: Systems;\r\n  private _isFullscreen: boolean = false;\r\n\r\n  // Initialization -------------------------------\r\n  constructor(\r\n    canvasId: string = 'pixi-application-canvas',\r\n    configuration?: Partial<GixiApplicationConfiguration>\r\n  ) {\r\n\r\n    /////////////////////////////\r\n    // Setup\r\n    /////////////////////////////\r\n    super();\r\n    this._canvasId = canvasId;\r\n    //\r\n    this.app = new PIXI.Application();\r\n    this._configuration = { ...GixiApplicationConfigurationDefault, ...configuration };\r\n    this._systems = new Systems(this);\r\n\r\n    // Every SuperSprite instance listens to App\r\n    // So this number must be >= to the number of SuperSprite instances\r\n    this.setMaxListeners(100);\r\n  }\r\n\r\n\r\n  /**\r\n   * Initializes the PixiJS application.\r\n   */\r\n  public async initializeAsync(): Promise<any> {\r\n    if (this._isInitialized) {\r\n      return;\r\n    }\r\n\r\n    this._isInitialized = true;\r\n\r\n    await this._systems.initializeAsync();\r\n\r\n    try {\r\n      await this.app.init({\r\n        canvas: document.getElementById(this._canvasId) as HTMLCanvasElement,\r\n        backgroundColor: this.configuration.backgroundColor,\r\n        width: this.configuration.widthInitial,\r\n        height: this.configuration.heightInitial,\r\n        resizeTo: window,\r\n\r\n        // EVENTS\r\n        eventMode: 'passive',\r\n        eventFeatures: {\r\n\r\n          /** what is this? */\r\n          move: true, //try false after I get swipe working\r\n\r\n          /** disables the global move events which can be very expensive in large scenes */\r\n          globalMove: true, //try false after I get swipe working\r\n          click: true,\r\n          wheel: false\r\n        }\r\n\r\n      });\r\n\r\n      this.app.ticker.minFPS = this.configuration.minFPS;\r\n      this.app.ticker.maxFPS = this.configuration.maxFPS;\r\n\r\n      console.log(`PIXI.Application.init() success! PixiJS v${PIXI.VERSION} with ${this.GetRendererTypeAsString(this.app.renderer.type)} `);\r\n\r\n      /////////////////////////////\r\n      // Create Viewport\r\n      /////////////////////////////\r\n      this.viewport = new Viewport({\r\n        screenWidth: this.app.screen.width,\r\n        screenHeight: this.app.screen.height,\r\n        worldWidth: 3000,   //not sure\r\n        worldHeight: 3000,  //not sure\r\n\r\n        // the interaction module is important for wheel to work properly \r\n        // when renderer.view is placed or scaled\r\n        events: this.app.renderer.events\r\n      });\r\n\r\n      this.viewport.center = this.getScreenCenterpoint();\r\n\r\n      this.app.ticker.add((ticker) => {\r\n        this.viewport.update(ticker.deltaMS);\r\n      });\r\n\r\n\r\n      /////////////////////////////\r\n      this.emit(GixiApplication.EVENT_INITIALIZE_COMPLETE, this);\r\n      this.setupResizeHandling();\r\n      this.addToStage(this.viewport);\r\n      this.viewport.label = \"Viewport\"; //TODO: Why \"Et Viewport\"?\r\n\r\n    } catch (error) {\r\n      console.log(`PIXI.Application.init() failed! PixiJS v${PIXI.VERSION} with ${this.GetRendererTypeAsString(this.app.renderer.type)} `);\r\n\r\n      this.emit(GixiApplication.EVENT_INITIALIZE_ERROR, error);\r\n    }\r\n\r\n\r\n  }\r\n\r\n  public requireIsInitialized() {\r\n\r\n    if (!this.isInitialized) {\r\n      throw new Error('requireIsInitialized.');\r\n    }\r\n  }\r\n\r\n\r\n  // Methods ------------------------------\r\n  private GetRendererTypeAsString(type: number) {\r\n    let rendererType: string = \"Unknown\";\r\n    if (this.app.renderer.type === PIXI.RendererType.WEBGL) {\r\n      rendererType = 'WebGL';\r\n    } else if (this.app.renderer.type === PIXI.RendererType.WEBGPU) {\r\n      rendererType = 'WebGPU';\r\n    }\r\n    return rendererType\r\n  }\r\n\r\n  // Add to camera-controlled scene tree\r\n  public addToViewport(obj: PIXI.Container | PIXI.Sprite | SuperText): any {\r\n\r\n    this.requireIsInitialized();\r\n\r\n    this.viewport.addChild(obj);\r\n\r\n    if (obj instanceof ActorContainer || obj instanceof SuperText) {\r\n      obj.onAdded();\r\n    }\r\n\r\n\r\n    this.resize();\r\n  }\r\n\r\n  // Remove from camera-controlled scene tree\r\n  public removeFromViewport(obj: PIXI.Container | PIXI.Sprite | SuperText): any {\r\n\r\n    this.requireIsInitialized();\r\n\r\n    this.viewport.removeChild(obj);\r\n\r\n    if (obj instanceof ActorContainer || obj instanceof SuperText) {\r\n      obj.onRemoved();\r\n    }\r\n\r\n    this.resize();\r\n  }\r\n\r\n  // Add to basic scene tree\r\n  public addToStage(obj: PIXI.Container | PIXI.Sprite | SuperText, parent?: PIXI.Sprite | ActorContainer): any {\r\n\r\n    this.requireIsInitialized();\r\n\r\n    if (parent == null) {\r\n      this.app.stage.addChild(obj);\r\n    } else {\r\n      parent.addChild(obj);\r\n    }\r\n\r\n    if (obj instanceof ActorContainer || obj instanceof SuperText) {\r\n      obj.onAdded();\r\n    }\r\n\r\n    this.resize();\r\n  };\r\n\r\n\r\n  // Remove from basic scene tree\r\n  public removeFromStage(obj: PIXI.Container | PIXI.Sprite | SuperText, parent?: PIXI.Sprite | ActorContainer): any {\r\n\r\n    this.requireIsInitialized();\r\n\r\n    if (parent == null) {\r\n      this.app.stage.removeChild(obj);\r\n    }\r\n    else {\r\n      parent.removeChild(obj);\r\n    }\r\n\r\n    if (obj instanceof ActorContainer || obj instanceof SuperText) {\r\n      obj.onRemoved();\r\n    }\r\n\r\n    this.resize();\r\n  }\r\n\r\n\r\n  public resize = () => {\r\n\r\n    this.emit(GixiApplication.EVENT_RESIZE, this);\r\n  };\r\n\r\n  private setupResizeHandling() {\r\n\r\n    const resizeAfterDelay = () => {\r\n      setTimeout(this.resize, 100);\r\n    };\r\n\r\n    /////////////////////////////\r\n    // Observe window resize\r\n    /////////////////////////////\r\n    window.addEventListener('resize', this.resize);               //now\r\n    window.addEventListener('resize', resizeAfterDelay);          //and after delay. Robust.\r\n    window.addEventListener('orientationchange', this.resize);\r\n    window.addEventListener('orientationchange', resizeAfterDelay);\r\n    this.resize(); // Initial resize\r\n  }\r\n\r\n  public getScreenScaleCurrent(): PIXI.Point {\r\n\r\n    return new PIXI.Point(\r\n      this.app.screen.width / this.configuration.widthInitial,\r\n      this.app.screen.height / this.configuration.heightInitial\r\n    );\r\n  }\r\n\r\n\r\n\r\n  getScreenCenterpoint() {\r\n\r\n    return new PIXI.Point(\r\n      this.app.screen.width / 2,\r\n      this.app.screen.height / 2)\r\n  }\r\n\r\n  // Event Handlers -------------------------------\r\n}","import * as PIXI from 'pixi.js';\r\nimport { GixiApplication } from '../GixiApplication';\r\nimport { TilemapData } from '..';\r\nimport { Tilemap } from './Tilemap';\r\n\r\nexport class TilemapCollisionSystem {\r\n    private collisionMap!: boolean[][];\r\n    private _app: GixiApplication;\r\n    private _Tilemap: Tilemap;\r\n\r\n    constructor(app: GixiApplication, Tilemap: Tilemap) {\r\n        this._app = app;\r\n        this._Tilemap = Tilemap;\r\n    }\r\n\r\n    public async initializeAsync() {\r\n        this.collisionMap = this.createCollisionMap(this._Tilemap.tilemapData);\r\n    }\r\n\r\n    private createCollisionMap(tilemapData: TilemapData): boolean[][] {\r\n        if (!tilemapData.layers || !tilemapData.tilesets) {\r\n            throw new Error('Invalid tilemapData: layers or tilesets are missing');\r\n        }\r\n\r\n        const layers = tilemapData.layers;\r\n        const tilesets = tilemapData.tilesets;\r\n\r\n        // Initialize collision map with the dimensions of the tilemap\r\n        const collisionMap: boolean[][] = Array.from({ length: tilemapData.height }, () =>\r\n            Array(tilemapData.width).fill(false)\r\n        );\r\n\r\n        // Build a lookup map for IsCollision property\r\n        const collisionProperties: { [key: number]: boolean } = {};\r\n        tilesets.forEach((tileset) => {\r\n            if (tileset.tiles) {\r\n                tileset.tiles.forEach((tile) => {\r\n                    if (tile.properties) {\r\n                        tile.properties.forEach((property) => {\r\n                            if (property.name === \"IsCollision\") {\r\n                                collisionProperties[tileset.firstgid + tile.id] = property.value;\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n            }\r\n        });\r\n\r\n        // Populate the collision map based on the tile data\r\n        layers.forEach((layer) => {\r\n            if (layer.type === \"tilelayer\" && layer.data) {\r\n                for (let y = 0; y < layer.height; y++) {\r\n                    for (let x = 0; x < layer.width; x++) {\r\n                        const tileIndex = layer.data[y * layer.width + x];\r\n                        if (collisionProperties[tileIndex]) {\r\n                            collisionMap[y][x] = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return collisionMap;\r\n    }\r\n\r\n    public isCollision(x: number, y: number, width: number, height: number): boolean {\r\n        const localPos = new PIXI.Point(x, y);\r\n        const globalPos = new PIXI.Point();\r\n        this._app.app.stage.toGlobal(localPos, globalPos);\r\n\r\n        const tileWidth = this._Tilemap.tilemapData.tilewidth;\r\n        const tileHeight = this._Tilemap.tilemapData.tileheight;\r\n\r\n        const startX = Math.floor((globalPos.x - this._Tilemap.x) / tileWidth);\r\n        const endX = Math.ceil((globalPos.x - this._Tilemap.x + width) / tileWidth);\r\n        const startY = Math.floor((globalPos.y - this._Tilemap.y) / tileHeight);\r\n        const endY = Math.ceil((globalPos.y - this._Tilemap.y + height) / tileHeight);\r\n\r\n        const localTileX = Math.floor(localPos.x / tileWidth);\r\n        const localTileY = Math.floor(localPos.y / tileHeight);\r\n        const globalTileX = Math.floor((globalPos.x - this._Tilemap.x) / tileWidth);\r\n        const globalTileY = Math.floor((globalPos.y - this._Tilemap.y) / tileHeight);\r\n\r\n        const tilemapGlobalPos = new PIXI.Point();\r\n        this._Tilemap.toGlobal(new PIXI.Point(0, 0), tilemapGlobalPos);\r\n\r\n        for (let tileY = startY; tileY < endY; tileY++) {\r\n            for (let tileX = startX; tileX < endX; tileX++) {\r\n                if (tileY >= 0 && tileY < this.collisionMap.length && tileX >= 0 && tileX < this.collisionMap[0].length) {\r\n                    //console.log(`Checking tile (${tileX}, ${tileY})`);\r\n                    if (this.collisionMap[tileY][tileX]) {\r\n                        //console.log(`Collision detected at tile (${tileX}, ${tileY})`);\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    //console.log(`Tile (${tileX}, ${tileY}) is out of bounds`);\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","import * as PIXI from 'pixi.js';\r\nimport { GixiApplication } from '@src/scripts/client/gixi/GixiApplication';\r\nimport { GixiUtility } from '../GixiUtility';\r\nimport { IInitializableAsync } from '../interfaces/IInitializeAsync';\r\nimport { ActorContainer, ActorContainerConfiguration } from '../ActorContainer';\r\nimport { TilemapCollisionSystem } from './TilemapCollisionSystem';\r\n\r\nexport interface TilemapData {\r\n  width: number;\r\n  height: number;\r\n  tilewidth: number;\r\n  tileheight: number;\r\n  layers: Layer[];\r\n  tilesets: Tileset[];\r\n}\r\n\r\nexport interface Layer {\r\n  type: string;\r\n  width: number;\r\n  height: number;\r\n  data?: number[];\r\n  objects?: any[];\r\n}\r\n\r\nexport interface Tileset {\r\n  firstgid: number;\r\n  tiles?: Tile[];\r\n}\r\n\r\nexport interface Tile {\r\n  id: number;\r\n  properties?: Property[];\r\n  type?: string;\r\n}\r\n\r\nexport interface Property {\r\n  name: string;\r\n  value: boolean;\r\n}\r\n\r\nexport interface TilemapItemData {\r\n  x: number;\r\n  y: number;\r\n  row: number;\r\n  column: number;\r\n  texture: PIXI.Texture;\r\n  layerType: LayerType;\r\n  type: string;\r\n}\r\n\r\n\r\nexport enum LayerType {\r\n  TileLayer = 'tilelayer',\r\n  ObjectGroup = 'objectgroup',\r\n}\r\n\r\nexport interface ITilemapItemFactory {\r\n  createTilemapItem(tilemapItemData: TilemapItemData): Promise<PIXI.Container>;\r\n}\r\n\r\n\r\nexport class Tilemap extends ActorContainer implements IInitializableAsync {\r\n\r\n  // Properties -----------------------------------\r\n  get tilemapData(): TilemapData { return this._tilemapData; }\r\n\r\n  // Fields ---------------------------------------\r\n  private _tilemapDataUrl: string;\r\n  private _TilemapItemFactory: ITilemapItemFactory;\r\n  private _TilemapCollisionSystem: TilemapCollisionSystem;\r\n  private _tilemapData!: TilemapData;\r\n\r\n  // Initialization -------------------------------\r\n  constructor(app: GixiApplication, tilemapDataUrl: string, TilemapItemFactory: ITilemapItemFactory) {\r\n\r\n    const configuration: ActorContainerConfiguration = {\r\n      canCollisionCheck: false,\r\n      isTickable: false,\r\n      isResizable: false\r\n    }\r\n    super(app, configuration);\r\n\r\n    this._tilemapDataUrl = tilemapDataUrl;\r\n    this._TilemapItemFactory = TilemapItemFactory;\r\n    this._TilemapCollisionSystem = new TilemapCollisionSystem(this._app, this);\r\n\r\n\r\n    // OPTIMIZATION\r\n    //  https://pixijs.com/8.x/guides/advanced/render-groups\r\n    //    As you delve deeper into PixiJS, especially with version 8, \r\n    //    you'll encounter a powerful feature known as RenderGroups. Think \r\n    //    of RenderGroups as specialized containers within your scene graph \r\n    //    that act like mini scene graphs themselves. Here's what you need to\r\n    //    know to effectively use Render Groups in your projects:\r\n    this.isRenderGroup = true;\r\n\r\n    // INPUT\r\n    // https://pixijs.com/8.x/guides/components/interaction\r\n    this.interactive = false;\r\n    this.interactiveChildren = false;\r\n\r\n\r\n    //\r\n    this.label = (Tilemap).name;\r\n    this.position.set(0, 0);\r\n    this.scale.set(1);\r\n    this.isRenderGroup = true;\r\n  }\r\n  get isInitialized(): boolean {\r\n    return this._isInitialized;\r\n  }\r\n\r\n  public override async initializeAsync() {\r\n\r\n\r\n    if (this.isInitialized) {\r\n      return;\r\n    }\r\n    await super.initializeAsync();\r\n    this._isInitialized = true;\r\n\r\n    if (GixiUtility.stringIsNullOrEmpty(this._tilemapDataUrl)) {\r\n      throw new Error(`Tilemap.initializeAsync() file missing error. tilemapDataUrl = \"${this._tilemapDataUrl}\"`);\r\n    }\r\n\r\n    if (!this._tilemapDataUrl.endsWith(\".tmj\")) {\r\n      throw new Error(`Tilemap.initializeAsync() file extension error. tilemapDataUrl = \"${this._tilemapDataUrl}\"`);\r\n    }\r\n\r\n    let response!: Response;\r\n    try {\r\n      response = await fetch(this._tilemapDataUrl);\r\n    }\r\n    catch (e) {\r\n      throw new Error(`Tilemap.initializeAsync() fetch error. tilemapDataUrl = \"${this._tilemapDataUrl}\"`);\r\n    }\r\n\r\n    try {\r\n      this._tilemapData = await response.json();\r\n    }\r\n    catch (e) {\r\n      throw new Error(`Tilemap.initializeAsync() json error. tilemapDataUrl = \"${this._tilemapDataUrl}\"`);\r\n    }\r\n\r\n    const tilesetPromises = this._tilemapData.tilesets.map((tileset: any) => {\r\n      const imageUrl = tileset.image.replace('../', 'assets/');\r\n      return PIXI.Assets.load(imageUrl).then(() => {\r\n        return { ...tileset, texture: PIXI.Texture.from(imageUrl) };\r\n      });\r\n    });\r\n\r\n\r\n    const tilesets = await Promise.all(tilesetPromises);\r\n\r\n    for (const layer of this._tilemapData.layers) {\r\n      if (layer.type === LayerType.TileLayer) {\r\n        await this.processTileLayer(layer, tilesets);\r\n      } else if (layer.type === LayerType.ObjectGroup && layer.objects) {\r\n        await this.processObjectLayer(layer, tilesets);\r\n      }\r\n    }\r\n\r\n    this._TilemapCollisionSystem.initializeAsync();\r\n  }\r\n\r\n  requireIsInitialized() {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  // Methods ------------------------------\r\n  private async processTileLayer(layer: Layer, tilesets: any[]) {\r\n    for (let row = 0; row < layer.height; row++) {\r\n      for (let column = 0; column < layer.width; column++) {\r\n        const tileIndex = layer.data ? layer.data[row * layer.width + column] : 0;\r\n        if (tileIndex > 0) {\r\n          const tileset = this.getTilesetForTile(tileIndex, tilesets);\r\n          if (tileset) {\r\n            const localTileIndex = tileIndex - tileset.firstgid;\r\n            const tileX = (localTileIndex % tileset.columns) * tileset.tilewidth;\r\n            const tileY = Math.floor(localTileIndex / tileset.columns) * tileset.tileheight;\r\n\r\n            const rectangle = new PIXI.Rectangle(tileX, tileY, tileset.tilewidth, tileset.tileheight);\r\n            const tileTexture = new PIXI.Texture({\r\n              source: tileset.texture.source,\r\n              frame: rectangle\r\n            });\r\n\r\n            const tilemapItemData: TilemapItemData = {\r\n              x: column * tileset.tilewidth,\r\n              y: row * tileset.tileheight,\r\n              row: row,\r\n              column: column,\r\n              texture: tileTexture,\r\n              layerType: LayerType.TileLayer,\r\n              type: this.getTileType(tileset, localTileIndex) || \"\"\r\n            };\r\n\r\n            const sprite = await this._TilemapItemFactory.createTilemapItem(tilemapItemData);\r\n            sprite.label = `Tile (${row.toString().padStart(2, '0')},${column.toString().padStart(2, '0')})`;\r\n\r\n            sprite.x = tilemapItemData.x;\r\n            sprite.y = tilemapItemData.y;\r\n            this.addChild(sprite);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private async processObjectLayer(layer: Layer, tilesets: any[]) {\r\n    for (const object of layer.objects!) {\r\n      const tileset = this.getTilesetForTile(object.gid, tilesets);\r\n      if (tileset) {\r\n        const localTileIndex = object.gid - tileset.firstgid;\r\n        const tileX = (localTileIndex % tileset.columns) * tileset.tilewidth;\r\n        const tileY = Math.floor(localTileIndex / tileset.columns) * tileset.tileheight;\r\n\r\n        const rectangle = new PIXI.Rectangle(tileX, tileY, tileset.tilewidth, tileset.tileheight);\r\n        const tileTexture = new PIXI.Texture({\r\n          source: tileset.texture.source,\r\n          frame: rectangle\r\n        });\r\n\r\n        let typeResult: string = \"\"; //ok value\r\n        let typePrimary = object.type; //BUG: THis is never populated. Its backup. Ok for now\r\n        let typeBackup = this.getTileType(tileset, localTileIndex)?.toString();\r\n\r\n        if (!GixiUtility.stringIsNullOrEmpty(typePrimary)) {\r\n          typeResult = typePrimary;\r\n        }\r\n        else if (typeBackup != null && !GixiUtility.stringIsNullOrEmpty(typeBackup)) {\r\n          typeResult = typeBackup;\r\n        }\r\n\r\n        //this means its not in a grid since objects can be anywhere\r\n        const unsetValue = -1;\r\n\r\n        const tilemapItemData: TilemapItemData = {\r\n          x: object.x,\r\n          y: object.y - tileset.tileheight,\r\n          row: unsetValue,\r\n          column: unsetValue,\r\n          texture: tileTexture,\r\n          layerType: LayerType.ObjectGroup,\r\n          type: typeResult\r\n        };\r\n\r\n        const sprite = await this._TilemapItemFactory.createTilemapItem(tilemapItemData);\r\n        sprite.label = `Object (${object.id})`;\r\n\r\n        sprite.x = tilemapItemData.x;\r\n        sprite.y = tilemapItemData.y;\r\n\r\n        this.addChild(sprite);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Event Handlers -------------------------------\r\n  public isCollision(playerX: number, playerY: number, playerWidth: number, playerHeight: number): boolean {\r\n    return this._TilemapCollisionSystem.isCollision(playerX, playerY, playerWidth, playerHeight);\r\n  }\r\n\r\n  public override async onAdded() {\r\n    await this.initializeAsync();\r\n  }\r\n\r\n  private getTilesetForTile(tileIndex: number, tilesets: any[]): any {\r\n    for (let i = tilesets.length - 1; i >= 0; i--) {\r\n      if (tileIndex >= tilesets[i].firstgid) {\r\n        return tilesets[i];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public override onRemoved(): void {\r\n    while (this.children.length > 0) {\r\n      const child = this.removeChildAt(0);\r\n      if (child instanceof PIXI.Sprite) {\r\n        child.destroy({ children: true, texture: true });\r\n      }\r\n    }\r\n  }\r\n\r\n  public override onResize(app: GixiApplication): void {\r\n    // Handle resizing logic\r\n  }\r\n\r\n  public override onTick(ticker: PIXI.Ticker): void {\r\n    // Handle tick updates\r\n  }\r\n\r\n  private getTileType(tileset: Tileset, tileIndex: number): string | undefined {\r\n    if (!tileset.tiles) return undefined;\r\n    const tile = tileset.tiles.find(t => t.id === tileIndex);\r\n    return tile?.type;\r\n  }\r\n}","import { SuperText } from \"@src/scripts/client/core/super/SuperText\";\r\nimport { GixiApplication } from \"@src/scripts/client/gixi/GixiApplication\";\r\nimport { Ticker } from \"pixi.js\";\r\n\r\nexport class InstructionsSuperText extends SuperText {\r\n\r\n    // Fields ---------------------------------------\r\n\r\n    // Initialization -------------------------------\r\n\r\n    // Event Handlers -------------------------------\r\n    public override onResize(app: GixiApplication): void {\r\n\r\n        //UPDATE POSITION\r\n        this.x = app.configuration.data.ScreenUIMarginX;\r\n        this.y = app.configuration.data.ScreenUIMarginY;\r\n\r\n        //HACK: UPDATE SIZE\r\n        this.style.fontSize = 15 + 7 / app.app.renderer.resolution\r\n\r\n\r\n        this.text = `Arrows / WASD To Move\\nEnter / Spacebar For Attack\\nF For Fullscreen\\nR For Restart\\nM For Move Fast`;\r\n\r\n        //TEMP: SHOW DEBUGGING\r\n        let r1 = Math.round(app.app.renderer.resolution * 100) / 100;\r\n        let r2 = Math.round(this.resolution * 100) / 100;\r\n        //[Resolution: ${r1}, ${r2}\r\n\r\n    }\r\n\r\n\r\n    public override onTick(ticker: Ticker): void {\r\n\r\n        //Super\r\n        super.onTick(ticker);\r\n\r\n        //Local\r\n        console.log(\"in inst\");\r\n\r\n\r\n    }\r\n}\r\n","import { SuperText } from \"@src/scripts/client/core/super/SuperText\";\r\nimport { GixiApplication } from \"@src/scripts/client/gixi/GixiApplication\";\r\n\r\nexport class ScoreSuperText extends SuperText {\r\n\r\n    // Fields ---------------------------------------\r\n\r\n    // Initialization -------------------------------\r\n\r\n    // Event Handlers -------------------------------\r\n    public override onResize(app: GixiApplication): void {\r\n\r\n        //UPDATE POSITION\r\n        this.x = app.app.screen.width - this.width - app.configuration.data.ScreenUIMarginX;\r\n        this.y = app.configuration.data.ScreenUIMarginY;\r\n\r\n        //HACK: UPDATE SIZE\r\n        this.style.fontSize = 15 + 7 / app.app.renderer.resolution\r\n\r\n    }\r\n}\r\n","import { ActorContainer, ActorContainerConfiguration } from './ActorContainer';\r\nimport { GixiApplication } from './GixiApplication';\r\nimport { IActor } from './interfaces/IActor';\r\nimport { IInitializableAsync } from './interfaces/IInitializeAsync';\r\nimport { GixiUtility } from './GixiUtility';\r\nimport * as PIXI from 'pixi.js';\r\nimport { GlowFilter } from 'pixi-filters';\r\n\r\n\r\n\r\n//NOTE: I put this class witin the same file as ActorAnimated \r\n//so I can NOT export it (to hide it from direct use). Needed? Not sure.\r\nclass MultiAnimatedSprite {\r\n\r\n    // Fields ---------------------------------------\r\n    private _animationNameToAnimatedSprite: Map<string, PIXI.AnimatedSprite>;\r\n    private _textureImageURL: string;\r\n    private _spriteSheetURL: string;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(newTextureImageURL: string, newSpriteSheetURL: string) {\r\n        this._textureImageURL = newTextureImageURL;\r\n        this._spriteSheetURL = newSpriteSheetURL;\r\n        this._animationNameToAnimatedSprite = new Map();\r\n    }\r\n\r\n    // Methods ------------------------------\r\n    public async initializeAndReparent(app: GixiApplication, parent: PIXI.Container) {\r\n\r\n\r\n        const spriteSheetAtlasResponse = await fetch(this._spriteSheetURL);\r\n        const spriteSheetAtlas = await spriteSheetAtlasResponse.json();\r\n        await PIXI.Assets.load(this._textureImageURL);\r\n        const texture = PIXI.Texture.from(this._textureImageURL);\r\n        const spriteSheet = new PIXI.Spritesheet(texture, spriteSheetAtlas);\r\n        await spriteSheet.parse();\r\n\r\n        const size = new PIXI.Point(\r\n            spriteSheetAtlas.meta.size.w,\r\n            spriteSheetAtlas.meta.size.h\r\n        )\r\n\r\n        for (const [animationName, textures] of Object.entries(spriteSheet.animations)) {\r\n            this._animationNameToAnimatedSprite.set(animationName, new PIXI.AnimatedSprite(textures));\r\n        }\r\n\r\n        this._animationNameToAnimatedSprite.forEach((value: PIXI.AnimatedSprite, key: string) => {\r\n\r\n            //NOTE: The parent center and/or the value center may not be proper\r\n            //TODO: Go to index.ts and try to put a coin at a specific world position and then be sure it looks good\r\n            value.setSize(size.x, size.y);\r\n            value.label = (MultiAnimatedSprite).name;\r\n\r\n\r\n\r\n            value.anchor.set(0.5, 0.5);\r\n            parent.addChild(value);\r\n        });\r\n    }\r\n\r\n    public play(animationName: string, animationSpeed: number) {\r\n        const animatedSprite: PIXI.AnimatedSprite | undefined = this._animationNameToAnimatedSprite.get(animationName);\r\n        if (animatedSprite == undefined) {\r\n            throw new Error(\"Trying to play unknown animation with animationName=\" + animationName);\r\n        }\r\n\r\n        animatedSprite.animationSpeed = animationSpeed;\r\n        animatedSprite.play();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Configuration\r\n */\r\nexport interface ActorAnimatedConfiguration extends ActorContainerConfiguration {\r\n}\r\n\r\nconst ActorAnimatedConfigurationDefault: ActorAnimatedConfiguration = {\r\n    canCollisionCheck: true,\r\n    isTickable: true,\r\n    isResizable: true\r\n}\r\n\r\n\r\n/**\r\n * Represents a coin in the game.\r\n * \r\n */\r\nexport class ActorAnimated extends ActorContainer implements IInitializableAsync, IActor {\r\n\r\n\r\n    // Properties -----------------------------------\r\n    public override get configuration(): ActorAnimatedConfiguration {\r\n        return this._configuration as ActorAnimatedConfiguration;\r\n    }\r\n\r\n    // Fields ---------------------------------------\r\n    protected _multiAnimatedSprite!: MultiAnimatedSprite;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication, configuration?: Partial<ActorAnimatedConfiguration>) {\r\n\r\n        super(app, { ...ActorAnimatedConfigurationDefault, ...configuration });\r\n\r\n        // Redeclare anything from super \r\n        // that you want differently here\r\n        this.label = (ActorAnimated).name;\r\n\r\n        this.initializeAsync();\r\n    }\r\n\r\n\r\n    public override async initializeAsync() {\r\n\r\n        // Super\r\n        await super.initializeAsync();\r\n\r\n        //TODO:\r\n        //1. Populate ActorAnimatedConfiguration above\r\n        //      with whatever is needed to pass into the constructor.\r\n        //      (See how ActorStatic does it.)\r\n        //2. Do some error checking here \r\n        //      (See how ActorStatic does it.)\r\n        //3. Update this snippet below as needed. Done!    \r\n        const animatedTextureURL = 'assets/images/AnimatedCoin/animated_coin.png';\r\n        const animatedTextureJSONURL = 'assets/images/AnimatedCoin/animated_coin.json';\r\n        this._multiAnimatedSprite = new MultiAnimatedSprite(animatedTextureURL, animatedTextureJSONURL);\r\n        await this._multiAnimatedSprite.initializeAndReparent(this._app, this);\r\n        this._multiAnimatedSprite.play('Gold', 0.2);\r\n\r\n\r\n        // Local\r\n        //Do any additional initialization here\r\n\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n\r\n    // Event Handlers -------------------------------\r\n\r\n    public override onTick(ticker: PIXI.Ticker): void {\r\n\r\n        // Super\r\n        super.onTick(ticker);\r\n\r\n\r\n        // Local\r\n        //Do any additional things here\r\n\r\n    }\r\n}\r\n\r\n","import { ActorAnimatedConfiguration } from '@src/scripts/client/gixi';\r\nimport { ActorAnimated } from '@src/scripts/client/gixi/ActorAnimated';\r\nimport { GixiApplication } from '@src/scripts/client/gixi/GixiApplication';\r\nimport { ICollisionSystemBody } from '@src/scripts/client/gixi/interfaces/ICollisionSystemBody';\r\nimport { Actions, Interpolations } from 'pixi-actions';\r\nimport { DropShadowFilter, GlowFilter } from 'pixi-filters';\r\n\r\n/**\r\n * Represents a coin in the game.\r\n * \r\n */\r\nexport class CoinTilemapObject extends ActorAnimated implements ICollisionSystemBody {\r\n\r\n\r\n    // Properties -----------------------------------\r\n    public get canCollisionBeChecked(): boolean {\r\n        return true;\r\n    }\r\n\r\n\r\n    // Fields ---------------------------------------\r\n\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication) {\r\n\r\n        const configuration: ActorAnimatedConfiguration = {\r\n            canCollisionCheck: false,\r\n            isTickable: false,\r\n            isResizable: false\r\n        }\r\n\r\n        super(app, configuration);\r\n\r\n        // Redeclare anything from super \r\n        // that you want differently here\r\n        this.label = (CoinTilemapObject).name;\r\n\r\n    }\r\n\r\n    public whatever() {\r\n        this.isCollected = true;\r\n        this.destroyAfterAnimation();\r\n    }\r\n\r\n\r\n    public override async initializeAsync() {\r\n\r\n        // Super\r\n        await super.initializeAsync();\r\n\r\n        // OPTIONAL: Try these - https://pixijs.io/filters/\r\n        this.filters = [\r\n            //new GlowFilter({ distance: 1, outerStrength: 1, innerStrength: 1, color: 0xffff00 }),\r\n            new DropShadowFilter({ blur: 1, alpha: 0.5, quality: 3, resolution: 2 }) //\r\n        ];\r\n\r\n        // Local\r\n        //Do any additional initialization here\r\n\r\n    }\r\n\r\n\r\n    // Methods --------------------------------------\r\n\r\n\r\n    public destroyAfterAnimation() {\r\n        let action = Actions.sequence(\r\n\r\n            Actions.delay(0),\r\n            Actions.runFunc(() => {\r\n                // BEFORE Animation: Call something?\r\n                this._app.systems.audioSystem.play(\"./assets/audio/Chime01.mp3\");\r\n            }),\r\n            Actions.parallel(\r\n\r\n                Actions.moveTo(this,\r\n                    this.x,\r\n                    this.y - 32,\r\n                    20,\r\n                    Interpolations.smooth2),\r\n\r\n                Actions.scaleTo(this,\r\n                    2,\r\n                    2,\r\n                    20,\r\n                    Interpolations.smooth2),\r\n\r\n            ),\r\n            Actions.runFunc(() => {\r\n                // AFTER Animation: Call something?\r\n                this.destroy();\r\n            }),\r\n        );\r\n        action.play();\r\n\r\n\r\n    }\r\n\r\n    // Event Handlers -------------------------------\r\n\r\n    //TODO: Rethink what and where this should be\r\n    public isCollected = false;\r\n    public collect() {\r\n\r\n        if (this.isCollected) {\r\n            return;\r\n        }\r\n        this.isCollected = true;\r\n        this.destroyAfterAnimation();\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { ActorContainer, ActorContainerConfiguration } from './ActorContainer';\r\nimport { GixiApplication } from './GixiApplication';\r\nimport { IActor } from './interfaces/IActor';\r\nimport { IInitializableAsync } from './interfaces/IInitializeAsync';\r\nimport { GixiUtility } from './GixiUtility';\r\nimport * as PIXI from 'pixi.js';\r\n\r\n/**\r\n * Configuration\r\n */\r\nexport interface ActorStaticConfiguration extends ActorContainerConfiguration {\r\n    textureUrl: string;\r\n    texture: PIXI.Texture;\r\n}\r\n\r\nconst ActorStaticConfigurationDefault: ActorStaticConfiguration = {\r\n    textureUrl: '',\r\n    texture: PIXI.Texture.EMPTY,\r\n    canCollisionCheck: true,\r\n    isTickable: true,\r\n    isResizable: true\r\n}\r\n\r\n\r\n/**\r\n * Represents a coin in the game.\r\n * \r\n */\r\nexport class ActorStatic extends ActorContainer implements IInitializableAsync, IActor {\r\n\r\n\r\n    // Properties -----------------------------------\r\n    public override get configuration(): ActorStaticConfiguration {\r\n        return this._configuration as ActorStaticConfiguration;\r\n    }\r\n\r\n    // Fields ---------------------------------------\r\n    protected _sprite!: PIXI.Sprite;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication, configuration?: Partial<ActorStaticConfiguration>) {\r\n\r\n        super(app, { ...ActorStaticConfigurationDefault, ...configuration });\r\n\r\n\r\n        if (!GixiUtility.textureIsNullOrEmpty(this.configuration?.texture) &&\r\n            !GixiUtility.stringIsNullOrEmpty(this.configuration?.textureUrl)) {\r\n            throw new Error(\"You cannot set both texture and textureUrl in the configuration\");\r\n        }\r\n\r\n        this.initializeAsync();\r\n\r\n        // Redeclare anything from super \r\n        // that you want differently here\r\n        this.label = (ActorStatic).name;\r\n    }\r\n\r\n\r\n    public override async initializeAsync() {\r\n\r\n        // Super\r\n        await super.initializeAsync();\r\n\r\n        if (!GixiUtility.textureIsNullOrEmpty(this.configuration?.texture)) {\r\n            this._sprite = new PIXI.Sprite(this.configuration?.texture);\r\n        }\r\n        else if (!GixiUtility.stringIsNullOrEmpty(this.configuration?.textureUrl)) {\r\n            await PIXI.Assets.load([this.configuration.textureUrl]);\r\n            const texture: PIXI.Texture = PIXI.Texture.from(this.configuration.textureUrl);\r\n            this._sprite = new PIXI.Sprite(texture);\r\n        }\r\n\r\n        this._sprite.label = this.label;\r\n        this.addChild(this._sprite);\r\n        this._sprite.anchor.set(0.5, 0.5);\r\n\r\n        // Local\r\n        //Do any additional initialization here\r\n\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n\r\n    // Event Handlers -------------------------------\r\n\r\n    public override onTick(ticker: PIXI.Ticker): void {\r\n\r\n        // Super\r\n        super.onTick(ticker);\r\n\r\n\r\n        // Local\r\n        //Do any additional things here\r\n\r\n    }\r\n}\r\n\r\n","import { ActorStatic, ActorStaticConfiguration } from '@src/scripts/client/gixi/ActorStatic';\r\nimport { GixiApplication } from '@src/scripts/client/gixi/GixiApplication';\r\nimport { Actions, Interpolations } from 'pixi-actions';\r\nimport { DropShadowFilter } from 'pixi-filters';\r\nimport { Container, Ticker } from 'pixi.js';\r\nimport { ICollisionSystemBody } from '../../../../gixi/interfaces/ICollisionSystemBody';\r\n\r\n/**\r\n * Represents a coin in the game.\r\n * \r\n */\r\nexport class ChestTilemapObject extends ActorStatic implements ICollisionSystemBody {\r\n\r\n    // Properties -----------------------------------\r\n    public get canCollisionBeChecked(): boolean {\r\n        return true;\r\n    }\r\n\r\n    // Fields ---------------------------------------\r\n\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication, configuration?: Partial<ActorStaticConfiguration>) {\r\n\r\n        if (configuration) {\r\n            configuration.canCollisionCheck = false;\r\n        }\r\n\r\n\r\n        super(app, configuration);\r\n\r\n        // Redeclare anything from super \r\n        // that you want differently here\r\n        this.label = (ChestTilemapObject).name;\r\n    }\r\n\r\n\r\n    public override async initializeAsync() {\r\n\r\n        // Super\r\n        await super.initializeAsync();\r\n\r\n        this.filters = [\r\n            new DropShadowFilter({ blur: 1, alpha: 0.5, quality: 3, resolution: 2 })\r\n        ];\r\n\r\n        // Local\r\n        // Do any additional initialization here\r\n\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n    public override onTick(ticker: Ticker): void {\r\n\r\n        // Super\r\n        super.onTick(ticker);\r\n\r\n        // Local\r\n        this.rotation += 0.01 * ticker.deltaTime;\r\n    }\r\n\r\n    private destroyAfterAnimation() {\r\n        let action = Actions.sequence(\r\n\r\n            Actions.delay(0),\r\n            Actions.runFunc(() => {\r\n                // BEFORE Animation: Call something?\r\n                this._app.systems.audioSystem.play(\"./assets/audio/Chime02.mp3\");\r\n            }),\r\n            Actions.parallel(\r\n\r\n                Actions.rotateTo(this,\r\n                    1,\r\n                    20,\r\n                    Interpolations.smooth2),\r\n\r\n                Actions.scaleTo(this,\r\n                    0,\r\n                    0,\r\n                    20,\r\n                    Interpolations.smooth2),\r\n\r\n            ),\r\n            Actions.runFunc(() => {\r\n                // AFTER Animation: Call something?\r\n                this.destroy();\r\n            }),\r\n        );\r\n        action.play();\r\n\r\n    }\r\n\r\n    // Event Handlers -------------------------------\r\n\r\n    //TODO: Rethink what and where this should be\r\n    public isCollected = false;\r\n    public collect() {\r\n\r\n        if (this.isCollected) {\r\n            return;\r\n        }\r\n        this.isCollected = true;\r\n        this.destroyAfterAnimation();\r\n    }\r\n\r\n}\r\n","import * as PIXI from 'pixi.js';\r\nimport { GixiApplication } from '@src/scripts/client/gixi/GixiApplication';\r\nimport { DropShadowFilter } from 'pixi-filters';\r\nimport { CoinTilemapObject } from './tileMap/tileMapObjects/CoinTilemapObject';\r\nimport { ChestTilemapObject } from './tileMap/tileMapObjects/ChestTilemapObject';\r\nimport { ActorStatic, ActorStaticConfiguration } from '../../gixi/ActorStatic';\r\nimport { Tilemap } from '../../gixi/tilemap/Tilemap';\r\nimport { ICollisionSystemBody } from '../../gixi/interfaces/ICollisionSystemBody';\r\n\r\n/**\r\n * Configuration\r\n */\r\nexport interface PlayerConfiguration extends ActorStaticConfiguration {\r\n}\r\n\r\nconst PlayerConfigurationDefault: PlayerConfiguration = {\r\n    textureUrl: '',\r\n    texture: PIXI.Texture.EMPTY,\r\n    canCollisionCheck: true,\r\n    isTickable: true,\r\n    isResizable: true\r\n}\r\n\r\n/**\r\n * Represents a coin in the game.\r\n * \r\n */\r\nexport class Player extends ActorStatic implements ICollisionSystemBody {\r\n\r\n\r\n    // Properties -----------------------------------\r\n    public get canCollisionBeChecked(): boolean {\r\n        return true;\r\n    }\r\n\r\n\r\n    // Fields ---------------------------------------\r\n    private _Tilemap: Tilemap;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication, Tilemap: Tilemap, configuration?: Partial<PlayerConfiguration>) {\r\n\r\n        super(app, { ...PlayerConfigurationDefault, ...configuration });\r\n\r\n        this._Tilemap = Tilemap;\r\n\r\n        // Redeclare anything from super \r\n        // that you want differently here\r\n        this.label = (Player).name;\r\n\r\n\r\n        //TEST\r\n        //TODO: Update InputSystem to take screen-swipes instead of player-taps\r\n        this.on('pointerdown', (event) => {\r\n            this.position.x += 10;\r\n        });\r\n        this.eventMode = 'static';\r\n\r\n    }\r\n\r\n\r\n\r\n    public override async initializeAsync() {\r\n\r\n        // Super\r\n        await super.initializeAsync();\r\n\r\n        // OPTIONAL: Try these - https://pixijs.io/filters/\r\n        this._sprite.filters = [\r\n            new DropShadowFilter({ blur: 1, alpha: 0.5, quality: 3, resolution: 2 })\r\n        ];\r\n\r\n        // Local\r\n        //Do any additional initialization here\r\n        this._sprite.anchor.set(0, 0);\r\n\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n\r\n\r\n    //TODO: Utilize this to block movement\r\n    private isCollisionWithTilemap(x: number, y: number): boolean {\r\n\r\n        //show all 4 values in the log string\r\n        const width = 32;\r\n        const height = 32;\r\n        const isCollision = this._Tilemap.isCollision(x, y, width, height);\r\n\r\n        // Internally the map uses globals, so we do NOT need to convert\r\n        //let globalPos = this.toGlobal(this.position);\r\n\r\n        if (isCollision) {\r\n            //console.log(`isCollisionWithTilemap (x=${x}, y=${y}) = ${isCollision}`);\r\n        }\r\n        else {\r\n            //console.log(`isCollisionWithTilemap (x=${x}, y=${y}) = ${isCollision}`);\r\n        }\r\n\r\n\r\n        return isCollision;\r\n\r\n    }\r\n\r\n    // Event Handlers -------------------------------\r\n\r\n    public override onTick(ticker: PIXI.Ticker): void {\r\n\r\n        super.onTick(ticker);\r\n\r\n        let moveVector: PIXI.Point = new PIXI.Point(0, 0);\r\n\r\n        //TODO: Change to be either/both shift keys\r\n        const isShift: boolean = this._app.systems.inputSystem.isKeyDown('m')\r\n\r\n        if (this._app.systems.inputSystem.isKeyDown('a')) {\r\n            //ACTION!\r\n            moveVector.x += -1;\r\n        }\r\n        if (this._app.systems.inputSystem.isKeyDown('d')) {\r\n            moveVector.x += 1;\r\n        }\r\n        if (this._app.systems.inputSystem.isKeyDown('w')) {\r\n            moveVector.y += -1;\r\n        }\r\n        if (this._app.systems.inputSystem.isKeyDown('s')) {\r\n            moveVector.y += 1;\r\n        }\r\n\r\n        if (this._app.systems.inputSystem.isKeyDownThisFrame('Enter') ||         //works\r\n            this._app.systems.inputSystem.isKeyDownThisFrame('Spacebar')) {      //does work. TODO: WHy?\r\n\r\n            //ACTION!\r\n            this._app.systems.audioSystem.play(\"./assets/audio/Click01.wav\");\r\n\r\n            //DO something here like attack\r\n        }\r\n\r\n        if (this._app.systems.inputSystem.isKeyDownThisFrame('f')) {\r\n\r\n            //FULLSCREEN\r\n            this._app.isFullscreen = !this._app.isFullscreen;\r\n            this._app.systems.audioSystem.play(\"./assets/audio/Click01.wav\");\r\n        }\r\n\r\n        if (this._app.systems.inputSystem.isKeyDownThisFrame('r')) {\r\n\r\n            //FULLSCREEN\r\n            this._app.systems.audioSystem.play(\"./assets/audio/Click01.wav\");\r\n            document.location.reload();\r\n        }\r\n\r\n        const movementSpeed = (isShift ? 10.0 : 3.0);\r\n        const nextX = this.position.x + moveVector.x * ticker.deltaTime * movementSpeed;\r\n        const nextY = this.position.y + moveVector.y * ticker.deltaTime * movementSpeed;\r\n\r\n        //TODO: Sanity check this logic to slide along walls\r\n        if (moveVector.x !== 0 && !this.isCollisionWithTilemap(nextX, this.position.y)) {\r\n            this.position.x = nextX;\r\n        }\r\n\r\n        if (moveVector.y !== 0 && !this.isCollisionWithTilemap(this.position.x, nextY)) {\r\n            this.position.y = nextY;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public override onCollision(collisions: PIXI.Container[]): void {\r\n\r\n\r\n        //TEMP: ENABLE THIS TO TEST - only do collisions on button click\r\n        // if (!this._app.systems.inputSystem.isKeyDownThisFrame('Enter')) {\r\n        //     return;\r\n        // }\r\n\r\n        collisions.forEach((collision) => {\r\n\r\n            //Note the label is NOT always the class name\r\n            //console.log(\"player is colliding with...\");\r\n            //console.log(collision.name);\r\n\r\n            if (collision instanceof CoinTilemapObject) {\r\n                if (!collision.isCollected) {\r\n                    collision.collect();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (collision instanceof ChestTilemapObject) {\r\n                if (!collision.isCollected) {\r\n                    collision.collect();\r\n                    return;\r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n}\r\n\r\n","import * as PIXI from 'pixi.js';\r\nimport { ChestTilemapObject } from \"./tileMapObjects/ChestTilemapObject\";\r\nimport { CoinTilemapObject } from './tileMapObjects/CoinTilemapObject';\r\nimport { GixiApplication } from '@src/scripts/client/gixi/GixiApplication';\r\nimport { ITilemapItemFactory, LayerType, TilemapItemData } from '@src/scripts/client/gixi/tilemap/Tilemap';\r\nimport { ActorStaticConfiguration } from '@src/scripts/client/gixi';\r\n\r\nexport class TilemapItemFactoryCustom implements ITilemapItemFactory {\r\n\r\n  // Fields ---------------------------------------\r\n  private _app: GixiApplication;\r\n\r\n  // Initialization -------------------------------\r\n  constructor(app: GixiApplication) {\r\n    this._app = app;\r\n  }\r\n\r\n  // Methods --------------------------------------\r\n  public async createTilemapItem(tilemapItemData: TilemapItemData): Promise<PIXI.Container> {\r\n\r\n\r\n    switch (tilemapItemData.layerType) {\r\n\r\n      case LayerType.TileLayer:\r\n        return new PIXI.Sprite(tilemapItemData.texture);\r\n\r\n      case LayerType.ObjectGroup:\r\n\r\n        //console.log(`createTilemapItem: (${tilemapItemData.row},${tilemapItemData.column}) ` + tilemapItemData.type);\r\n\r\n        if (tilemapItemData.type == (ChestTilemapObject).name) {\r\n\r\n          const configuration: ActorStaticConfiguration = {\r\n            textureUrl: '',\r\n            texture: tilemapItemData.texture,\r\n            canCollisionCheck: false,\r\n            isTickable: true,\r\n            isResizable: false\r\n          }\r\n\r\n          return new ChestTilemapObject(this._app, configuration);\r\n        }\r\n        else if (tilemapItemData.type == (CoinTilemapObject).name) {\r\n          return new CoinTilemapObject(this._app);\r\n\r\n        }\r\n\r\n\r\n\r\n        CoinTilemapObject\r\n        return new PIXI.Sprite(tilemapItemData.texture);\r\n\r\n      default:\r\n        throw new Error('Invalid layer type');\r\n    }\r\n  }\r\n}","//PIXI\r\nimport * as PIXI from 'pixi.js';\r\nimport Stats from 'stats.js';\r\nimport { Actions, Interpolations } from 'pixi-actions';\r\nimport { GixiApplication, GixiApplicationConfiguration } from './gixi/GixiApplication';\r\nimport { Tilemap } from './gixi/tilemap/Tilemap';\r\n\r\n//TREASURE HUNTER 2D\r\nimport { InstructionsSuperText } from '@src/scripts/client/projects/treasureHunter2D/ui/InstructionsSuperText';\r\nimport { ScoreSuperText } from '@src/scripts/client/projects/treasureHunter2D/ui/ScoreSuperText';\r\nimport { Player } from '@src/scripts/client/projects/treasureHunter2D/Player';\r\nimport { TilemapItemFactoryCustom } from './projects/treasureHunter2D/tileMap/TilemapItemFactoryCustom';\r\n\r\n\r\n\r\n/////////////////////////////\r\n// PIXI Configuration\r\n/////////////////////////////\r\nPIXI.AbstractRenderer.defaultOptions.roundPixels = true; // Crisp pixels\r\nPIXI.AbstractRenderer.defaultOptions.resolution = window.devicePixelRatio || 1; // Crisp pixels\r\n\r\n\r\n/////////////////////////////\r\n// Project Configuration\r\n/////////////////////////////\r\nconst gixiAppData: any = {\r\n  LogoImageUrl: 'assets/images/pixijs-logo-32x32.png',\r\n  TilemapDataUrl: 'assets/tilemaps/TreasureHunter2D.tmj',\r\n  PlayerTextureUrl: 'assets/images/player-default-sprite.png',\r\n  CoinsCollected: 0,\r\n  CoinsMax: 5,\r\n  ScreenUIMarginX: 10,\r\n  ScreenUIMarginY: 10,\r\n};\r\n\r\nlet player: Player;\r\nlet tempWorldOrigin: PIXI.Graphics;\r\n\r\n\r\n/////////////////////////////\r\n// Create App\r\n/////////////////////////////\r\nconst gixiAppConfiguration: GixiApplicationConfiguration = {\r\n\r\n  //Show all values here, for readability\r\n  //Or simply use GixiApplicationConfigurationDefault\r\n  widthInitial: 1920,\r\n  heightInitial: 1080,\r\n  minFPS: 1,\r\n  maxFPS: 240,\r\n  backgroundColor: 0x87867a,\r\n  data: gixiAppData\r\n}\r\nconst gixiAppConst = new GixiApplication('pixi-application-canvas', gixiAppConfiguration);\r\n\r\n\r\n\r\n\r\n/////////////////////////////\r\n// Setup Stats\r\n/////////////////////////////\r\nconst stats = new Stats();\r\nstats.showPanel(0);\r\nstats.dom.className = 'stats-panel';\r\ndocument.body.appendChild(stats.dom);\r\n\r\n\r\n/////////////////////////////\r\n// Setup Pixi JS DevTools\r\n// https://bit.ly/pixijs-devtools\r\n/////////////////////////////\r\n(globalThis as any).__PIXI_APP__ = gixiAppConst.app;\r\n\r\n\r\n/////////////////////////////\r\n// Handle App Initialize\r\n/////////////////////////////\r\nasync function onInitializeCompleted(gixiApp: GixiApplication) {\r\n\r\n  /////////////////////////////\r\n  // Create Tilemap\r\n  /////////////////////////////\r\n  const tilemap = new Tilemap(\r\n    gixiApp,\r\n    gixiAppData.TilemapDataUrl,\r\n    new TilemapItemFactoryCustom(gixiApp)\r\n  );\r\n\r\n  //Initialize first, so width and height are available\r\n  await tilemap.initializeAsync();\r\n  gixiApp.addToViewport(tilemap);\r\n  tilemap.x = gixiApp.getScreenCenterpoint().x - tilemap.width / 2;\r\n  tilemap.y = gixiApp.getScreenCenterpoint().y - tilemap.height / 2;\r\n\r\n  /////////////////////////////\r\n  // Temp:  World centerpoint\r\n  //        For reference\r\n  /////////////////////////////\r\n  tempWorldOrigin = new PIXI.Graphics()\r\n    .rect(0, 0, 32, 32)\r\n    .fill({\r\n      color: 0xffffff,\r\n      alpha: 0.5\r\n    });\r\n  gixiApp.addToViewport(tempWorldOrigin);\r\n  tempWorldOrigin.x = gixiApp.getScreenCenterpoint().x;\r\n  tempWorldOrigin.y = gixiApp.getScreenCenterpoint().y;\r\n\r\n\r\n  /////////////////////////////\r\n  // Create Player\r\n  /////////////////////////////\r\n  player = new Player(gixiApp, tilemap, { textureUrl: gixiAppData.PlayerTextureUrl as string });\r\n  gixiApp.addToViewport(player);\r\n  player.x = gixiApp.getScreenCenterpoint().x;\r\n  player.y = gixiApp.getScreenCenterpoint().y;\r\n\r\n\r\n\r\n  /////////////////////////////\r\n  // Setup Camera\r\n  /////////////////////////////\r\n  gixiApp.viewport.follow(player, {\r\n\r\n    //TODO: find the settings that work VERY smoothly at fullsceen\r\n    //its close, now.  But not perfect\r\n    speed: 1,\r\n    acceleration: 1,\r\n    radius: 20\r\n  });\r\n\r\n  // Optional: Input for camera\r\n  // app.viewport\r\n  //   .drag()\r\n  //   .pinch()\r\n  //   .wheel()\r\n  //   .decelerate();\r\n\r\n\r\n  /////////////////////////////\r\n  // Create Text\r\n  /////////////////////////////\r\n  const instructionsText: InstructionsSuperText =\r\n    new InstructionsSuperText(\r\n      gixiApp,\r\n      'SEE INSIDE CLASS',\r\n      30,\r\n      \"left\");\r\n  gixiApp.addToStage(instructionsText);\r\n  instructionsText.onTick = function (ticker: PIXI.Ticker): void {\r\n\r\n    console.log(\"Custom onTick for this instance\");\r\n  };\r\n\r\n\r\n  const scoreText: ScoreSuperText =\r\n    new ScoreSuperText(\r\n      gixiApp,\r\n      `Coins ${gixiApp.configuration.data?.CoinsCollected}/${gixiApp.configuration.data?.CoinsMax}`,\r\n      30,\r\n      \"right\");\r\n  gixiApp.addToStage(scoreText);\r\n\r\n  /////////////////////////////\r\n  // Update Systems Every Frame\r\n  /////////////////////////////\r\n  gixiApp.app.ticker.add((ticker) => {\r\n\r\n    stats.begin();\r\n    Actions.tick(ticker.deltaTime);\r\n    stats.end();\r\n  });\r\n\r\n\r\n}\r\n\r\n\r\n/////////////////////////////\r\n// Handle App Error\r\n/////////////////////////////\r\nfunction onInitializeError(error: Error) {\r\n  console.error(`PIXI.Application.init() failed. error = ${error}`);\r\n}\r\n\r\n\r\n/////////////////////////////\r\n// Initialize App\r\n/////////////////////////////\r\ngixiAppConst.addListener(GixiApplication.EVENT_INITIALIZE_COMPLETE, onInitializeCompleted);\r\ngixiAppConst.addListener(GixiApplication.EVENT_INITIALIZE_ERROR, onInitializeError);\r\n\r\n\r\n(async () => {\r\n  await gixiAppConst.initializeAsync();\r\n})();\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + {\"142\":\"6f46ecf1ff524851e045\",\"151\":\"061e9e13269897ecbd38\",\"162\":\"1046d09f72d0e3563e18\",\"421\":\"796907ff150e4ce2813a\",\"440\":\"d6ee605c48ad4a368abe\",\"751\":\"1c7e18eea6655a094d79\",\"852\":\"15740e5671b245293199\"}[chunkId] + \".bundle.js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk\"] = self[\"webpackChunk\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [433], () => (__webpack_require__(8708)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","inProgress","SuperText","_app","constructor","app","message","fontSize","align","super","text","style","fontFamily","fill","resolution","this","label","name","ticker","add","onTick","bind","addListener","GixiApplication","EVENT_RESIZE","onResize","isChild","parent","onAdded","onRemoved","SystemBase","isInitialized","_isInitialized","initializeAsync","requireIsInitialized","Error","GixiUtility","textureIsNullOrEmpty","texture","EMPTY","stringIsNullOrEmpty","value","hasInterface","obj","propertyChecker","Object","keys","every","prop","ICollisionSystemBodyInterfaceLookup","canCollisionBeChecked","CollisionSystem","stageContainers","_stageContainers","stageContainersRefresh","stageContainersRefreshRecursive","stage","stageContainersCollidingWith","me","getCollisionsInternal","container","result","children","forEach","child","push","length","filter","hasICollisionSystemBody","isCollidingWith","other","bounds1","getBounds","bounds2","x","width","y","height","ActorContainerConfigurationDefault","canCollisionCheck","isTickable","isResizable","ActorContainer","configuration","_configuration","_canCollisionCheck","_isDestroyed","onTickInternal","onResizeInternal","destroy","options","remove","removeListener","collisions","systems","collisionSystem","onCollision","InputSystem","_keyStateDictionary","Map","window","addEventListener","onKeyDown","onKeyUp","isKeyDown","key","getKeyStateByKey","isDown","isKeyDownThisFrame","keyState","isDownThisFrame","keyboardEvent","get","undefined","newKeyState","KeyState","set","update","AudioSystem","_audioContextResumed","setupAudioContextResume","resumeAudioContext","audioContext","context","state","resume","then","console","log","catch","err","error","once","play","fileName","playAsync","warn","from","url","preload","autoPlay","isLoaded","Promise","resolve","setTimeout","speed","volume","MultiplayerSystem","consoleLog","socket","io","on","emit","msg","GixiApplicationConfigurationDefault","widthInitial","heightInitial","minFPS","maxFPS","backgroundColor","data","Systems","inputSystem","audioSystem","multiplayerSystem","all","EventEmitter","static","isFullscreen","_isFullscreen","elem","document","getElementById","canvas","id","requestFullscreen","fullscreenEnabled","exitFullscreen","_systems","viewport","_canvasId","canvasId","setMaxListeners","init","resizeTo","eventMode","eventFeatures","move","globalMove","click","wheel","GetRendererTypeAsString","renderer","type","screenWidth","screen","screenHeight","worldWidth","worldHeight","events","center","getScreenCenterpoint","deltaMS","EVENT_INITIALIZE_COMPLETE","setupResizeHandling","addToStage","EVENT_INITIALIZE_ERROR","rendererType","WEBGL","WEBGPU","addToViewport","addChild","resize","removeFromViewport","removeChild","removeFromStage","resizeAfterDelay","getScreenScaleCurrent","TilemapCollisionSystem","collisionMap","_Tilemap","Tilemap","createCollisionMap","tilemapData","layers","tilesets","Array","collisionProperties","tileset","tiles","tile","properties","property","firstgid","layer","tileIndex","isCollision","localPos","globalPos","toGlobal","tileWidth","tilewidth","tileHeight","tileheight","startX","Math","floor","endX","ceil","startY","endY","tilemapGlobalPos","tileY","tileX","LayerType","_tilemapData","_tilemapDataUrl","_TilemapItemFactory","_TilemapCollisionSystem","tilemapDataUrl","TilemapItemFactory","isRenderGroup","interactive","interactiveChildren","position","scale","endsWith","response","fetch","e","json","tilesetPromises","map","imageUrl","image","replace","load","TileLayer","processTileLayer","ObjectGroup","objects","processObjectLayer","row","column","getTilesetForTile","localTileIndex","columns","rectangle","tileTexture","source","frame","tilemapItemData","layerType","getTileType","sprite","createTilemapItem","toString","padStart","object","gid","typeResult","typePrimary","typeBackup","unsetValue","playerX","playerY","playerWidth","playerHeight","i","removeChildAt","find","t","InstructionsSuperText","ScreenUIMarginX","ScreenUIMarginY","round","ScoreSuperText","MultiAnimatedSprite","_animationNameToAnimatedSprite","_textureImageURL","_spriteSheetURL","newTextureImageURL","newSpriteSheetURL","initializeAndReparent","spriteSheetAtlasResponse","spriteSheetAtlas","spriteSheet","parse","size","meta","w","h","animationName","textures","entries","animations","setSize","anchor","animationSpeed","animatedSprite","ActorAnimatedConfigurationDefault","ActorAnimated","_multiAnimatedSprite","CoinTilemapObject","whatever","isCollected","destroyAfterAnimation","filters","blur","alpha","quality","sequence","delay","runFunc","parallel","moveTo","smooth2","scaleTo","collect","ActorStaticConfigurationDefault","textureUrl","ActorStatic","_sprite","ChestTilemapObject","rotation","deltaTime","rotateTo","PlayerConfigurationDefault","Player","event","isCollisionWithTilemap","moveVector","isShift","location","reload","movementSpeed","nextX","nextY","collision","TilemapItemFactoryCustom","defaultOptions","roundPixels","devicePixelRatio","gixiAppData","LogoImageUrl","TilemapDataUrl","PlayerTextureUrl","CoinsCollected","CoinsMax","player","tempWorldOrigin","gixiAppConst","stats","showPanel","dom","className","body","appendChild","globalThis","__PIXI_APP__","async","gixiApp","tilemap","rect","color","follow","acceleration","radius","instructionsText","scoreText","begin","tick","end","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","f","chunkId","reduce","promises","u","miniCssF","g","Function","prototype","hasOwnProperty","l","done","script","needAttach","scripts","getElementsByTagName","s","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","onerror","onload","clearTimeout","doneFns","parentNode","target","head","Symbol","toStringTag","scriptUrl","importScripts","currentScript","test","p","installedChunks","installedChunkData","promise","reject","errorType","realSrc","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}