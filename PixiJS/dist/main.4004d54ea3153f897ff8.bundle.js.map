{"version":3,"file":"main.4004d54ea3153f897ff8.bundle.js","mappings":"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","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///webpack/runtime/load script","webpack:///./src/scripts/library/gixi/systems/SystemBase.ts","webpack:///./src/scripts/library/gixi/systems/CollisionSystem.ts","webpack:///./src/scripts/library/gixi/ActorContainer.ts","webpack:///./src/scripts/library/gixi/systems/InputSystem.ts","webpack:///./src/scripts/library/gixi/systems/AudioSystem.ts","webpack:///./src/scripts/library/gixi/GixiApplication.ts","webpack:///./src/scripts/library/core/super/SuperText.ts","webpack:///./src/scripts/library/treasureHunter2D/ui/InstructionsSuperText.ts","webpack:///./src/scripts/library/treasureHunter2D/ui/ScoreSuperText.ts","webpack:///./src/scripts/library/gixi/GixiUtility.ts","webpack:///./src/scripts/library/gixi/ActorStatic.ts","webpack:///./src/scripts/library/treasureHunter2D/Player.ts","webpack:///./src/scripts/library/gixi/tilemap/TilemapCollisionSystem.ts","webpack:///./src/scripts/library/gixi/tilemap/Tilemap.ts","webpack:///./src/scripts/library/gixi/tilemap/TilemapObject.ts","webpack:///./src/scripts/library/gixi/ActorAnimated.ts","webpack:///./src/scripts/library/gixi/index.ts","webpack:///./src/scripts/library/gixi/tilemap/TilemapItemFactoryDefault.ts","webpack:///./src/scripts/library/treasureHunter2D/tileMap/tileMapObjects/ChestTilemapObject.ts","webpack:///./src/scripts/library/treasureHunter2D/tileMap/tileMapObjects/CoinTilemapObject.ts","webpack:///./src/scripts/library/treasureHunter2D/tileMap/TilemapItemFactoryCustom.ts","webpack:///./src/scripts/index.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/ensure chunk","webpack:///webpack/runtime/get javascript chunk filename","webpack:///webpack/runtime/get mini-css chunk filename","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/runtime/publicPath","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var inProgress = {};\n// data-webpack is not used as build has no uniqueName\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","import { GixiApplication } from \"../GixiApplication\";\r\n\r\n/**\r\n * \r\n */\r\nexport class SystemBase {\r\n\r\n    // Properties -----------------------------------\r\n\r\n    // Fields ---------------------------------------\r\n    protected _app: GixiApplication;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication) {\r\n        this._app = app;\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n}","import { GixiApplication } from \"../GixiApplication\";\r\nimport * as PIXI from 'pixi.js';\r\nimport { SystemBase } from \"./SystemBase\";\r\n\r\n/**\r\n * CollisionSystem is responsible for detecting collisions between PIXI containers.\r\n * It extends the SystemBase class and provides methods to get colliding sprites.\r\n */\r\nexport class CollisionSystem extends SystemBase {\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication) {\r\n        super(app);\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n\r\n    /**\r\n     * Get all sprites that are colliding with the given sprite.\r\n     * @param me - The sprite to check collisions for.\r\n     * @returns An array of sprites that are colliding with the given sprite.\r\n     */\r\n    public getCollisions(me: PIXI.Container): PIXI.Container[] {\r\n        const collidingSprites: PIXI.Container[] = [\r\n            ...this.getCollidingSpritesFromChildren(me, this._app.app.stage.children),\r\n            ...this.getCollidingSpritesFromChildren(me, this._app.viewport.children),\r\n        ];\r\n\r\n        return collidingSprites;\r\n    }\r\n\r\n    // Internal Methods -----------------------------\r\n\r\n    /**\r\n     * Check if the given sprite is colliding with another sprite.\r\n     * @param me - The sprite to check collisions for.\r\n     * @param other - The other sprite to check collisions against.\r\n     * @returns True if the sprites are colliding, false otherwise.\r\n     */\r\n    private isCollidingWith(me: PIXI.Container, other: PIXI.Container): boolean {\r\n        const bounds1 = me.getBounds();\r\n        const bounds2 = other.getBounds();\r\n\r\n        return (\r\n            bounds1.x < bounds2.x + bounds2.width &&\r\n            bounds1.x + bounds1.width > bounds2.x &&\r\n            bounds1.y < bounds2.y + bounds2.height &&\r\n            bounds1.y + bounds2.height > bounds2.y\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get all sprites from the given children that are colliding with the given sprite.\r\n     * @param me - The sprite to check collisions for.\r\n     * @param children - The children to check collisions against.\r\n     * @returns An array of sprites that are colliding with the given sprite.\r\n     */\r\n    private getCollidingSpritesFromChildren(me: PIXI.Container, children: PIXI.Container[]): PIXI.Container[] {\r\n        return children.filter((child) => {\r\n            return (\r\n                child instanceof PIXI.Container &&\r\n                child !== me &&\r\n                this.isCollidingWith(me, child as PIXI.Container)\r\n            );\r\n        }) as PIXI.Container[];\r\n    }\r\n}\r\n","import * as PIXI from 'pixi.js';\r\nimport { IInitializableAsync } from './interfaces/IInitializeAsync';\r\nimport { GixiApplication } from './GixiApplication';\r\nimport { IActor } from './interfaces/IActor';\r\nimport { IActorConfiguration } from './interfaces/IActorConfiguration';\r\n\r\n\r\n/**\r\n* Configuration\r\n*/\r\nexport interface ActorContainerConfiguration extends IActorConfiguration {\r\n\r\n}\r\n\r\nconst ActorContainerConfigurationDefault: ActorContainerConfiguration = {\r\n  isCollidable: true,\r\n  isTickable: true,\r\n  isResizable: true\r\n}\r\n\r\n\r\n\r\nexport class ActorContainer extends PIXI.Container implements IInitializableAsync, IActor {\r\n\r\n  // Properties -----------------------------------\r\n  public get isInitialized(): boolean {\r\n    return this._isInitialized;\r\n  }\r\n\r\n  public get configuration(): ActorContainerConfiguration {\r\n    return this._configuration;\r\n  }\r\n\r\n  public get isCollidable(): boolean {\r\n    return this._isCollidable;\r\n  }\r\n\r\n  public isChild(): boolean {\r\n    return this.parent !== null;\r\n  }\r\n\r\n  // Fields ---------------------------------------\r\n  private _isDestroyed: boolean = false;\r\n  protected _configuration: ActorContainerConfiguration;\r\n  protected _isInitialized: boolean = false;\r\n  protected _isCollidable: boolean = true;\r\n  protected _app: GixiApplication;\r\n\r\n\r\n\r\n  // Initialization -------------------------------\r\n  constructor(app: GixiApplication,\r\n    configuration?: Partial<ActorContainerConfiguration>) {\r\n\r\n    super();\r\n    this._configuration = { ...ActorContainerConfigurationDefault, ...configuration };\r\n    this._app = app;\r\n\r\n    // Tick\r\n    if (this.configuration.isTickable) {\r\n      this._app.app.ticker.add(this.onTickInternal.bind(this));\r\n    }\r\n\r\n    // Resize\r\n    if (this.configuration.isResizable) {\r\n      this._app.addListener(GixiApplication.EVENT_RESIZE, this.onResizeInternal.bind(this));\r\n    }\r\n\r\n    // DO NOT CALL initializeAsync here. It is called by the child\r\n  }\r\n\r\n  public requireIsInitialized() {\r\n\r\n    if (!this.isInitialized) {\r\n      throw new Error('requireIsInitialized.');\r\n    }\r\n  }\r\n\r\n  public async initializeAsync(): Promise<any> {\r\n\r\n    if (this._isInitialized) {\r\n      return;\r\n    }\r\n\r\n    this._isInitialized = true;\r\n  }\r\n\r\n\r\n  // Override PIXI.Sprite's destroy method\r\n  public override destroy(options?: PIXI.DestroyOptions | boolean): void {\r\n\r\n    this.requireIsInitialized();\r\n\r\n    if (this._isDestroyed) return;\r\n\r\n    // Clean up\r\n    if (this.configuration.isTickable) {\r\n      this._app.app.ticker.remove(this.onTickInternal.bind(this));\r\n    }\r\n    if (this.configuration.isResizable) {\r\n      this._app.removeListener(GixiApplication.EVENT_RESIZE, this.onResizeInternal.bind(this));\r\n    }\r\n    this._isDestroyed = true;\r\n    super.destroy(options);\r\n  }\r\n\r\n  // Event Handlers -------------------------------\r\n  public onAdded() {\r\n    // Empty implementation to be overridden\r\n  }\r\n\r\n  public onRemoved() {\r\n    // Empty implementation to be overridden\r\n  }\r\n\r\n  public onResize(app: GixiApplication): void {\r\n    // Empty implementation to be overridden\r\n  }\r\n\r\n  public onTick(ticker: PIXI.Ticker): void {\r\n\r\n    // Empty implementation to be overridden\r\n\r\n    const collisions = this._app.systems.collisionSystem.getCollisions(this);\r\n    if (collisions.length) {\r\n      this.onCollision(collisions);\r\n    };\r\n\r\n  }\r\n\r\n  protected onCollision(collisions: PIXI.Container[]): void {\r\n    // Empty implementation to be overridden\r\n  }\r\n\r\n  //TODO: remove these internals???\r\n  private onTickInternal(ticker: PIXI.Ticker): void {\r\n    if (this._isDestroyed) return;\r\n    this.onTick(ticker);\r\n  }\r\n\r\n  private onResizeInternal(app: GixiApplication): void {\r\n    if (this._isDestroyed) return;\r\n    this.onResize(app);\r\n  }\r\n\r\n\r\n}","import { GixiApplication } from \"../GixiApplication\";\r\nimport { SystemBase } from \"./SystemBase\";\r\n\r\n/**\r\n * Handles keyboard input and maintains the state of keys.\r\n */\r\nexport class InputSystem extends SystemBase {\r\n\r\n    // Fields ---------------------------------------\r\n    private _keyStateDictionary: Map<string, KeyState>;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication) {\r\n        super(app);\r\n\r\n        //TODO: Move this and all systems to use IInitializeAsync and move this into that init\r\n        this._keyStateDictionary = new Map();\r\n        window.addEventListener('keydown', this.onKeyDown.bind(this));\r\n        window.addEventListener('keyup', this.onKeyUp.bind(this));\r\n    }\r\n\r\n    // Methods ------------------------------\r\n    /**\r\n     * Checks if the specified key is currently pressed down.\r\n     * @param key - The key to check.\r\n     * @returns True if the key is down, otherwise false.\r\n     */\r\n    public isKeyDown(key: string): boolean {\r\n        let keyState: KeyState = this.getKeyStateByKey(key);\r\n        return keyState.isDown;\r\n    }\r\n\r\n    /**\r\n     * Checks if the specified key was pressed down this frame.\r\n     * @param key - The key to check.\r\n     * @returns True if the key is down this frame, otherwise false.\r\n     */\r\n    public isKeyDownThisFrame(key: string): boolean {\r\n        let keyState: KeyState = this.getKeyStateByKey(key);\r\n\r\n        //NOTE: I tried a few ways to capture **ONE** moment of true here\r\n        //FInally this one works - srivello\r\n        let isDownThisFrame = keyState.isDownThisFrame;\r\n        keyState.isDownThisFrame = false;\r\n        return isDownThisFrame;\r\n    }\r\n\r\n\r\n    /**\r\n     * Handles the key down event and updates the key state.\r\n     * @param keyboardEvent - The keyboard event.\r\n     */\r\n    private onKeyDown(keyboardEvent: KeyboardEvent): void {\r\n        let keyState: KeyState = this.getKeyStateByKey(keyboardEvent.key);\r\n        if (!keyState.isDown) {\r\n            keyState.isDown = true;\r\n            keyState.isDownThisFrame = true;\r\n        }\r\n        else {\r\n            keyState.isDownThisFrame = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the key up event and updates the key state.\r\n     * @param keyboardEvent - The keyboard event.\r\n     */\r\n    private onKeyUp(keyboardEvent: KeyboardEvent): void {\r\n        let keyState: KeyState = this.getKeyStateByKey(keyboardEvent.key);\r\n        keyState.isDown = false;\r\n        keyState.isDownThisFrame = false;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the key state for the specified key. If the key does not exist, a new KeyState is created and returned.\r\n     * @param key - The key to retrieve the state for.\r\n     * @returns The KeyState for the specified key.\r\n     */\r\n    private getKeyStateByKey(key: string): KeyState {\r\n        let keyState: KeyState | undefined = this._keyStateDictionary.get(key);\r\n        if (keyState == undefined) {\r\n            let newKeyState: KeyState = new KeyState();\r\n            this._keyStateDictionary.set(key, newKeyState);\r\n            return newKeyState;\r\n        }\r\n        return keyState;\r\n    }\r\n\r\n    /**\r\n     * Updates the state of keys for the next frame.\r\n     */\r\n    public update() {\r\n        this._keyStateDictionary.forEach((keyState) => {\r\n            keyState.isDownThisFrame = false;\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the state of a key.\r\n */\r\nclass KeyState {\r\n    constructor() {\r\n        this.isDown = false;\r\n        this.isDownThisFrame = false;\r\n    }\r\n\r\n    public isDown: boolean;\r\n    public isDownThisFrame: boolean;\r\n}\r\n","import { IMediaInstance, Sound, sound } from \"@pixi/sound\";\r\nimport { GixiApplication } from \"../GixiApplication\";\r\nimport { SystemBase } from \"./SystemBase\";\r\n\r\n/**\r\n * Handles keyboard input and maintains the state of keys.\r\n */\r\nexport class AudioSystem extends SystemBase {\r\n\r\n    // Properties -----------------------------------\r\n\r\n    // Fields ---------------------------------------\r\n    private _audioContextResumed: boolean = false;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication) {\r\n        super(app);\r\n        this.setupAudioContextResume();\r\n    }\r\n\r\n    // Methods ------------------------------\r\n\r\n    // Set up the audio context to resume after a user gesture\r\n    private setupAudioContextResume() {\r\n        const resumeAudioContext = () => {\r\n            if (!this._audioContextResumed) {\r\n                const audioContext = sound.context.audioContext;\r\n                if (audioContext.state === 'suspended') {\r\n                    audioContext.resume().then(() => {\r\n                        this._audioContextResumed = true;\r\n                        console.log('Audio context resumed');\r\n                    }).catch((err) => {\r\n                        console.error('Failed to resume audio context:', err);\r\n                    });\r\n                } else {\r\n                    this._audioContextResumed = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        // Listen for any user interaction\r\n        window.addEventListener('click', resumeAudioContext, { once: true });\r\n        window.addEventListener('touchstart', resumeAudioContext, { once: true });\r\n        window.addEventListener('keydown', resumeAudioContext, { once: true });\r\n    }\r\n\r\n    /**\r\n     * Play a sound file.\r\n     * @param fileName \r\n     */\r\n    public async Play(fileName: string) {\r\n        this.PlayAsync(fileName);\r\n    }\r\n\r\n    /**\r\n     * Play a sound file.\r\n     * @param fileName \r\n     */\r\n    public async PlayAsync(fileName: string) {\r\n        if (!this._audioContextResumed) {\r\n            console.warn('Audio context not resumed yet. Cannot play sound.');\r\n            return;\r\n        }\r\n\r\n        // Play the sound when needed\r\n        let x: Sound = Sound.from({\r\n            url: fileName,\r\n            preload: true,\r\n            autoPlay: false,\r\n        });\r\n\r\n        while (!x.isLoaded) {\r\n            await new Promise(resolve => setTimeout(resolve, 100));\r\n        }\r\n\r\n        x.speed = 1;\r\n        x.volume = 1;\r\n        x.play();\r\n    }\r\n}\r\n","import * as PIXI from 'pixi.js';\r\nimport { Viewport } from 'pixi-viewport';\r\nimport { EventEmitter } from 'events';\r\nimport { SuperText } from '../core/super/SuperText';\r\nimport { IInitializableAsync } from './interfaces/IInitializeAsync';\r\nimport { CollisionSystem } from './systems/CollisionSystem';\r\nimport { ActorContainer } from './ActorContainer';\r\nimport { InputSystem } from './systems/InputSystem';\r\nimport { AudioSystem } from './systems/AudioSystem';\r\n\r\n/**\r\n * Configuration\r\n */\r\nexport interface GixiApplicationConfiguration {\r\n  widthInitial: number;\r\n  heightInitial: number;\r\n  backgroundColor: number;\r\n  minFPS: number,\r\n  maxFPS: number,\r\n  data: { [key: string]: any };\r\n}\r\n\r\nconst GixiApplicationConfigurationDefault: GixiApplicationConfiguration = {\r\n  widthInitial: 1920,\r\n  heightInitial: 1080,\r\n  minFPS: 1,\r\n  maxFPS: 240,\r\n  backgroundColor: 0x1099bb,\r\n  data: {}\r\n}\r\n\r\n\r\nclass Systems {\r\n\r\n  // Fields ---------------------------------------\r\n  public collisionSystem: CollisionSystem;\r\n  public inputSystem: InputSystem;\r\n  public audioSystem: AudioSystem;\r\n\r\n  // Initialization -------------------------------\r\n  constructor(app: GixiApplication) {\r\n    this.collisionSystem = new CollisionSystem(app);\r\n    this.inputSystem = new InputSystem(app);\r\n    this.audioSystem = new AudioSystem(app);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Wrapper class for initializing and managing a PixiJS application.\r\n */\r\nexport class GixiApplication extends EventEmitter implements IInitializableAsync {\r\n\r\n\r\n  // Constants ------------------------------------\r\n  public static readonly EVENT_INITIALIZE_COMPLETE: string = 'initializeComplete';\r\n  public static readonly EVENT_INITIALIZE_ERROR: string = 'initializeError';\r\n  public static readonly EVENT_RESIZE: string = 'resize';\r\n\r\n\r\n  // Properties -----------------------------------\r\n  public get isInitialized(): boolean {\r\n    return this._isInitialized;\r\n  }\r\n\r\n  public get isFullscreen(): boolean {\r\n    return this._isFullscreen;\r\n  }\r\n\r\n  public set isFullscreen(value: boolean) {\r\n\r\n    this._isFullscreen = value;\r\n\r\n    var elem = document.getElementById(this.app.canvas.id);\r\n    console.log(this.app.canvas.id)\r\n\r\n    if (this._isFullscreen) {\r\n\r\n      if (elem?.requestFullscreen) {\r\n        elem?.requestFullscreen();\r\n      }\r\n\r\n    }\r\n    else {\r\n      document.fullscreenEnabled && document.exitFullscreen();\r\n    }\r\n  }\r\n\r\n  public get systems(): Systems {\r\n    return this._systems;\r\n  }\r\n\r\n  public get configuration(): GixiApplicationConfiguration {\r\n    return this._configuration;\r\n  }\r\n\r\n  // Fields ---------------------------------------\r\n  public app: PIXI.Application;\r\n  public viewport!: Viewport;\r\n  private _configuration: GixiApplicationConfiguration;\r\n  //\r\n  private _canvasId: string;\r\n  private _isInitialized = false;\r\n  private _systems: Systems;\r\n  private _isFullscreen: boolean = false;\r\n\r\n  // Initialization -------------------------------\r\n  constructor(\r\n    canvasId: string = 'pixi-application-canvas',\r\n    configuration?: Partial<GixiApplicationConfiguration>\r\n  ) {\r\n\r\n    /////////////////////////////\r\n    // Setup\r\n    /////////////////////////////\r\n    super();\r\n    this._canvasId = canvasId;\r\n    //\r\n    this.app = new PIXI.Application();\r\n    this._configuration = { ...GixiApplicationConfigurationDefault, ...configuration };\r\n    this._systems = new Systems(this);\r\n\r\n    // Every SuperSprite instance listens to App\r\n    // So this number must be >= to the number of SuperSprite instances\r\n    this.setMaxListeners(100);\r\n  }\r\n\r\n\r\n  /**\r\n   * Initializes the PixiJS application.\r\n   */\r\n  public async initializeAsync(): Promise<any> {\r\n    if (this._isInitialized) {\r\n      return;\r\n    }\r\n    this._isInitialized = true;\r\n    console.log(\"initializeAsync()\" + this._isInitialized);\r\n\r\n    try {\r\n      await this.app.init({\r\n        width: this.configuration.widthInitial,\r\n        height: this.configuration.heightInitial,\r\n        backgroundColor: this.configuration.backgroundColor,\r\n        resizeTo: window,\r\n        canvas: document.getElementById(this._canvasId) as HTMLCanvasElement,\r\n      });\r\n\r\n      this.app.ticker.minFPS = this.configuration.minFPS;\r\n      this.app.ticker.maxFPS = this.configuration.maxFPS;\r\n\r\n      console.log(`PIXI.Application.init() success! PixiJS v${PIXI.VERSION} with ${this.GetRendererTypeAsString(this.app.renderer.type)} `);\r\n\r\n      /////////////////////////////\r\n      // Create Viewport\r\n      /////////////////////////////\r\n      this.viewport = new Viewport({\r\n        screenWidth: this.app.screen.width,\r\n        screenHeight: this.app.screen.height,\r\n        worldWidth: 3000,   //not sure\r\n        worldHeight: 3000,  //not sure\r\n\r\n        // the interaction module is important for wheel to work properly \r\n        // when renderer.view is placed or scaled\r\n        events: this.app.renderer.events\r\n      });\r\n\r\n      this.viewport.center = this.getScreenCenterpoint();\r\n\r\n      this.app.ticker.add((ticker) => {\r\n        this.viewport.update(ticker.deltaMS);\r\n      });\r\n\r\n\r\n      /////////////////////////////\r\n      this.emit(GixiApplication.EVENT_INITIALIZE_COMPLETE, this);\r\n      this.setupResizeHandling();\r\n      this.addToStage(this.viewport);\r\n      this.viewport.label = \"Viewport\"; //TODO: Why \"Et Viewport\"?\r\n\r\n    } catch (error) {\r\n      console.log(`PIXI.Application.init() failed! PixiJS v${PIXI.VERSION} with ${this.GetRendererTypeAsString(this.app.renderer.type)} `);\r\n\r\n      this.emit(GixiApplication.EVENT_INITIALIZE_ERROR, error);\r\n    }\r\n\r\n\r\n  }\r\n\r\n  public requireIsInitialized() {\r\n\r\n    if (!this.isInitialized) {\r\n      throw new Error('requireIsInitialized.');\r\n    }\r\n  }\r\n\r\n\r\n  // Methods ------------------------------\r\n  private GetRendererTypeAsString(type: number) {\r\n    let rendererType: string = \"Unknown\";\r\n    if (this.app.renderer.type === PIXI.RendererType.WEBGL) {\r\n      rendererType = 'WebGL';\r\n    } else if (this.app.renderer.type === PIXI.RendererType.WEBGPU) {\r\n      rendererType = 'WebGPU';\r\n    }\r\n    return rendererType\r\n  }\r\n\r\n  // Add to camera-controlled scene tree\r\n  public addToViewport(obj: PIXI.Container | PIXI.Sprite | SuperText): any {\r\n\r\n\r\n    console.log(\"addToViewport()\" + this._isInitialized);\r\n    this.requireIsInitialized();\r\n\r\n    this.viewport.addChild(obj);\r\n\r\n    if (obj instanceof ActorContainer || obj instanceof SuperText) {\r\n      obj.onAdded();\r\n    }\r\n\r\n\r\n    this.resize();\r\n  }\r\n\r\n  // Remove from camera-controlled scene tree\r\n  public removeFromViewport(obj: PIXI.Container | PIXI.Sprite | SuperText): any {\r\n\r\n    this.requireIsInitialized();\r\n\r\n    this.viewport.removeChild(obj);\r\n\r\n    if (obj instanceof ActorContainer || obj instanceof SuperText) {\r\n      obj.onRemoved();\r\n    }\r\n\r\n    this.resize();\r\n  }\r\n\r\n  // Add to basic scene tree\r\n  public addToStage(obj: PIXI.Container | PIXI.Sprite | SuperText, parent?: PIXI.Sprite | ActorContainer): any {\r\n\r\n    this.requireIsInitialized();\r\n\r\n    if (parent == null) {\r\n      this.app.stage.addChild(obj);\r\n    } else {\r\n      parent.addChild(obj);\r\n    }\r\n\r\n    if (obj instanceof ActorContainer || obj instanceof SuperText) {\r\n      obj.onAdded();\r\n    }\r\n\r\n    this.resize();\r\n  };\r\n\r\n\r\n  // Remove from basic scene tree\r\n  public removeFromStage(obj: PIXI.Container | PIXI.Sprite | SuperText, parent?: PIXI.Sprite | ActorContainer): any {\r\n\r\n    this.requireIsInitialized();\r\n\r\n    if (parent == null) {\r\n      this.app.stage.removeChild(obj);\r\n    }\r\n    else {\r\n      parent.removeChild(obj);\r\n    }\r\n\r\n    if (obj instanceof ActorContainer || obj instanceof SuperText) {\r\n      obj.onRemoved();\r\n    }\r\n\r\n    this.resize();\r\n  }\r\n\r\n\r\n  public resize = () => {\r\n\r\n    this.emit(GixiApplication.EVENT_RESIZE, this);\r\n  };\r\n\r\n  private setupResizeHandling() {\r\n\r\n    const resizeAfterDelay = () => {\r\n      setTimeout(this.resize, 100);\r\n    };\r\n\r\n    /////////////////////////////\r\n    // Observe window resize\r\n    /////////////////////////////\r\n    window.addEventListener('resize', this.resize);               //now\r\n    window.addEventListener('resize', resizeAfterDelay);          //and after delay. Robust.\r\n    window.addEventListener('orientationchange', this.resize);\r\n    window.addEventListener('orientationchange', resizeAfterDelay);\r\n    this.resize(); // Initial resize\r\n  }\r\n\r\n  public getScreenScaleCurrent(): PIXI.Point {\r\n\r\n    return new PIXI.Point(\r\n      this.app.screen.width / this.configuration.widthInitial,\r\n      this.app.screen.height / this.configuration.heightInitial\r\n    );\r\n  }\r\n\r\n\r\n\r\n  getScreenCenterpoint() {\r\n\r\n    return new PIXI.Point(\r\n      this.app.screen.width / 2,\r\n      this.app.screen.height / 2)\r\n  }\r\n\r\n  // Event Handlers -------------------------------\r\n}","import * as PIXI from 'pixi.js';\r\nimport { GixiApplication } from '../../gixi/GixiApplication';\r\n\r\n/**\r\n * Subclass PIXI.Text if you want basic text functionality.\r\n * \r\n * Subclass SuperText if you ALSO want onResize and onTick events\r\n */\r\nexport class SuperText extends PIXI.Text {\r\n\r\n    // Fields ---------------------------------------\r\n    protected _app: GixiApplication;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication, message: string, fontSize: number = 8, align: PIXI.TextStyleAlign = 'left') {\r\n\r\n\r\n        const textStyle = new PIXI.TextStyle({\r\n            fontFamily: 'Arial',\r\n            fontSize: fontSize,\r\n            fill: '#ffffff',\r\n\r\n            align: align\r\n        });\r\n\r\n        const textOptions: PIXI.TextOptions = {\r\n            text: message,\r\n            style: textStyle,\r\n            resolution: 2 // Ensure text is sharp\r\n        };\r\n\r\n        super(textOptions);\r\n\r\n        this.label = (SuperText).name;\r\n\r\n        this._app = app;\r\n\r\n        // Tick\r\n        app.app.ticker.add(this.onTick.bind(this));\r\n\r\n        // Resize\r\n        this._app.addListener(GixiApplication.EVENT_RESIZE, this.onResize.bind(this));\r\n        this.onResize(this._app);\r\n\r\n    }\r\n\r\n    // Initialization -------------------------------\r\n    public isChild(): boolean {\r\n        return parent !== null;\r\n    }\r\n\r\n    // Event Handlers -------------------------------\r\n    public onAdded() {\r\n        // Empty implementation to be overridden\r\n    }\r\n\r\n    public onRemoved() {\r\n        // Empty implementation to be overridden\r\n    }\r\n\r\n    public onResize(app: GixiApplication): void {\r\n        // Empty implementation to be overridden\r\n    }\r\n\r\n    public onTick(ticker: PIXI.Ticker): void {\r\n        // Empty implementation to be overridden\r\n    }\r\n}\r\n","import { SuperText } from '../../core/super/SuperText';\r\nimport { GixiApplication } from '../../gixi/GixiApplication';\r\n\r\nexport class InstructionsSuperText extends SuperText {\r\n\r\n    // Fields ---------------------------------------\r\n\r\n    // Initialization -------------------------------\r\n\r\n    // Event Handlers -------------------------------\r\n    public override onResize(app: GixiApplication): void {\r\n\r\n        //UPDATE POSITION\r\n        this.x = app.configuration.data.ScreenUIMarginX;\r\n        this.y = app.configuration.data.ScreenUIMarginY;\r\n\r\n        //HACK: UPDATE SIZE\r\n        this.style.fontSize = 15 + 7 / app.app.renderer.resolution\r\n\r\n        //TEMP: SHOW DEBUGGING\r\n        let r1 = Math.round(app.app.renderer.resolution * 100) / 100;\r\n        let r2 = Math.round(this.resolution * 100) / 100;\r\n        this.text = `Arrows / WASD To Move\\nEnter / Spacebar For Attack\\nF For Fullscreen\\n\\n[Resolution: ${r1}, ${r2}]`;\r\n\r\n    }\r\n}\r\n","import { SuperText } from '../../core/super/SuperText';\r\nimport { GixiApplication } from '../../gixi/GixiApplication';\r\n\r\nexport class ScoreSuperText extends SuperText {\r\n\r\n    // Fields ---------------------------------------\r\n\r\n    // Initialization -------------------------------\r\n\r\n    // Event Handlers -------------------------------\r\n    public override onResize(app: GixiApplication): void {\r\n\r\n        //UPDATE POSITION\r\n        this.x = app.app.screen.width - this.width - app.configuration.data.ScreenUIMarginX;\r\n        this.y = app.configuration.data.ScreenUIMarginY;\r\n\r\n        //HACK: UPDATE SIZE\r\n        this.style.fontSize = 15 + 7 / app.app.renderer.resolution\r\n\r\n    }\r\n}\r\n","import * as PIXI from 'pixi.js';\r\n\r\n/**\r\n * Common functionality\r\n */\r\nexport class GixiUtility {\r\n\r\n  // Properties -----------------------------------\r\n\r\n  // Fields ---------------------------------------\r\n\r\n  // Methods --------------------------------------\r\n  public static textureIsNullOrEmpty(texture: PIXI.Texture): boolean {\r\n    return texture === null || texture === PIXI.Texture.EMPTY;\r\n  }\r\n\r\n  public static stringIsNullOrEmpty(value: string): boolean {\r\n    return value === null || value === '';\r\n  }\r\n}\r\n","import { ActorContainer, ActorContainerConfiguration } from './ActorContainer';\r\nimport { GixiApplication } from './GixiApplication';\r\nimport { IActor } from './interfaces/IActor';\r\nimport { IInitializableAsync } from './interfaces/IInitializeAsync';\r\nimport { GixiUtility } from './GixiUtility';\r\nimport * as PIXI from 'pixi.js';\r\n\r\n/**\r\n * Configuration\r\n */\r\nexport interface ActorStaticConfiguration extends ActorContainerConfiguration {\r\n    textureUrl: string;\r\n    texture: PIXI.Texture;\r\n}\r\n\r\nconst ActorStaticConfigurationDefault: ActorStaticConfiguration = {\r\n    textureUrl: '',\r\n    texture: PIXI.Texture.EMPTY,\r\n    isCollidable: true,\r\n    isTickable: true,\r\n    isResizable: true\r\n}\r\n\r\n\r\n/**\r\n * Represents a coin in the game.\r\n * \r\n */\r\nexport class ActorStatic extends ActorContainer implements IInitializableAsync, IActor {\r\n\r\n\r\n    // Properties -----------------------------------\r\n    public override get configuration(): ActorStaticConfiguration {\r\n        return this._configuration as ActorStaticConfiguration;\r\n    }\r\n\r\n    // Fields ---------------------------------------\r\n    protected _sprite!: PIXI.Sprite;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication, configuration?: Partial<ActorStaticConfiguration>) {\r\n\r\n        super(app, { ...ActorStaticConfigurationDefault, ...configuration });\r\n\r\n        if (!GixiUtility.textureIsNullOrEmpty(this.configuration?.texture) &&\r\n            !GixiUtility.stringIsNullOrEmpty(this.configuration?.textureUrl)) {\r\n            throw new Error(\"You cannot set both texture and textureUrl in the configuration\");\r\n        }\r\n\r\n        // Redeclare anything from super \r\n        // that you want differently here\r\n        this.label = (ActorStatic).name;\r\n\r\n        this.initializeAsync();\r\n    }\r\n\r\n\r\n    public override async initializeAsync() {\r\n\r\n        // Super\r\n        await super.initializeAsync();\r\n\r\n        if (!GixiUtility.textureIsNullOrEmpty(this.configuration?.texture)) {\r\n            this._sprite = new PIXI.Sprite(this.configuration?.texture);\r\n        }\r\n        else if (!GixiUtility.stringIsNullOrEmpty(this.configuration?.textureUrl)) {\r\n            await PIXI.Assets.load([this.configuration.textureUrl]);\r\n            const texture: PIXI.Texture = PIXI.Texture.from(this.configuration.textureUrl);\r\n            this._sprite = new PIXI.Sprite(texture);\r\n        }\r\n\r\n        this.addChild(this._sprite);\r\n        this._sprite.anchor.set(0.5, 0.5);\r\n\r\n        // Local\r\n        //Do any additional initialization here\r\n\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n\r\n    // Event Handlers -------------------------------\r\n\r\n    public override onTick(ticker: PIXI.Ticker): void {\r\n\r\n        // Super\r\n        super.onTick(ticker);\r\n\r\n\r\n        // Local\r\n        //Do any additional things here\r\n\r\n    }\r\n}\r\n\r\n","import * as PIXI from 'pixi.js';\r\nimport { GixiApplication } from '@src/scripts/library/gixi/GixiApplication';\r\nimport { Tilemap } from '../gixi/tilemap/Tilemap';\r\nimport { ActorStatic, ActorStaticConfiguration } from '../gixi/ActorStatic';\r\nimport { DropShadowFilter } from 'pixi-filters';\r\n\r\n/**\r\n * Configuration\r\n */\r\nexport interface PlayerConfiguration extends ActorStaticConfiguration {\r\n}\r\n\r\nconst PlayerConfigurationDefault: PlayerConfiguration = {\r\n    textureUrl: '',\r\n    texture: PIXI.Texture.EMPTY,\r\n    isCollidable: true,\r\n    isTickable: true,\r\n    isResizable: true\r\n}\r\n\r\n/**\r\n * Represents a coin in the game.\r\n * \r\n */\r\nexport class Player extends ActorStatic {\r\n\r\n\r\n    // Properties -----------------------------------\r\n\r\n\r\n    // Fields ---------------------------------------\r\n    private _Tilemap: Tilemap;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication, Tilemap: Tilemap, configuration?: Partial<PlayerConfiguration>) {\r\n\r\n        super(app, { ...PlayerConfigurationDefault, ...configuration });\r\n        this._Tilemap = Tilemap;\r\n\r\n        // Redeclare anything from super \r\n        // that you want differently here\r\n        this.label = (Player).name;\r\n\r\n    }\r\n\r\n\r\n\r\n    public override async initializeAsync() {\r\n\r\n        // Super\r\n        await super.initializeAsync();\r\n\r\n        // OPTIONAL: Try these - https://pixijs.io/filters/\r\n        this._sprite.filters = [\r\n            new DropShadowFilter({ blur: 1, alpha: 0.5, quality: 3, resolution: 2 })\r\n        ];\r\n\r\n        // Local\r\n        //Do any additional initialization here\r\n        this._sprite.anchor.set(0, 0);\r\n\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n\r\n\r\n    //TODO: Utilize this to block movement\r\n    private isCollisionWithTilemap() {\r\n\r\n        //show all 4 values in the log string\r\n        let x = Math.round(this.position.x);\r\n        let y = Math.round(this.position.y);\r\n        let width = 32;\r\n        let height = 32;\r\n\r\n        let isCollision = this._Tilemap.isCollision(x, y, width, height);\r\n\r\n        // Internally the map uses globals, so we do NOT need to convert\r\n        //let globalPos = this.toGlobal(this.position);\r\n\r\n        if (isCollision) {\r\n            console.log(`isCollisionWithTilemap (x=${x}, y=${y}) = ${isCollision}`);\r\n        }\r\n        else {\r\n            //console.log(`isCollisionWithTilemap (x=${x}, y=${y}) = ${isCollision}`);\r\n        }\r\n\r\n\r\n        return isCollision;\r\n\r\n    }\r\n\r\n    // Event Handlers -------------------------------\r\n\r\n    public override onTick(ticker: PIXI.Ticker): void {\r\n\r\n        super.onTick(ticker);\r\n\r\n        let moveVector: PIXI.Point = new PIXI.Point(0, 0);\r\n\r\n        if (this._app.systems.inputSystem.isKeyDown('a')) {\r\n            this.isCollisionWithTilemap();\r\n            moveVector.x += -1;\r\n\r\n        }\r\n        if (this._app.systems.inputSystem.isKeyDown('d')) {\r\n            this.isCollisionWithTilemap();\r\n            moveVector.x += 1;\r\n        }\r\n        if (this._app.systems.inputSystem.isKeyDown('w')) {\r\n            this.isCollisionWithTilemap();\r\n            moveVector.y += -1;\r\n        }\r\n        if (this._app.systems.inputSystem.isKeyDown('s')) {\r\n            this.isCollisionWithTilemap();\r\n            moveVector.y += 1;\r\n        }\r\n\r\n        if (this._app.systems.inputSystem.isKeyDownThisFrame('Enter') ||         //works\r\n            this._app.systems.inputSystem.isKeyDownThisFrame('Spacebar')) {      //does work. TODO: WHy?\r\n\r\n            //ACTION!\r\n            this._app.systems.audioSystem.Play(\"./assets/audio/Click01.wav\");\r\n        }\r\n\r\n        if (this._app.systems.inputSystem.isKeyDownThisFrame('f')) {\r\n\r\n            //FULLSCREEN\r\n            this._app.isFullscreen = !this._app.isFullscreen;\r\n        }\r\n\r\n        const movementSpeed = 3.0;\r\n        this.position.x += moveVector.x * ticker.deltaTime * movementSpeed;\r\n        this.position.y += moveVector.y * ticker.deltaTime * movementSpeed;\r\n    }\r\n}\r\n\r\n","import * as PIXI from 'pixi.js';\r\nimport { GixiApplication } from '../GixiApplication';\r\nimport { TilemapData } from '..';\r\nimport { Tilemap } from './Tilemap';\r\n\r\nexport class TilemapCollisionSystem {\r\n    private collisionMap!: boolean[][];\r\n    private _app: GixiApplication;\r\n    private _Tilemap: Tilemap;\r\n\r\n    constructor(app: GixiApplication, Tilemap: Tilemap) {\r\n        this._app = app;\r\n        this._Tilemap = Tilemap;\r\n    }\r\n\r\n    public async initializeAsync() {\r\n        this.collisionMap = this.createCollisionMap(this._Tilemap.tilemapData);\r\n    }\r\n\r\n    private createCollisionMap(tilemapData: TilemapData): boolean[][] {\r\n        if (!tilemapData.layers || !tilemapData.tilesets) {\r\n            throw new Error('Invalid tilemapData: layers or tilesets are missing');\r\n        }\r\n\r\n        const layers = tilemapData.layers;\r\n        const tilesets = tilemapData.tilesets;\r\n\r\n        // Initialize collision map with the dimensions of the tilemap\r\n        const collisionMap: boolean[][] = Array.from({ length: tilemapData.height }, () =>\r\n            Array(tilemapData.width).fill(false)\r\n        );\r\n\r\n        // Build a lookup map for IsCollision property\r\n        const collisionProperties: { [key: number]: boolean } = {};\r\n        tilesets.forEach((tileset) => {\r\n            if (tileset.tiles) {\r\n                tileset.tiles.forEach((tile) => {\r\n                    if (tile.properties) {\r\n                        tile.properties.forEach((property) => {\r\n                            if (property.name === \"IsCollision\") {\r\n                                collisionProperties[tileset.firstgid + tile.id] = property.value;\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n            }\r\n        });\r\n\r\n        // Populate the collision map based on the tile data\r\n        layers.forEach((layer) => {\r\n            if (layer.type === \"tilelayer\" && layer.data) {\r\n                for (let y = 0; y < layer.height; y++) {\r\n                    for (let x = 0; x < layer.width; x++) {\r\n                        const tileIndex = layer.data[y * layer.width + x];\r\n                        if (collisionProperties[tileIndex]) {\r\n                            collisionMap[y][x] = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return collisionMap;\r\n    }\r\n\r\n    public isCollision(x: number, y: number, width: number, height: number): boolean {\r\n        const localPos = new PIXI.Point(x, y);\r\n        const globalPos = new PIXI.Point();\r\n        this._app.app.stage.toGlobal(localPos, globalPos);\r\n\r\n        const tileWidth = this._Tilemap.tilemapData.tilewidth;\r\n        const tileHeight = this._Tilemap.tilemapData.tileheight;\r\n\r\n        const startX = Math.floor((globalPos.x - this._Tilemap.x) / tileWidth);\r\n        const endX = Math.ceil((globalPos.x - this._Tilemap.x + width) / tileWidth);\r\n        const startY = Math.floor((globalPos.y - this._Tilemap.y) / tileHeight);\r\n        const endY = Math.ceil((globalPos.y - this._Tilemap.y + height) / tileHeight);\r\n\r\n        const localTileX = Math.floor(localPos.x / tileWidth);\r\n        const localTileY = Math.floor(localPos.y / tileHeight);\r\n        const globalTileX = Math.floor((globalPos.x - this._Tilemap.x) / tileWidth);\r\n        const globalTileY = Math.floor((globalPos.y - this._Tilemap.y) / tileHeight);\r\n\r\n        const tilemapGlobalPos = new PIXI.Point();\r\n        this._Tilemap.toGlobal(new PIXI.Point(0, 0), tilemapGlobalPos);\r\n\r\n        // console.log(`Player local position: (${localPos.x}, ${localPos.y}) with dimensions (${width}, ${height})`);\r\n        // console.log(`Player local tile position: (${localTileX}, ${localTileY})`);\r\n        // console.log(`Player global position: (${globalPos.x}, ${globalPos.y})`);\r\n        // console.log(`Player global tile position: (${globalTileX}, ${globalTileY})`);\r\n        // console.log(`Tilemap global position: (${tilemapGlobalPos.x}, ${tilemapGlobalPos.y})`);\r\n        // console.log(`Checking collision from (${startX}, ${startY}) to (${endX}, ${endY})`);\r\n\r\n        for (let tileY = startY; tileY < endY; tileY++) {\r\n            for (let tileX = startX; tileX < endX; tileX++) {\r\n                if (tileY >= 0 && tileY < this.collisionMap.length && tileX >= 0 && tileX < this.collisionMap[0].length) {\r\n                    //console.log(`Checking tile (${tileX}, ${tileY})`);\r\n                    if (this.collisionMap[tileY][tileX]) {\r\n                        //console.log(`Collision detected at tile (${tileX}, ${tileY})`);\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    //console.log(`Tile (${tileX}, ${tileY}) is out of bounds`);\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","import * as PIXI from 'pixi.js';\r\nimport { GixiApplication } from '@src/scripts/library/gixi/GixiApplication';\r\nimport { GixiUtility } from '../GixiUtility';\r\nimport { IInitializableAsync } from '../interfaces/IInitializeAsync';\r\nimport { ActorContainer } from '../ActorContainer';\r\nimport { TilemapCollisionSystem } from './TilemapCollisionSystem';\r\n\r\nexport interface TilemapData {\r\n  width: number;\r\n  height: number;\r\n  tilewidth: number;\r\n  tileheight: number;\r\n  layers: Layer[];\r\n  tilesets: Tileset[];\r\n}\r\n\r\nexport interface Layer {\r\n  type: string;\r\n  width: number;\r\n  height: number;\r\n  data?: number[];\r\n  objects?: any[];\r\n}\r\n\r\nexport interface Tileset {\r\n  firstgid: number;\r\n  tiles?: Tile[];\r\n}\r\n\r\nexport interface Tile {\r\n  id: number;\r\n  properties?: Property[];\r\n  type?: string;\r\n}\r\n\r\nexport interface Property {\r\n  name: string;\r\n  value: boolean;\r\n}\r\n\r\nexport interface TilemapItemData {\r\n  x: number;\r\n  y: number;\r\n  row: number;\r\n  column: number;\r\n  texture: PIXI.Texture;\r\n  layerType: LayerType;\r\n  type: string;\r\n}\r\n\r\n\r\nexport enum LayerType {\r\n  TileLayer = 'tilelayer',\r\n  ObjectGroup = 'objectgroup',\r\n}\r\n\r\nexport interface ITilemapItemFactory {\r\n  createTilemapItem(tilemapItemData: TilemapItemData): Promise<PIXI.Container>;\r\n}\r\n\r\n\r\nexport class Tilemap extends ActorContainer implements IInitializableAsync {\r\n\r\n  // Properties -----------------------------------\r\n  get tilemapData(): TilemapData { return this._tilemapData; }\r\n\r\n  // Fields ---------------------------------------\r\n  private _tilemapDataUrl: string;\r\n  private _TilemapItemFactory: ITilemapItemFactory;\r\n  private _TilemapCollisionSystem: TilemapCollisionSystem;\r\n  private _tilemapData!: TilemapData;\r\n\r\n  // Initialization -------------------------------\r\n  constructor(app: GixiApplication, tilemapDataUrl: string, TilemapItemFactory: ITilemapItemFactory) {\r\n    super(app);\r\n\r\n    this._tilemapDataUrl = tilemapDataUrl;\r\n    this._TilemapItemFactory = TilemapItemFactory;\r\n    this._TilemapCollisionSystem = new TilemapCollisionSystem(this._app, this);\r\n\r\n    //https://pixijs.com/8.x/guides/advanced/render-groups\r\n    //As you delve deeper into PixiJS, especially with version 8, \r\n    //you'll encounter a powerful feature known as RenderGroups. Think \r\n    //of RenderGroups as specialized containers within your scene graph \r\n    //that act like mini scene graphs themselves. Here's what you need to\r\n    // know to effectively use Render Groups in your projects:\r\n    this.isRenderGroup = true;\r\n\r\n\r\n    //\r\n    this.label = (Tilemap).name;\r\n    this.position.set(0, 0);\r\n    this.scale.set(1);\r\n    this.isRenderGroup = true;\r\n  }\r\n  get isInitialized(): boolean {\r\n    return this._isInitialized;\r\n  }\r\n\r\n  public override async initializeAsync() {\r\n\r\n    if (this.isInitialized) {\r\n      return;\r\n    }\r\n    await super.initializeAsync();\r\n    this._isInitialized = true;\r\n\r\n    if (GixiUtility.stringIsNullOrEmpty(this._tilemapDataUrl)) {\r\n      throw new Error(`Tilemap.initializeAsync() file missing error. tilemapDataUrl = \"${this._tilemapDataUrl}\"`);\r\n    }\r\n\r\n    if (!this._tilemapDataUrl.endsWith(\".tmj\")) {\r\n      throw new Error(`Tilemap.initializeAsync() file extension error. tilemapDataUrl = \"${this._tilemapDataUrl}\"`);\r\n    }\r\n\r\n    let response!: Response;\r\n    try {\r\n      response = await fetch(this._tilemapDataUrl);\r\n    }\r\n    catch (e) {\r\n      throw new Error(`Tilemap.initializeAsync() fetch error. tilemapDataUrl = \"${this._tilemapDataUrl}\"`);\r\n    }\r\n\r\n    try {\r\n      this._tilemapData = await response.json();\r\n    }\r\n    catch (e) {\r\n      throw new Error(`Tilemap.initializeAsync() json error. tilemapDataUrl = \"${this._tilemapDataUrl}\"`);\r\n    }\r\n\r\n    const tilesetPromises = this._tilemapData.tilesets.map((tileset: any) => {\r\n      const imageUrl = tileset.image.replace('../', 'assets/');\r\n      return PIXI.Assets.load(imageUrl).then(() => {\r\n        return { ...tileset, texture: PIXI.Texture.from(imageUrl) };\r\n      });\r\n    });\r\n\r\n\r\n    const tilesets = await Promise.all(tilesetPromises);\r\n\r\n    for (const layer of this._tilemapData.layers) {\r\n      if (layer.type === LayerType.TileLayer) {\r\n        await this.processTileLayer(layer, tilesets);\r\n      } else if (layer.type === LayerType.ObjectGroup && layer.objects) {\r\n        await this.processObjectLayer(layer, tilesets);\r\n      }\r\n    }\r\n\r\n    this._TilemapCollisionSystem.initializeAsync();\r\n  }\r\n\r\n  requireIsInitialized() {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  // Methods ------------------------------\r\n  private async processTileLayer(layer: Layer, tilesets: any[]) {\r\n    for (let row = 0; row < layer.height; row++) {\r\n      for (let column = 0; column < layer.width; column++) {\r\n        const tileIndex = layer.data ? layer.data[row * layer.width + column] : 0;\r\n        if (tileIndex > 0) {\r\n          const tileset = this.getTilesetForTile(tileIndex, tilesets);\r\n          if (tileset) {\r\n            const localTileIndex = tileIndex - tileset.firstgid;\r\n            const tileX = (localTileIndex % tileset.columns) * tileset.tilewidth;\r\n            const tileY = Math.floor(localTileIndex / tileset.columns) * tileset.tileheight;\r\n\r\n            const rectangle = new PIXI.Rectangle(tileX, tileY, tileset.tilewidth, tileset.tileheight);\r\n            const tileTexture = new PIXI.Texture({\r\n              source: tileset.texture.source,\r\n              frame: rectangle\r\n            });\r\n\r\n            const tilemapItemData: TilemapItemData = {\r\n              x: column * tileset.tilewidth,\r\n              y: row * tileset.tileheight,\r\n              row: row,\r\n              column: column,\r\n              texture: tileTexture,\r\n              layerType: LayerType.TileLayer,\r\n              type: this.getTileType(tileset, localTileIndex) || \"\"\r\n            };\r\n\r\n            const sprite = await this._TilemapItemFactory.createTilemapItem(tilemapItemData);\r\n            sprite.label = `Tile (${row.toString().padStart(2, '0')},${column.toString().padStart(2, '0')})`;\r\n\r\n            sprite.x = tilemapItemData.x;\r\n            sprite.y = tilemapItemData.y;\r\n            this.addChild(sprite);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private async processObjectLayer(layer: Layer, tilesets: any[]) {\r\n    for (const object of layer.objects!) {\r\n      const tileset = this.getTilesetForTile(object.gid, tilesets);\r\n      if (tileset) {\r\n        const localTileIndex = object.gid - tileset.firstgid;\r\n        const tileX = (localTileIndex % tileset.columns) * tileset.tilewidth;\r\n        const tileY = Math.floor(localTileIndex / tileset.columns) * tileset.tileheight;\r\n\r\n        const rectangle = new PIXI.Rectangle(tileX, tileY, tileset.tilewidth, tileset.tileheight);\r\n        const tileTexture = new PIXI.Texture({\r\n          source: tileset.texture.source,\r\n          frame: rectangle\r\n        });\r\n\r\n        let typeResult: string = \"\"; //ok value\r\n        let typePrimary = object.type; //BUG: THis is never populated. Its backup. Ok for now\r\n        let typeBackup = this.getTileType(tileset, localTileIndex)?.toString();\r\n\r\n        if (!GixiUtility.stringIsNullOrEmpty(typePrimary)) {\r\n          typeResult = typePrimary;\r\n        }\r\n        else if (typeBackup != null && !GixiUtility.stringIsNullOrEmpty(typeBackup)) {\r\n          typeResult = typeBackup;\r\n        }\r\n\r\n        //this means its not in a grid since objects can be anywhere\r\n        const unsetValue = -1;\r\n\r\n        const tilemapItemData: TilemapItemData = {\r\n          x: object.x,\r\n          y: object.y - tileset.tileheight,\r\n          row: unsetValue,\r\n          column: unsetValue,\r\n          texture: tileTexture,\r\n          layerType: LayerType.ObjectGroup,\r\n          type: typeResult\r\n        };\r\n\r\n        //console.log(\"Object type: \" + tilemapItemData.type); // Log the type for debugging\r\n\r\n        const sprite = await this._TilemapItemFactory.createTilemapItem(tilemapItemData);\r\n        sprite.label = `Object (${object.id})`;\r\n\r\n        sprite.x = tilemapItemData.x;\r\n        sprite.y = tilemapItemData.y;\r\n\r\n        this.addChild(sprite);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Event Handlers -------------------------------\r\n  public isCollision(playerX: number, playerY: number, playerWidth: number, playerHeight: number): boolean {\r\n    return this._TilemapCollisionSystem.isCollision(playerX, playerY, playerWidth, playerHeight);\r\n  }\r\n\r\n  public override async onAdded() {\r\n    await this.initializeAsync();\r\n  }\r\n\r\n  private getTilesetForTile(tileIndex: number, tilesets: any[]): any {\r\n    for (let i = tilesets.length - 1; i >= 0; i--) {\r\n      if (tileIndex >= tilesets[i].firstgid) {\r\n        return tilesets[i];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public override onRemoved(): void {\r\n    while (this.children.length > 0) {\r\n      const child = this.removeChildAt(0);\r\n      if (child instanceof PIXI.Sprite) {\r\n        child.destroy({ children: true, texture: true });\r\n      }\r\n    }\r\n  }\r\n\r\n  public override onResize(app: GixiApplication): void {\r\n    // Handle resizing logic\r\n  }\r\n\r\n  public override onTick(ticker: PIXI.Ticker): void {\r\n    // Handle tick updates\r\n  }\r\n\r\n  private getTileType(tileset: Tileset, tileIndex: number): string | undefined {\r\n    if (!tileset.tiles) return undefined;\r\n    const tile = tileset.tiles.find(t => t.id === tileIndex);\r\n    return tile?.type;\r\n  }\r\n}","//PIXI\r\nimport * as PIXI from 'pixi.js';\r\nimport { GixiApplication } from '../GixiApplication';\r\nimport { ActorStatic, ActorStaticConfiguration } from '../ActorStatic';\r\n\r\n/**\r\n * Configuration\r\n */\r\nexport interface TilemapObjectConfiguration extends ActorStaticConfiguration {\r\n}\r\n\r\nconst TilemapObjectConfigurationDefault: TilemapObjectConfiguration = {\r\n    textureUrl: '',\r\n    texture: PIXI.Texture.EMPTY,\r\n    isCollidable: true,\r\n    isTickable: true,\r\n    isResizable: true\r\n}\r\n\r\n\r\n/**\r\n * Represents an item from the Object layer in a tilemap\r\n * \r\n */\r\nexport class TilemapObject extends ActorStatic {\r\n\r\n\r\n    // Properties -----------------------------------\r\n\r\n\r\n    // Fields ---------------------------------------\r\n\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication, configuration?: Partial<TilemapObjectConfiguration>) {\r\n\r\n        super(app, { ...TilemapObjectConfigurationDefault, ...configuration });\r\n\r\n        // Redeclare anything from super \r\n        // that you want differently here\r\n        this.label = (TilemapObject).name;\r\n\r\n    }\r\n\r\n    public override async initializeAsync() {\r\n\r\n        // Super\r\n        await super.initializeAsync();\r\n\r\n        // Local\r\n        // Do any additional initialization here\r\n\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n\r\n    // Event Handlers -------------------------------\r\n}\r\n","import { ActorContainer, ActorContainerConfiguration } from './ActorContainer';\r\nimport { GixiApplication } from './GixiApplication';\r\nimport { IActor } from './interfaces/IActor';\r\nimport { IInitializableAsync } from './interfaces/IInitializeAsync';\r\nimport { GixiUtility } from './GixiUtility';\r\nimport * as PIXI from 'pixi.js';\r\nimport { GlowFilter } from 'pixi-filters';\r\n\r\n\r\n\r\n//NOTE: I put this class witin the same file as ActorAnimated \r\n//so I can NOT export it (to hide it from direct use). Needed? Not sure.\r\nclass MultiAnimatedSprite {\r\n\r\n    // Fields ---------------------------------------\r\n    private _animationNameToAnimatedSprite: Map<string, PIXI.AnimatedSprite>;\r\n    private _textureImageURL: string;\r\n    private _spriteSheetURL: string;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(newTextureImageURL: string, newSpriteSheetURL: string) {\r\n        this._textureImageURL = newTextureImageURL;\r\n        this._spriteSheetURL = newSpriteSheetURL;\r\n        this._animationNameToAnimatedSprite = new Map();\r\n    }\r\n\r\n    // Methods ------------------------------\r\n    public async initializeAndReparent(app: GixiApplication, parent: PIXI.Container) {\r\n        const spriteSheetAtlasResponse = await fetch(this._spriteSheetURL);\r\n        const spriteSheetAtlas = await spriteSheetAtlasResponse.json();\r\n        await PIXI.Assets.load(this._textureImageURL);\r\n        const texture = PIXI.Texture.from(this._textureImageURL);\r\n        const spriteSheet = new PIXI.Spritesheet(texture, spriteSheetAtlas);\r\n        await spriteSheet.parse();\r\n\r\n        const size = new PIXI.Point(\r\n            spriteSheetAtlas.meta.size.w,\r\n            spriteSheetAtlas.meta.size.h\r\n        )\r\n\r\n        for (const [animationName, textures] of Object.entries(spriteSheet.animations)) {\r\n            this._animationNameToAnimatedSprite.set(animationName, new PIXI.AnimatedSprite(textures));\r\n        }\r\n\r\n        this._animationNameToAnimatedSprite.forEach((value: PIXI.AnimatedSprite, key: string) => {\r\n\r\n            //NOTE: The parent center and/or the value center may not be proper\r\n            //TODO: Go to index.ts and try to put a coin at a specific world position and then be sure it looks good\r\n            value.setSize(size.x, size.y);\r\n            value.label = (MultiAnimatedSprite).name;\r\n\r\n\r\n\r\n            value.anchor.set(0.5, 0.5);\r\n            parent.addChild(value);\r\n        });\r\n    }\r\n\r\n    public play(animationName: string, animationSpeed: number) {\r\n        const animatedSprite: PIXI.AnimatedSprite | undefined = this._animationNameToAnimatedSprite.get(animationName);\r\n        if (animatedSprite == undefined) {\r\n            throw new Error(\"Trying to play unknown animation with animationName=\" + animationName);\r\n        }\r\n\r\n        animatedSprite.animationSpeed = animationSpeed;\r\n        animatedSprite.play();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Configuration\r\n */\r\nexport interface ActorAnimatedConfiguration extends ActorContainerConfiguration {\r\n}\r\n\r\nconst ActorAnimatedConfigurationDefault: ActorAnimatedConfiguration = {\r\n    isCollidable: true,\r\n    isTickable: true,\r\n    isResizable: true\r\n}\r\n\r\n\r\n/**\r\n * Represents a coin in the game.\r\n * \r\n */\r\nexport class ActorAnimated extends ActorContainer implements IInitializableAsync, IActor {\r\n\r\n\r\n    // Properties -----------------------------------\r\n    public override get configuration(): ActorAnimatedConfiguration {\r\n        return this._configuration as ActorAnimatedConfiguration;\r\n    }\r\n\r\n    // Fields ---------------------------------------\r\n    protected _multiAnimatedSprite!: MultiAnimatedSprite;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication, configuration?: Partial<ActorAnimatedConfiguration>) {\r\n\r\n        super(app, { ...ActorAnimatedConfigurationDefault, ...configuration });\r\n\r\n        // Redeclare anything from super \r\n        // that you want differently here\r\n        this.label = (ActorAnimated).name;\r\n\r\n        this.initializeAsync();\r\n    }\r\n\r\n\r\n    public override async initializeAsync() {\r\n\r\n        // Super\r\n        await super.initializeAsync();\r\n\r\n\r\n        //TODO:\r\n        //1. Populate ActorAnimatedConfiguration above\r\n        //      with whatever is needed to pass into the constructor.\r\n        //      (See how ActorStatic does it.)\r\n        //2. Do some error checking here \r\n        //      (See how ActorStatic does it.)\r\n        //3. Update this snippet below as needed. Done!    \r\n        const animatedTextureURL = 'assets/images/AnimatedCoin/animated_coin.png';\r\n        const animatedTextureJSONURL = 'assets/images/AnimatedCoin/animated_coin.json';\r\n        this._multiAnimatedSprite = new MultiAnimatedSprite(animatedTextureURL, animatedTextureJSONURL);\r\n        await this._multiAnimatedSprite.initializeAndReparent(this._app, this);\r\n        this._multiAnimatedSprite.play('Gold', 0.3);\r\n\r\n\r\n        // Local\r\n        //Do any additional initialization here\r\n\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n\r\n    // Event Handlers -------------------------------\r\n\r\n    public override onTick(ticker: PIXI.Ticker): void {\r\n\r\n        // Super\r\n        super.onTick(ticker);\r\n\r\n\r\n        // Local\r\n        //Do any additional things here\r\n\r\n    }\r\n}\r\n\r\n","\r\nimport {\r\n    Tilemap,\r\n    TilemapData,\r\n    Layer,\r\n    Tileset,\r\n    Tile,\r\n    Property,\r\n    TilemapItemData,\r\n    LayerType,\r\n    ITilemapItemFactory,\r\n} from './tilemap/Tilemap';\r\nimport { ActorContainer, ActorContainerConfiguration } from './ActorContainer';\r\nimport { TilemapCollisionSystem } from './tilemap/TilemapCollisionSystem';\r\nimport { TilemapItemFactoryDefault } from './tilemap/TilemapItemFactoryDefault';\r\nimport { TilemapObject } from './tilemap/TilemapObject';\r\nimport { ActorStatic, ActorStaticConfiguration } from './ActorStatic';\r\nimport { ActorAnimated, ActorAnimatedConfiguration } from './ActorAnimated';\r\nimport { GixiApplication } from './GixiApplication';\r\nimport { GixiUtility } from './GixiUtility';\r\nimport { IActorConfiguration } from './interfaces/IActorConfiguration';\r\n\r\n// Classes - GIXI\r\nexport const GIXI = {\r\n    ActorContainer,\r\n    Tilemap,\r\n    TilemapCollisionSystem,\r\n    TilemapItemFactoryDefault,\r\n    TilemapObject,\r\n    ActorStatic,\r\n    ActorAnimated,\r\n    GixiApplication,\r\n    GixiUtility,\r\n};\r\n\r\n// Non-Classes - Not Yet GIXI - TODO: Add to GIXI somehow. Not sure\r\nexport type {\r\n    TilemapData,\r\n    Layer,\r\n    Tileset,\r\n    Tile, Property,\r\n    TilemapItemData,\r\n    LayerType,\r\n    ITilemapItemFactory,\r\n    IActorConfiguration,\r\n    ActorContainerConfiguration,\r\n    ActorAnimatedConfiguration,\r\n    ActorStaticConfiguration\r\n};\r\n\r\n","import { ITilemapItemFactory, TilemapItemData } from \"..\";\r\nimport * as PIXI from 'pixi.js';\r\nimport { LayerType } from './Tilemap';\r\nimport { GixiApplication } from \"../GixiApplication\";\r\n\r\nexport class TilemapItemFactoryDefault implements ITilemapItemFactory {\r\n\r\n    // Fields ---------------------------------------\r\n    private _app: GixiApplication;\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication) {\r\n        this._app = app;\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n    public async createTilemapItem(tilemapItemData: TilemapItemData): Promise<PIXI.Container> {\r\n\r\n\r\n        switch (tilemapItemData.layerType) {\r\n\r\n            case LayerType.TileLayer:\r\n                //Keep the same as here\r\n                return new PIXI.Sprite(tilemapItemData.texture);\r\n            case LayerType.ObjectGroup:\r\n                //TODO: Copy and paste this class\r\n                //Then use TilemapItemData values to determine the type of object to create\r\n                return new PIXI.Sprite(tilemapItemData.texture);\r\n            default:\r\n                throw new Error('Invalid layer type');\r\n        }\r\n    }\r\n}","import { GixiApplication } from '@src/scripts/library/gixi/GixiApplication';\r\nimport { TilemapObject, TilemapObjectConfiguration } from '@src/scripts/library/gixi/tilemap/TilemapObject';\r\nimport { Player } from '@src/scripts/library/treasureHunter2D/Player';\r\nimport { Actions, Interpolations } from 'pixi-actions';\r\nimport { DropShadowFilter } from 'pixi-filters';\r\nimport { Container, Ticker } from 'pixi.js';\r\n\r\n/**\r\n * Represents a coin in the game.\r\n * \r\n */\r\nexport class ChestTilemapObject extends TilemapObject {\r\n\r\n\r\n\r\n    // Properties -----------------------------------\r\n\r\n\r\n    // Fields ---------------------------------------\r\n\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication, configuration?: Partial<TilemapObjectConfiguration>) {\r\n\r\n        super(app, configuration);\r\n\r\n        // Redeclare anything from super \r\n        // that you want differently here\r\n        this.label = (ChestTilemapObject).name;\r\n    }\r\n\r\n    public override async initializeAsync() {\r\n\r\n        // Super\r\n        await super.initializeAsync();\r\n\r\n        this.filters = [\r\n            new DropShadowFilter({ blur: 1, alpha: 0.5, quality: 3, resolution: 2 })\r\n        ];\r\n\r\n        // Local\r\n        // Do any additional initialization here\r\n\r\n    }\r\n\r\n    // Methods --------------------------------------\r\n    public override onTick(ticker: Ticker): void {\r\n\r\n        // Super\r\n        super.onTick(ticker);\r\n\r\n        // Local\r\n        this.rotation += 0.01 * ticker.deltaTime;\r\n    }\r\n\r\n    private destroyAfterAnimation() {\r\n        let action = Actions.sequence(\r\n\r\n            Actions.delay(0),\r\n            Actions.runFunc(() => {\r\n                // BEFORE Animation: Call something?\r\n                this._app.systems.audioSystem.Play(\"./assets/audio/Chime02.mp3\");\r\n            }),\r\n            Actions.parallel(\r\n\r\n                Actions.rotateTo(this,\r\n                    1,\r\n                    20,\r\n                    Interpolations.smooth2),\r\n\r\n                Actions.scaleTo(this,\r\n                    0,\r\n                    0,\r\n                    20,\r\n                    Interpolations.smooth2),\r\n\r\n            ),\r\n            Actions.runFunc(() => {\r\n                // AFTER Animation: Call something?\r\n                this.destroy();\r\n            }),\r\n        );\r\n        action.play();\r\n\r\n    }\r\n\r\n    // Event Handlers -------------------------------\r\n\r\n    public override onCollision(collisions: Container[]): void {\r\n\r\n        if (!this._isCollidable) {\r\n            return;\r\n        }\r\n\r\n        collisions.forEach((superSprite) => {\r\n            if (superSprite instanceof Player) {\r\n                this._isCollidable = false;\r\n                this.destroyAfterAnimation();\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","import { ActorAnimatedConfiguration } from '@src/scripts/library/gixi';\r\nimport { ActorAnimated } from '@src/scripts/library/gixi/ActorAnimated';\r\nimport { GixiApplication } from '@src/scripts/library/gixi/GixiApplication';\r\nimport { Actions, Interpolations } from 'pixi-actions';\r\nimport { Container } from 'pixi.js';\r\nimport { Player } from '../../Player';\r\nimport { DropShadowFilter, GlowFilter } from 'pixi-filters';\r\n\r\n/**\r\n * Represents a coin in the game.\r\n * \r\n */\r\nexport class CoinTilemapObject extends ActorAnimated {\r\n\r\n\r\n    // Properties -----------------------------------\r\n\r\n\r\n    // Fields ---------------------------------------\r\n\r\n\r\n    // Initialization -------------------------------\r\n    constructor(app: GixiApplication, configuration?: Partial<ActorAnimatedConfiguration>) {\r\n\r\n        super(app, configuration);\r\n\r\n        // Redeclare anything from super \r\n        // that you want differently here\r\n        this.label = (CoinTilemapObject).name;\r\n\r\n    }\r\n\r\n\r\n\r\n    public override async initializeAsync() {\r\n\r\n        // Super\r\n        await super.initializeAsync();\r\n\r\n        // OPTIONAL: Try these - https://pixijs.io/filters/\r\n        this.filters = [\r\n            //new GlowFilter({ distance: 1, outerStrength: 1, innerStrength: 1, color: 0xffff00 }),\r\n            new DropShadowFilter({ blur: 1, alpha: 0.5, quality: 3, resolution: 2 }) //\r\n        ];\r\n\r\n        // Local\r\n        //Do any additional initialization here\r\n\r\n    }\r\n\r\n\r\n    // Methods --------------------------------------\r\n    private destroyAfterAnimation() {\r\n        let action = Actions.sequence(\r\n\r\n            Actions.delay(0),\r\n            Actions.runFunc(() => {\r\n                // BEFORE Animation: Call something?\r\n                this._app.systems.audioSystem.Play(\"./assets/audio/Chime01.mp3\");\r\n            }),\r\n            Actions.parallel(\r\n\r\n                Actions.moveTo(this,\r\n                    this.x,\r\n                    this.y - 32,\r\n                    20,\r\n                    Interpolations.smooth2),\r\n\r\n                Actions.scaleTo(this,\r\n                    2,\r\n                    2,\r\n                    20,\r\n                    Interpolations.smooth2),\r\n\r\n            ),\r\n            Actions.runFunc(() => {\r\n                // AFTER Animation: Call something?\r\n                this.destroy();\r\n            }),\r\n        );\r\n        action.play();\r\n\r\n    }\r\n\r\n\r\n    // Event Handlers -------------------------------\r\n\r\n    public override onCollision(collisions: Container[]): void {\r\n\r\n        if (!this._isCollidable) {\r\n            return;\r\n        }\r\n\r\n        collisions.forEach((superSprite) => {\r\n            if (superSprite instanceof Player) {\r\n                this._isCollidable = false;\r\n                this.destroyAfterAnimation();\r\n            }\r\n        });\r\n    }\r\n}\r\n","import * as PIXI from 'pixi.js';\r\nimport { ChestTilemapObject } from \"./tileMapObjects/ChestTilemapObject\";\r\nimport { GixiApplication } from \"../../gixi/GixiApplication\";\r\nimport { ITilemapItemFactory, TilemapItemData } from '../../gixi';\r\nimport { LayerType } from '../../gixi/tilemap/Tilemap';\r\nimport { CoinTilemapObject } from './tileMapObjects/CoinTilemapObject';\r\n\r\nexport class TilemapItemFactoryCustom implements ITilemapItemFactory {\r\n\r\n  // Fields ---------------------------------------\r\n  private _app: GixiApplication;\r\n\r\n  // Initialization -------------------------------\r\n  constructor(app: GixiApplication) {\r\n    this._app = app;\r\n  }\r\n\r\n  // Methods --------------------------------------\r\n  public async createTilemapItem(tilemapItemData: TilemapItemData): Promise<PIXI.Container> {\r\n\r\n    switch (tilemapItemData.layerType) {\r\n\r\n      case LayerType.TileLayer:\r\n        return new PIXI.Sprite(tilemapItemData.texture);\r\n\r\n      case LayerType.ObjectGroup:\r\n\r\n        //console.log(`createTilemapItem: (${tilemapItemData.row},${tilemapItemData.column}) ` + tilemapItemData.type);\r\n        if (tilemapItemData.type == (ChestTilemapObject).name) {\r\n\r\n          return new ChestTilemapObject(this._app, { texture: tilemapItemData.texture });\r\n        }\r\n        else if (tilemapItemData.type == (CoinTilemapObject).name) {\r\n          return new CoinTilemapObject(this._app);\r\n\r\n        }\r\n\r\n\r\n        CoinTilemapObject\r\n        return new PIXI.Sprite(tilemapItemData.texture);\r\n\r\n      default:\r\n        throw new Error('Invalid layer type');\r\n    }\r\n  }\r\n}","//PIXI\r\nimport * as PIXI from 'pixi.js';\r\nimport Stats from 'stats.js';\r\nimport { Actions, Interpolations } from 'pixi-actions';\r\n\r\n//CORE\r\n\r\n//TREASURE HUNTER GAME\r\nimport { InstructionsSuperText } from '@src/scripts/library/treasureHunter2D/ui/InstructionsSuperText';\r\nimport { ScoreSuperText } from '@src/scripts/library/treasureHunter2D/ui/ScoreSuperText';\r\nimport { Player } from '@src/scripts/library/treasureHunter2D/Player';\r\nimport { GIXI } from './library/gixi';\r\nimport { GixiApplication, GixiApplicationConfiguration } from './library/gixi/GixiApplication';\r\nimport { CoinTilemapObject } from './library/treasureHunter2D/tileMap/tileMapObjects/CoinTilemapObject';\r\nimport { TilemapItemFactoryCustom } from './library/treasureHunter2D/tileMap/TilemapItemFactoryCustom';\r\n\r\n\r\n\r\n/////////////////////////////\r\n// PIXI Configuration\r\n/////////////////////////////\r\nPIXI.AbstractRenderer.defaultOptions.roundPixels = true; // Crisp pixels\r\nPIXI.AbstractRenderer.defaultOptions.resolution = window.devicePixelRatio || 1; // Crisp pixels\r\n\r\n\r\n/////////////////////////////\r\n// Project Configuration\r\n/////////////////////////////\r\nconst gixiAppData: any = {\r\n  LogoImageUrl: 'assets/images/pixijs-logo-32x32.png',\r\n  TilemapDataUrl: 'assets/tilemaps/TreasureHunter2D.tmj',\r\n  PlayerTextureUrl: 'assets/images/player-default-sprite.png',\r\n  CoinsCollected: 0,\r\n  CoinsMax: 5,\r\n  ScreenUIMarginX: 10,\r\n  ScreenUIMarginY: 10,\r\n};\r\n\r\nlet player: Player;\r\nlet coin: CoinTilemapObject;\r\nlet tempWorldOrigin: PIXI.Graphics;\r\n\r\n\r\n/////////////////////////////\r\n// Create App\r\n/////////////////////////////\r\nconst gixiAppConfiguration: GixiApplicationConfiguration = {\r\n\r\n  //Show all values here, for readability\r\n  //Or simply use GixiApplicationConfigurationDefault\r\n  widthInitial: 1920,\r\n  heightInitial: 1080,\r\n  minFPS: 1,\r\n  maxFPS: 240,\r\n  backgroundColor: 0x87867a,\r\n  data: gixiAppData\r\n}\r\nconst gixiAppConst = new GixiApplication('pixi-application-canvas', gixiAppConfiguration);\r\n\r\n\r\n\r\n\r\n/////////////////////////////\r\n// Setup Stats\r\n/////////////////////////////\r\nconst stats = new Stats();\r\nstats.showPanel(0);\r\nstats.dom.className = 'stats-panel';\r\ndocument.body.appendChild(stats.dom);\r\n\r\n\r\n/////////////////////////////\r\n// Setup Pixi JS DevTools\r\n// https://bit.ly/pixijs-devtools\r\n/////////////////////////////\r\n(globalThis as any).__PIXI_APP__ = gixiAppConst.app;\r\n\r\n\r\n/////////////////////////////\r\n// Handle App Initialize\r\n/////////////////////////////\r\nasync function onInitializeCompleted(gixiApp: GixiApplication) {\r\n\r\n  /////////////////////////////\r\n  // Create Tilemap\r\n  /////////////////////////////\r\n  const tilemap = new GIXI.Tilemap(\r\n    gixiApp,\r\n    gixiAppData.TilemapDataUrl,\r\n    new TilemapItemFactoryCustom(gixiApp)\r\n  );\r\n\r\n  //Initialize first, so width and height are available\r\n  await tilemap.initializeAsync();\r\n\r\n  console.log(\"gixiApp: \" + gixiApp.isInitialized);\r\n  gixiApp.addToViewport(tilemap);\r\n  tilemap.x = gixiApp.getScreenCenterpoint().x - tilemap.width / 2;\r\n  tilemap.y = gixiApp.getScreenCenterpoint().y - tilemap.height / 2;\r\n\r\n  /////////////////////////////\r\n  // Temp:  World centerpoint\r\n  //        For reference\r\n  /////////////////////////////\r\n  tempWorldOrigin = new PIXI.Graphics()\r\n    .rect(0, 0, 32, 32)\r\n    .fill({\r\n      color: 0xffffff,\r\n      alpha: 0.5\r\n    });\r\n  gixiApp.addToViewport(tempWorldOrigin);\r\n  tempWorldOrigin.x = gixiApp.getScreenCenterpoint().x;\r\n  tempWorldOrigin.y = gixiApp.getScreenCenterpoint().y;\r\n\r\n\r\n  /////////////////////////////\r\n  // Create Player\r\n  /////////////////////////////\r\n  player = new Player(gixiApp, tilemap, { textureUrl: gixiAppData.PlayerTextureUrl as string });\r\n  gixiApp.addToViewport(player);\r\n  player.x = gixiApp.getScreenCenterpoint().x;\r\n  player.y = gixiApp.getScreenCenterpoint().y;\r\n\r\n\r\n\r\n  /////////////////////////////\r\n  // Setup Camera\r\n  /////////////////////////////\r\n  gixiApp.viewport.follow(player, {\r\n\r\n    //TODO: find the settings that work VERY smoothly at fullsceen\r\n    //its close, now.  But not perfect\r\n    speed: 1,\r\n    acceleration: 1,\r\n    radius: 20\r\n  });\r\n\r\n  // Optional: Input for camera\r\n  // app.viewport\r\n  //   .drag()\r\n  //   .pinch()\r\n  //   .wheel()\r\n  //   .decelerate();\r\n\r\n\r\n  /////////////////////////////\r\n  // Create Text\r\n  /////////////////////////////\r\n  const instructionsText: InstructionsSuperText =\r\n    new InstructionsSuperText(\r\n      gixiApp,\r\n      'SEE INSIDE CLASS',\r\n      30,\r\n      \"left\");\r\n  gixiApp.addToStage(instructionsText);\r\n\r\n  const scoreText: ScoreSuperText =\r\n    new ScoreSuperText(\r\n      gixiApp,\r\n      `Coins ${gixiApp.configuration.data?.CoinsCollected}/${gixiApp.configuration.data?.CoinsMax}`,\r\n      30,\r\n      \"right\");\r\n  gixiApp.addToStage(scoreText);\r\n\r\n  /////////////////////////////\r\n  // Update Systems Every Frame\r\n  /////////////////////////////\r\n  gixiApp.app.ticker.add((ticker) => {\r\n\r\n    stats.begin();\r\n    Actions.tick(ticker.deltaTime);\r\n    stats.end();\r\n  });\r\n\r\n\r\n}\r\n\r\n\r\n/////////////////////////////\r\n// Handle App Error\r\n/////////////////////////////\r\nfunction onInitializeError(error: Error) {\r\n  console.error(`PIXI.Application.init() failed. error = ${error}`);\r\n}\r\n\r\n\r\n/////////////////////////////\r\n// Initialize App\r\n/////////////////////////////\r\ngixiAppConst.addListener(GixiApplication.EVENT_INITIALIZE_COMPLETE, onInitializeCompleted);\r\ngixiAppConst.addListener(GixiApplication.EVENT_INITIALIZE_ERROR, onInitializeError);\r\n\r\n\r\n(async () => {\r\n  await gixiAppConst.initializeAsync();\r\n})();\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + {\"142\":\"6f46ecf1ff524851e045\",\"151\":\"061e9e13269897ecbd38\",\"162\":\"1046d09f72d0e3563e18\",\"421\":\"796907ff150e4ce2813a\",\"440\":\"d6ee605c48ad4a368abe\",\"751\":\"1c7e18eea6655a094d79\",\"852\":\"15740e5671b245293199\"}[chunkId] + \".bundle.js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk\"] = self[\"webpackChunk\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [75], () => (__webpack_require__(606)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","inProgress","SystemBase","constructor","app","this","_app","CollisionSystem","super","getCollisions","me","getCollidingSpritesFromChildren","stage","children","viewport","isCollidingWith","other","bounds1","getBounds","bounds2","x","width","y","height","filter","child","ActorContainerConfigurationDefault","isCollidable","isTickable","isResizable","ActorContainer","isInitialized","_isInitialized","configuration","_configuration","_isCollidable","isChild","parent","_isDestroyed","ticker","add","onTickInternal","bind","addListener","GixiApplication","EVENT_RESIZE","onResizeInternal","requireIsInitialized","Error","initializeAsync","destroy","options","remove","removeListener","onAdded","onRemoved","onResize","onTick","collisions","systems","collisionSystem","length","onCollision","InputSystem","_keyStateDictionary","Map","window","addEventListener","onKeyDown","onKeyUp","isKeyDown","key","getKeyStateByKey","isDown","isKeyDownThisFrame","keyState","isDownThisFrame","keyboardEvent","get","undefined","newKeyState","KeyState","set","update","forEach","AudioSystem","_audioContextResumed","setupAudioContextResume","resumeAudioContext","audioContext","context","state","resume","then","console","log","catch","err","error","once","Play","fileName","PlayAsync","warn","from","url","preload","autoPlay","isLoaded","Promise","resolve","setTimeout","speed","volume","play","GixiApplicationConfigurationDefault","widthInitial","heightInitial","minFPS","maxFPS","backgroundColor","data","Systems","inputSystem","audioSystem","EventEmitter","isFullscreen","_isFullscreen","value","elem","document","getElementById","canvas","id","requestFullscreen","fullscreenEnabled","exitFullscreen","_systems","canvasId","resize","emit","_canvasId","setMaxListeners","init","resizeTo","GetRendererTypeAsString","renderer","type","screenWidth","screen","screenHeight","worldWidth","worldHeight","events","center","getScreenCenterpoint","deltaMS","EVENT_INITIALIZE_COMPLETE","setupResizeHandling","addToStage","label","EVENT_INITIALIZE_ERROR","rendererType","WEBGL","WEBGPU","addToViewport","obj","addChild","SuperText","removeFromViewport","removeChild","removeFromStage","resizeAfterDelay","getScreenScaleCurrent","message","fontSize","align","text","style","fontFamily","fill","resolution","name","InstructionsSuperText","ScreenUIMarginX","ScreenUIMarginY","r1","Math","round","r2","ScoreSuperText","GixiUtility","textureIsNullOrEmpty","texture","EMPTY","stringIsNullOrEmpty","ActorStaticConfigurationDefault","textureUrl","ActorStatic","load","_sprite","anchor","PlayerConfigurationDefault","Player","Tilemap","_Tilemap","filters","blur","alpha","quality","isCollisionWithTilemap","position","isCollision","moveVector","deltaTime","TilemapCollisionSystem","collisionMap","createCollisionMap","tilemapData","layers","tilesets","Array","collisionProperties","tileset","tiles","tile","properties","property","firstgid","layer","tileIndex","localPos","globalPos","toGlobal","tileWidth","tilewidth","tileHeight","tileheight","startX","floor","endX","ceil","startY","endY","tilemapGlobalPos","tileY","tileX","LayerType","_tilemapData","tilemapDataUrl","TilemapItemFactory","_tilemapDataUrl","_TilemapItemFactory","_TilemapCollisionSystem","isRenderGroup","scale","endsWith","response","fetch","e","json","tilesetPromises","map","imageUrl","image","replace","all","TileLayer","processTileLayer","ObjectGroup","objects","processObjectLayer","row","column","getTilesetForTile","localTileIndex","columns","rectangle","tileTexture","source","frame","tilemapItemData","layerType","getTileType","sprite","createTilemapItem","toString","padStart","object","gid","typeResult","typePrimary","typeBackup","unsetValue","playerX","playerY","playerWidth","playerHeight","i","removeChildAt","find","t","TilemapObjectConfigurationDefault","TilemapObject","MultiAnimatedSprite","newTextureImageURL","newSpriteSheetURL","_textureImageURL","_spriteSheetURL","_animationNameToAnimatedSprite","initializeAndReparent","spriteSheetAtlasResponse","spriteSheetAtlas","spriteSheet","parse","size","meta","w","h","animationName","textures","Object","entries","animations","setSize","animationSpeed","animatedSprite","ActorAnimatedConfigurationDefault","ActorAnimated","_multiAnimatedSprite","GIXI","TilemapItemFactoryDefault","ChestTilemapObject","rotation","destroyAfterAnimation","sequence","delay","runFunc","parallel","rotateTo","smooth2","scaleTo","superSprite","CoinTilemapObject","moveTo","TilemapItemFactoryCustom","defaultOptions","roundPixels","devicePixelRatio","gixiAppData","LogoImageUrl","TilemapDataUrl","PlayerTextureUrl","CoinsCollected","CoinsMax","player","tempWorldOrigin","gixiAppConst","stats","showPanel","dom","className","body","appendChild","globalThis","__PIXI_APP__","gixiApp","tilemap","rect","color","follow","acceleration","radius","instructionsText","scoreText","begin","tick","end","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","keys","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","f","chunkId","reduce","promises","u","miniCssF","g","Function","prop","prototype","hasOwnProperty","l","done","push","script","needAttach","scripts","getElementsByTagName","s","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","event","onerror","onload","clearTimeout","doneFns","parentNode","target","head","Symbol","toStringTag","scriptUrl","importScripts","location","currentScript","test","p","installedChunks","installedChunkData","promise","reject","errorType","realSrc","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}